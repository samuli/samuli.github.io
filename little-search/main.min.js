(function(l, i, v, e) { v = l.createElement(i); v.async = 1; v.src = '//' + (location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; e = l.getElementsByTagName(i)[0]; e.parentNode.insertBefore(v, e)})(document, 'script');
var starter = (function (exports) {
  'use strict';

  var out_of_memory = /* tuple */[
    "Out_of_memory",
    0
  ];

  var sys_error = /* tuple */[
    "Sys_error",
    -1
  ];

  var failure = /* tuple */[
    "Failure",
    -2
  ];

  var invalid_argument = /* tuple */[
    "Invalid_argument",
    -3
  ];

  var end_of_file = /* tuple */[
    "End_of_file",
    -4
  ];

  var division_by_zero = /* tuple */[
    "Division_by_zero",
    -5
  ];

  var not_found = /* tuple */[
    "Not_found",
    -6
  ];

  var match_failure = /* tuple */[
    "Match_failure",
    -7
  ];

  var stack_overflow = /* tuple */[
    "Stack_overflow",
    -8
  ];

  var sys_blocked_io = /* tuple */[
    "Sys_blocked_io",
    -9
  ];

  var assert_failure = /* tuple */[
    "Assert_failure",
    -10
  ];

  var undefined_recursive_module = /* tuple */[
    "Undefined_recursive_module",
    -11
  ];

  out_of_memory.tag = 248;

  sys_error.tag = 248;

  failure.tag = 248;

  invalid_argument.tag = 248;

  end_of_file.tag = 248;

  division_by_zero.tag = 248;

  not_found.tag = 248;

  match_failure.tag = 248;

  stack_overflow.tag = 248;

  sys_blocked_io.tag = 248;

  assert_failure.tag = 248;

  undefined_recursive_module.tag = 248;
  /*  Not a pure module */

  function caml_array_sub(x, offset, len) {
    var result = new Array(len);
    var j = 0;
    var i = offset;
    while(j < len) {
      result[j] = x[i];
      j = j + 1 | 0;
      i = i + 1 | 0;
    }  return result;
  }

  function caml_array_set(xs, index, newval) {
    if (index < 0 || index >= xs.length) {
      throw [
            invalid_argument,
            "index out of bounds"
          ];
    } else {
      xs[index] = newval;
      return /* () */0;
    }
  }

  function caml_array_get(xs, index) {
    if (index < 0 || index >= xs.length) {
      throw [
            invalid_argument,
            "index out of bounds"
          ];
    } else {
      return xs[index];
    }
  }

  function caml_make_vect(len, init) {
    var b = new Array(len);
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      b[i] = init;
    }
    return b;
  }
  /* No side effect */

  function app(_f, _args) {
    while(true) {
      var args = _args;
      var f = _f;
      var arity = f.length;
      var arity$1 = arity === 0 ? 1 : arity;
      var len = args.length;
      var d = arity$1 - len | 0;
      if (d === 0) {
        return f.apply(null, args);
      } else if (d < 0) {
        _args = caml_array_sub(args, arity$1, -d | 0);
        _f = f.apply(null, caml_array_sub(args, 0, arity$1));
        continue ;
      } else {
        return (function(f,args){
        return function (x) {
          return app(f, args.concat(/* array */[x]));
        }
        }(f,args));
      }
    }}

  function curry_1(o, a0, arity) {
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[a0]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            return o(a0);
        case 2 : 
            return (function (param) {
                return o(a0, param);
              });
        case 3 : 
            return (function (param, param$1) {
                return o(a0, param, param$1);
              });
        case 4 : 
            return (function (param, param$1, param$2) {
                return o(a0, param, param$1, param$2);
              });
        case 5 : 
            return (function (param, param$1, param$2, param$3) {
                return o(a0, param, param$1, param$2, param$3);
              });
        case 6 : 
            return (function (param, param$1, param$2, param$3, param$4) {
                return o(a0, param, param$1, param$2, param$3, param$4);
              });
        case 7 : 
            return (function (param, param$1, param$2, param$3, param$4, param$5) {
                return o(a0, param, param$1, param$2, param$3, param$4, param$5);
              });
        
      }
    }
  }

  function _1(o, a0) {
    var arity = o.length;
    if (arity === 1) {
      return o(a0);
    } else {
      return curry_1(o, a0, arity);
    }
  }

  function curry_2(o, a0, a1, arity) {
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            return app(o(a0), /* array */[a1]);
        case 2 : 
            return o(a0, a1);
        case 3 : 
            return (function (param) {
                return o(a0, a1, param);
              });
        case 4 : 
            return (function (param, param$1) {
                return o(a0, a1, param, param$1);
              });
        case 5 : 
            return (function (param, param$1, param$2) {
                return o(a0, a1, param, param$1, param$2);
              });
        case 6 : 
            return (function (param, param$1, param$2, param$3) {
                return o(a0, a1, param, param$1, param$2, param$3);
              });
        case 7 : 
            return (function (param, param$1, param$2, param$3, param$4) {
                return o(a0, a1, param, param$1, param$2, param$3, param$4);
              });
        
      }
    }
  }

  function _2(o, a0, a1) {
    var arity = o.length;
    if (arity === 2) {
      return o(a0, a1);
    } else {
      return curry_2(o, a0, a1, arity);
    }
  }

  function curry_3(o, a0, a1, a2, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[a2]);
        case 3 : 
            return o(a0, a1, a2);
        case 4 : 
            return (function (param) {
                return o(a0, a1, a2, param);
              });
        case 5 : 
            return (function (param, param$1) {
                return o(a0, a1, a2, param, param$1);
              });
        case 6 : 
            return (function (param, param$1, param$2) {
                return o(a0, a1, a2, param, param$1, param$2);
              });
        case 7 : 
            return (function (param, param$1, param$2, param$3) {
                return o(a0, a1, a2, param, param$1, param$2, param$3);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2
                ]);
    }
    
  }

  function _3(o, a0, a1, a2) {
    var arity = o.length;
    if (arity === 3) {
      return o(a0, a1, a2);
    } else {
      return curry_3(o, a0, a1, a2, arity);
    }
  }

  function curry_4(o, a0, a1, a2, a3, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[a3]);
        case 4 : 
            return o(a0, a1, a2, a3);
        case 5 : 
            return (function (param) {
                return o(a0, a1, a2, a3, param);
              });
        case 6 : 
            return (function (param, param$1) {
                return o(a0, a1, a2, a3, param, param$1);
              });
        case 7 : 
            return (function (param, param$1, param$2) {
                return o(a0, a1, a2, a3, param, param$1, param$2);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3
                ]);
    }
    
  }

  function _4(o, a0, a1, a2, a3) {
    var arity = o.length;
    if (arity === 4) {
      return o(a0, a1, a2, a3);
    } else {
      return curry_4(o, a0, a1, a2, a3, arity);
    }
  }

  function curry_5(o, a0, a1, a2, a3, a4, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3,
                        a4
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[
                        a3,
                        a4
                      ]);
        case 4 : 
            return app(o(a0, a1, a2, a3), /* array */[a4]);
        case 5 : 
            return o(a0, a1, a2, a3, a4);
        case 6 : 
            return (function (param) {
                return o(a0, a1, a2, a3, a4, param);
              });
        case 7 : 
            return (function (param, param$1) {
                return o(a0, a1, a2, a3, a4, param, param$1);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3,
                  a4
                ]);
    }
    
  }

  function _5(o, a0, a1, a2, a3, a4) {
    var arity = o.length;
    if (arity === 5) {
      return o(a0, a1, a2, a3, a4);
    } else {
      return curry_5(o, a0, a1, a2, a3, a4, arity);
    }
  }

  function curry_6(o, a0, a1, a2, a3, a4, a5, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3,
                        a4,
                        a5
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[
                        a3,
                        a4,
                        a5
                      ]);
        case 4 : 
            return app(o(a0, a1, a2, a3), /* array */[
                        a4,
                        a5
                      ]);
        case 5 : 
            return app(o(a0, a1, a2, a3, a4), /* array */[a5]);
        case 6 : 
            return o(a0, a1, a2, a3, a4, a5);
        case 7 : 
            return (function (param) {
                return o(a0, a1, a2, a3, a4, a5, param);
              });
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3,
                  a4,
                  a5
                ]);
    }
    
  }

  function _6(o, a0, a1, a2, a3, a4, a5) {
    var arity = o.length;
    if (arity === 6) {
      return o(a0, a1, a2, a3, a4, a5);
    } else {
      return curry_6(o, a0, a1, a2, a3, a4, a5, arity);
    }
  }

  function curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[
                        a3,
                        a4,
                        a5,
                        a6
                      ]);
        case 4 : 
            return app(o(a0, a1, a2, a3), /* array */[
                        a4,
                        a5,
                        a6
                      ]);
        case 5 : 
            return app(o(a0, a1, a2, a3, a4), /* array */[
                        a5,
                        a6
                      ]);
        case 6 : 
            return app(o(a0, a1, a2, a3, a4, a5), /* array */[a6]);
        case 7 : 
            return o(a0, a1, a2, a3, a4, a5, a6);
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6
                ]);
    }
    
  }

  function _7(o, a0, a1, a2, a3, a4, a5, a6) {
    var arity = o.length;
    if (arity === 7) {
      return o(a0, a1, a2, a3, a4, a5, a6);
    } else {
      return curry_7(o, a0, a1, a2, a3, a4, a5, a6, arity);
    }
  }

  function curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity) {
    var exit = 0;
    if (arity > 7 || arity < 0) {
      return app(o, /* array */[
                  a0,
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7
                ]);
    } else {
      switch (arity) {
        case 0 : 
        case 1 : 
            exit = 1;
            break;
        case 2 : 
            return app(o(a0, a1), /* array */[
                        a2,
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 3 : 
            return app(o(a0, a1, a2), /* array */[
                        a3,
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 4 : 
            return app(o(a0, a1, a2, a3), /* array */[
                        a4,
                        a5,
                        a6,
                        a7
                      ]);
        case 5 : 
            return app(o(a0, a1, a2, a3, a4), /* array */[
                        a5,
                        a6,
                        a7
                      ]);
        case 6 : 
            return app(o(a0, a1, a2, a3, a4, a5), /* array */[
                        a6,
                        a7
                      ]);
        case 7 : 
            return app(o(a0, a1, a2, a3, a4, a5, a6), /* array */[a7]);
        
      }
    }
    if (exit === 1) {
      return app(o(a0), /* array */[
                  a1,
                  a2,
                  a3,
                  a4,
                  a5,
                  a6,
                  a7
                ]);
    }
    
  }

  function _8(o, a0, a1, a2, a3, a4, a5, a6, a7) {
    var arity = o.length;
    if (arity === 8) {
      return o(a0, a1, a2, a3, a4, a5, a6, a7);
    } else {
      return curry_8(o, a0, a1, a2, a3, a4, a5, a6, a7, arity);
    }
  }
  /* No side effect */

  function __(tag, block) {
    block.tag = tag;
    return block;
  }
  /* No side effect */

  function caml_string_compare(s1, s2) {
    if (s1 === s2) {
      return 0;
    } else if (s1 < s2) {
      return -1;
    } else {
      return 1;
    }
  }

  function caml_int_max(x, y) {
    if (x > y) {
      return x;
    } else {
      return y;
    }
  }

  function caml_float_max(x, y) {
    if (x > y) {
      return x;
    } else {
      return y;
    }
  }
  /* No side effect */

  var for_in = function (o,foo){
          for (var x in o) { foo(x); }
        };

  function caml_equal(_a, _b) {
    while(true) {
      var b = _b;
      var a = _a;
      if (a === b) {
        return true;
      } else {
        var a_type = typeof a;
        if (a_type === "string" || a_type === "number" || a_type === "boolean" || a_type === "undefined" || a === null) {
          return false;
        } else {
          var b_type = typeof b;
          if (a_type === "function" || b_type === "function") {
            throw [
                  invalid_argument,
                  "equal: functional value"
                ];
          } else if (b_type === "number" || b_type === "undefined" || b === null) {
            return false;
          } else {
            var tag_a = a.tag | 0;
            var tag_b = b.tag | 0;
            if (tag_a === 250) {
              _a = a[0];
              continue ;
            } else if (tag_b === 250) {
              _b = b[0];
              continue ;
            } else if (tag_a === 248) {
              return a[1] === b[1];
            } else if (tag_a === 251) {
              throw [
                    invalid_argument,
                    "equal: abstract value"
                  ];
            } else if (tag_a !== tag_b) {
              return false;
            } else if (tag_a === 256) {
              return a[1] === b[1];
            } else {
              var len_a = a.length | 0;
              var len_b = b.length | 0;
              if (len_a === len_b) {
                if (Array.isArray(a)) {
                  var a$1 = a;
                  var b$1 = b;
                  var _i = 0;
                  var same_length = len_a;
                  while(true) {
                    var i = _i;
                    if (i === same_length) {
                      return true;
                    } else if (caml_equal(a$1[i], b$1[i])) {
                      _i = i + 1 | 0;
                      continue ;
                    } else {
                      return false;
                    }
                  }              } else {
                  var a$2 = a;
                  var b$2 = b;
                  var result = /* record */[/* contents */true];
                  var do_key_a = (function(b$2,result){
                  return function do_key_a(key) {
                    if (b$2.hasOwnProperty(key)) {
                      return 0;
                    } else {
                      result[0] = false;
                      return /* () */0;
                    }
                  }
                  }(b$2,result));
                  var do_key_b = (function(a$2,b$2,result){
                  return function do_key_b(key) {
                    if (!a$2.hasOwnProperty(key) || !caml_equal(b$2[key], a$2[key])) {
                      result[0] = false;
                      return /* () */0;
                    } else {
                      return 0;
                    }
                  }
                  }(a$2,b$2,result));
                  for_in(a$2, do_key_a);
                  if (result[0]) {
                    for_in(b$2, do_key_b);
                  }
                  return result[0];
                }
              } else {
                return false;
              }
            }
          }
        }
      }
    }}

  function caml_notequal(a, b) {
    return !caml_equal(a, b);
  }
  /* No side effect */

  /* node_std_output Not a pure module */

  /* No side effect */

  var imul = ( Math.imul || function (x,y) {
    y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; 
  }
  );
  /* imul Not a pure module */

  var repeat = ( (String.prototype.repeat && function (count,self){return self.repeat(count)}) ||
                                                    function(count , self) {
          if (self.length == 0 || count == 0) {
              return '';
          }
          // Ensuring count is a 31-bit integer allows us to heavily optimize the
          // main part. But anyway, most current (August 2014) browsers can't handle
          // strings 1 << 28 chars or longer, so:
          if (self.length * count >= 1 << 28) {
              throw new RangeError('repeat count must not overflow maximum string size');
          }
          var rpt = '';
          for (;;) {
              if ((count & 1) == 1) {
                  rpt += self;
              }
              count >>>= 1;
              if (count == 0) {
                  break;
              }
              self += self;
          }
          return rpt;
      }
  );
  /* repeat Not a pure module */

  var min_int = /* record */[
    /* hi */-2147483648,
    /* lo */0
  ];

  var max_int = /* record */[
    /* hi */2147483647,
    /* lo */1
  ];

  var one = /* record */[
    /* hi */0,
    /* lo */1
  ];

  var zero = /* record */[
    /* hi */0,
    /* lo */0
  ];

  var neg_one = /* record */[
    /* hi */-1,
    /* lo */4294967295
  ];

  function neg_signed(x) {
    return (x & 2147483648) !== 0;
  }

  function add(param, param$1) {
    var other_low_ = param$1[/* lo */1];
    var this_low_ = param[/* lo */1];
    var lo = this_low_ + other_low_ & 4294967295;
    var overflow = neg_signed(this_low_) && (neg_signed(other_low_) || !neg_signed(lo)) || neg_signed(other_low_) && !neg_signed(lo) ? 1 : 0;
    var hi = param[/* hi */0] + param$1[/* hi */0] + overflow & 4294967295;
    return /* record */[
            /* hi */hi,
            /* lo */(lo >>> 0)
          ];
  }

  function not(param) {
    var hi = param[/* hi */0] ^ -1;
    var lo = param[/* lo */1] ^ -1;
    return /* record */[
            /* hi */hi,
            /* lo */(lo >>> 0)
          ];
  }

  function eq(x, y) {
    if (x[/* hi */0] === y[/* hi */0]) {
      return x[/* lo */1] === y[/* lo */1];
    } else {
      return false;
    }
  }

  function neg(x) {
    if (eq(x, min_int)) {
      return min_int;
    } else {
      return add(not(x), one);
    }
  }

  function lsl_(x, numBits) {
    if (numBits === 0) {
      return x;
    } else {
      var lo = x[/* lo */1];
      if (numBits >= 32) {
        return /* record */[
                /* hi */(lo << (numBits - 32 | 0)),
                /* lo */0
              ];
      } else {
        var hi = (lo >>> (32 - numBits | 0)) | (x[/* hi */0] << numBits);
        return /* record */[
                /* hi */hi,
                /* lo */((lo << numBits) >>> 0)
              ];
      }
    }
  }

  function asr_(x, numBits) {
    if (numBits === 0) {
      return x;
    } else {
      var hi = x[/* hi */0];
      if (numBits < 32) {
        var hi$1 = (hi >> numBits);
        var lo = (hi << (32 - numBits | 0)) | (x[/* lo */1] >>> numBits);
        return /* record */[
                /* hi */hi$1,
                /* lo */(lo >>> 0)
              ];
      } else {
        var lo$1 = (hi >> (numBits - 32 | 0));
        return /* record */[
                /* hi */hi >= 0 ? 0 : -1,
                /* lo */(lo$1 >>> 0)
              ];
      }
    }
  }

  function is_zero(param) {
    if (param[/* hi */0] !== 0 || param[/* lo */1] !== 0) {
      return false;
    } else {
      return true;
    }
  }

  function mul(_this, _other) {
    while(true) {
      var other = _other;
      var $$this = _this;
      var exit = 0;
      var lo;
      var this_hi = $$this[/* hi */0];
      var exit$1 = 0;
      var exit$2 = 0;
      var exit$3 = 0;
      if (this_hi !== 0 || $$this[/* lo */1] !== 0) {
        exit$3 = 4;
      } else {
        return zero;
      }
      if (exit$3 === 4) {
        if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {
          exit$2 = 3;
        } else {
          return zero;
        }
      }
      if (exit$2 === 3) {
        if (this_hi !== -2147483648 || $$this[/* lo */1] !== 0) {
          exit$1 = 2;
        } else {
          lo = other[/* lo */1];
          exit = 1;
        }
      }
      if (exit$1 === 2) {
        var other_hi = other[/* hi */0];
        var lo$1 = $$this[/* lo */1];
        var exit$4 = 0;
        if (other_hi !== -2147483648 || other[/* lo */1] !== 0) {
          exit$4 = 3;
        } else {
          lo = lo$1;
          exit = 1;
        }
        if (exit$4 === 3) {
          var other_lo = other[/* lo */1];
          if (this_hi < 0) {
            if (other_hi < 0) {
              _other = neg(other);
              _this = neg($$this);
              continue ;
            } else {
              return neg(mul(neg($$this), other));
            }
          } else if (other_hi < 0) {
            return neg(mul($$this, neg(other)));
          } else {
            var a48 = (this_hi >>> 16);
            var a32 = this_hi & 65535;
            var a16 = (lo$1 >>> 16);
            var a00 = lo$1 & 65535;
            var b48 = (other_hi >>> 16);
            var b32 = other_hi & 65535;
            var b16 = (other_lo >>> 16);
            var b00 = other_lo & 65535;
            var c48 = 0;
            var c32 = 0;
            var c16 = 0;
            var c00 = a00 * b00;
            c16 = (c00 >>> 16) + a16 * b00;
            c32 = (c16 >>> 16);
            c16 = (c16 & 65535) + a00 * b16;
            c32 = c32 + (c16 >>> 16) + a32 * b00;
            c48 = (c32 >>> 16);
            c32 = (c32 & 65535) + a16 * b16;
            c48 += (c32 >>> 16);
            c32 = (c32 & 65535) + a00 * b32;
            c48 += (c32 >>> 16);
            c32 = c32 & 65535;
            c48 = c48 + (a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48) & 65535;
            var hi = c32 | (c48 << 16);
            var lo$2 = c00 & 65535 | ((c16 & 65535) << 16);
            return /* record */[
                    /* hi */hi,
                    /* lo */(lo$2 >>> 0)
                  ];
          }
        }
        
      }
      if (exit === 1) {
        if ((lo & 1) === 0) {
          return zero;
        } else {
          return min_int;
        }
      }
      
    }}

  function ge(param, param$1) {
    var other_hi = param$1[/* hi */0];
    var hi = param[/* hi */0];
    if (hi > other_hi) {
      return true;
    } else if (hi < other_hi) {
      return false;
    } else {
      return param[/* lo */1] >= param$1[/* lo */1];
    }
  }

  function neq(x, y) {
    return !eq(x, y);
  }

  function lt(x, y) {
    return !ge(x, y);
  }

  function gt(x, y) {
    if (x[/* hi */0] > y[/* hi */0]) {
      return true;
    } else if (x[/* hi */0] < y[/* hi */0]) {
      return false;
    } else {
      return x[/* lo */1] > y[/* lo */1];
    }
  }

  function to_float(param) {
    return param[/* hi */0] * (0x100000000) + param[/* lo */1];
  }

  var two_ptr_32_dbl = Math.pow(2, 32);

  var two_ptr_63_dbl = Math.pow(2, 63);

  var neg_two_ptr_63 = -Math.pow(2, 63);

  function of_float(x) {
    if (isNaN(x) || !isFinite(x)) {
      return zero;
    } else if (x <= neg_two_ptr_63) {
      return min_int;
    } else if (x + 1 >= two_ptr_63_dbl) {
      return max_int;
    } else if (x < 0) {
      return neg(of_float(-x));
    } else {
      var hi = x / two_ptr_32_dbl | 0;
      var lo = x % two_ptr_32_dbl | 0;
      return /* record */[
              /* hi */hi,
              /* lo */(lo >>> 0)
            ];
    }
  }

  function div$1(_self, _other) {
    while(true) {
      var other = _other;
      var self = _self;
      var self_hi = self[/* hi */0];
      var exit = 0;
      var exit$1 = 0;
      if (other[/* hi */0] !== 0 || other[/* lo */1] !== 0) {
        exit$1 = 2;
      } else {
        throw division_by_zero;
      }
      if (exit$1 === 2) {
        if (self_hi !== -2147483648) {
          if (self_hi !== 0 || self[/* lo */1] !== 0) {
            exit = 1;
          } else {
            return zero;
          }
        } else if (self[/* lo */1] !== 0) {
          exit = 1;
        } else if (eq(other, one) || eq(other, neg_one)) {
          return self;
        } else if (eq(other, min_int)) {
          return one;
        } else {
          var other_hi = other[/* hi */0];
          var half_this = asr_(self, 1);
          var approx = lsl_(div$1(half_this, other), 1);
          var exit$2 = 0;
          if (approx[/* hi */0] !== 0 || approx[/* lo */1] !== 0) {
            exit$2 = 3;
          } else if (other_hi < 0) {
            return one;
          } else {
            return neg(one);
          }
          if (exit$2 === 3) {
            var y = mul(other, approx);
            var rem = add(self, neg(y));
            return add(approx, div$1(rem, other));
          }
          
        }
      }
      if (exit === 1) {
        var other_hi$1 = other[/* hi */0];
        var exit$3 = 0;
        if (other_hi$1 !== -2147483648 || other[/* lo */1] !== 0) {
          exit$3 = 2;
        } else {
          return zero;
        }
        if (exit$3 === 2) {
          if (self_hi < 0) {
            if (other_hi$1 < 0) {
              _other = neg(other);
              _self = neg(self);
              continue ;
            } else {
              return neg(div$1(neg(self), other));
            }
          } else if (other_hi$1 < 0) {
            return neg(div$1(self, neg(other)));
          } else {
            var res = zero;
            var rem$1 = self;
            while(ge(rem$1, other)) {
              var approx$1 = caml_float_max(1, Math.floor(to_float(rem$1) / to_float(other)));
              var log2 = Math.ceil(Math.log(approx$1) / Math.LN2);
              var delta = log2 <= 48 ? 1 : Math.pow(2, log2 - 48);
              var approxRes = of_float(approx$1);
              var approxRem = mul(approxRes, other);
              while(approxRem[/* hi */0] < 0 || gt(approxRem, rem$1)) {
                approx$1 -= delta;
                approxRes = of_float(approx$1);
                approxRem = mul(approxRes, other);
              }            if (is_zero(approxRes)) {
                approxRes = one;
              }
              res = add(res, approxRes);
              rem$1 = add(rem$1, neg(approxRem));
            }          return res;
          }
        }
        
      }
      
    }}

  function div_mod(self, other) {
    var quotient = div$1(self, other);
    var y = mul(quotient, other);
    return /* tuple */[
            quotient,
            add(self, neg(y))
          ];
  }

  function to_hex(x) {
    var aux = function (v) {
      return (v >>> 0).toString(16);
    };
    var match = x[/* hi */0];
    var match$1 = x[/* lo */1];
    var exit = 0;
    if (match !== 0 || match$1 !== 0) {
      exit = 1;
    } else {
      return "0";
    }
    if (exit === 1) {
      if (match$1 !== 0) {
        if (match !== 0) {
          var lo = aux(x[/* lo */1]);
          var pad = 8 - lo.length | 0;
          if (pad <= 0) {
            return aux(x[/* hi */0]) + lo;
          } else {
            return aux(x[/* hi */0]) + (repeat(pad, "0") + lo);
          }
        } else {
          return aux(x[/* lo */1]);
        }
      } else {
        return aux(x[/* hi */0]) + "00000000";
      }
    }
    
  }

  function discard_sign(x) {
    return /* record */[
            /* hi */2147483647 & x[/* hi */0],
            /* lo */x[/* lo */1]
          ];
  }
  /* two_ptr_32_dbl Not a pure module */

  function parse_digit(c) {
    if (c >= 65) {
      if (c >= 97) {
        if (c >= 123) {
          return -1;
        } else {
          return c - 87 | 0;
        }
      } else if (c >= 91) {
        return -1;
      } else {
        return c - 55 | 0;
      }
    } else if (c > 57 || c < 48) {
      return -1;
    } else {
      return c - /* "0" */48 | 0;
    }
  }

  function int_of_string_base(param) {
    switch (param) {
      case 0 : 
          return 8;
      case 1 : 
          return 16;
      case 2 : 
          return 10;
      case 3 : 
          return 2;
      
    }
  }

  function parse_sign_and_base(s) {
    var sign = 1;
    var base = /* Dec */2;
    var i = 0;
    if (s[i] === "-") {
      sign = -1;
      i = i + 1 | 0;
    }
    var match = s.charCodeAt(i);
    var match$1 = s.charCodeAt(i + 1 | 0);
    if (match === 48) {
      if (match$1 >= 89) {
        if (match$1 !== 98) {
          if (match$1 !== 111) {
            if (match$1 === 120) {
              base = /* Hex */1;
              i = i + 2 | 0;
            }
            
          } else {
            base = /* Oct */0;
            i = i + 2 | 0;
          }
        } else {
          base = /* Bin */3;
          i = i + 2 | 0;
        }
      } else if (match$1 !== 66) {
        if (match$1 !== 79) {
          if (match$1 >= 88) {
            base = /* Hex */1;
            i = i + 2 | 0;
          }
          
        } else {
          base = /* Oct */0;
          i = i + 2 | 0;
        }
      } else {
        base = /* Bin */3;
        i = i + 2 | 0;
      }
    }
    return /* tuple */[
            i,
            sign,
            base
          ];
  }

  function caml_int_of_string(s) {
    var match = parse_sign_and_base(s);
    var i = match[0];
    var base = int_of_string_base(match[2]);
    var threshold = 4294967295;
    var len = s.length;
    var c = i < len ? s.charCodeAt(i) : /* "\000" */0;
    var d = parse_digit(c);
    if (d < 0 || d >= base) {
      throw [
            failure,
            "int_of_string"
          ];
    }
    var aux = function (_acc, _k) {
      while(true) {
        var k = _k;
        var acc = _acc;
        if (k === len) {
          return acc;
        } else {
          var a = s.charCodeAt(k);
          if (a === /* "_" */95) {
            _k = k + 1 | 0;
            continue ;
          } else {
            var v = parse_digit(a);
            if (v < 0 || v >= base) {
              throw [
                    failure,
                    "int_of_string"
                  ];
            } else {
              var acc$1 = base * acc + v;
              if (acc$1 > threshold) {
                throw [
                      failure,
                      "int_of_string"
                    ];
              } else {
                _k = k + 1 | 0;
                _acc = acc$1;
                continue ;
              }
            }
          }
        }
      }  };
    var res = match[1] * aux(d, i + 1 | 0);
    var or_res = res | 0;
    if (base === 10 && res !== or_res) {
      throw [
            failure,
            "int_of_string"
          ];
    }
    return or_res;
  }

  function int_of_base(param) {
    switch (param) {
      case 0 : 
          return 8;
      case 1 : 
          return 16;
      case 2 : 
          return 10;
      
    }
  }

  function lowercase(c) {
    if (c >= /* "A" */65 && c <= /* "Z" */90 || c >= /* "\192" */192 && c <= /* "\214" */214 || c >= /* "\216" */216 && c <= /* "\222" */222) {
      return c + 32 | 0;
    } else {
      return c;
    }
  }

  function parse_format(fmt) {
    var len = fmt.length;
    if (len > 31) {
      throw [
            invalid_argument,
            "format_int: format too long"
          ];
    }
    var f = /* record */[
      /* justify */"+",
      /* signstyle */"-",
      /* filter */" ",
      /* alternate */false,
      /* base : Dec */2,
      /* signedconv */false,
      /* width */0,
      /* uppercase */false,
      /* sign */1,
      /* prec */-1,
      /* conv */"f"
    ];
    var _i = 0;
    while(true) {
      var i = _i;
      if (i >= len) {
        return f;
      } else {
        var c = fmt.charCodeAt(i);
        var exit = 0;
        if (c >= 69) {
          if (c >= 88) {
            if (c >= 121) {
              exit = 1;
            } else {
              switch (c - 88 | 0) {
                case 0 : 
                    f[/* base */4] = /* Hex */1;
                    f[/* uppercase */7] = true;
                    _i = i + 1 | 0;
                    continue ;
                case 13 : 
                case 14 : 
                case 15 : 
                    exit = 5;
                    break;
                case 12 : 
                case 17 : 
                    exit = 4;
                    break;
                case 23 : 
                    f[/* base */4] = /* Oct */0;
                    _i = i + 1 | 0;
                    continue ;
                case 29 : 
                    f[/* base */4] = /* Dec */2;
                    _i = i + 1 | 0;
                    continue ;
                case 1 : 
                case 2 : 
                case 3 : 
                case 4 : 
                case 5 : 
                case 6 : 
                case 7 : 
                case 8 : 
                case 9 : 
                case 10 : 
                case 11 : 
                case 16 : 
                case 18 : 
                case 19 : 
                case 20 : 
                case 21 : 
                case 22 : 
                case 24 : 
                case 25 : 
                case 26 : 
                case 27 : 
                case 28 : 
                case 30 : 
                case 31 : 
                    exit = 1;
                    break;
                case 32 : 
                    f[/* base */4] = /* Hex */1;
                    _i = i + 1 | 0;
                    continue ;
                
              }
            }
          } else if (c >= 72) {
            exit = 1;
          } else {
            f[/* signedconv */5] = true;
            f[/* uppercase */7] = true;
            f[/* conv */10] = String.fromCharCode(lowercase(c));
            _i = i + 1 | 0;
            continue ;
          }
        } else {
          var switcher = c - 32 | 0;
          if (switcher > 25 || switcher < 0) {
            exit = 1;
          } else {
            switch (switcher) {
              case 3 : 
                  f[/* alternate */3] = true;
                  _i = i + 1 | 0;
                  continue ;
              case 0 : 
              case 11 : 
                  exit = 2;
                  break;
              case 13 : 
                  f[/* justify */0] = "-";
                  _i = i + 1 | 0;
                  continue ;
              case 14 : 
                  f[/* prec */9] = 0;
                  var j = i + 1 | 0;
                  while((function(j){
                      return function () {
                        var w = fmt.charCodeAt(j) - /* "0" */48 | 0;
                        return w >= 0 && w <= 9;
                      }
                      }(j))()) {
                    f[/* prec */9] = (imul(f[/* prec */9], 10) + fmt.charCodeAt(j) | 0) - /* "0" */48 | 0;
                    j = j + 1 | 0;
                  }                _i = j;
                  continue ;
              case 1 : 
              case 2 : 
              case 4 : 
              case 5 : 
              case 6 : 
              case 7 : 
              case 8 : 
              case 9 : 
              case 10 : 
              case 12 : 
              case 15 : 
                  exit = 1;
                  break;
              case 16 : 
                  f[/* filter */2] = "0";
                  _i = i + 1 | 0;
                  continue ;
              case 17 : 
              case 18 : 
              case 19 : 
              case 20 : 
              case 21 : 
              case 22 : 
              case 23 : 
              case 24 : 
              case 25 : 
                  exit = 3;
                  break;
              
            }
          }
        }
        switch (exit) {
          case 1 : 
              _i = i + 1 | 0;
              continue ;
          case 2 : 
              f[/* signstyle */1] = String.fromCharCode(c);
              _i = i + 1 | 0;
              continue ;
          case 3 : 
              f[/* width */6] = 0;
              var j$1 = i;
              while((function(j$1){
                  return function () {
                    var w = fmt.charCodeAt(j$1) - /* "0" */48 | 0;
                    return w >= 0 && w <= 9;
                  }
                  }(j$1))()) {
                f[/* width */6] = (imul(f[/* width */6], 10) + fmt.charCodeAt(j$1) | 0) - /* "0" */48 | 0;
                j$1 = j$1 + 1 | 0;
              }            _i = j$1;
              continue ;
          case 4 : 
              f[/* signedconv */5] = true;
              f[/* base */4] = /* Dec */2;
              _i = i + 1 | 0;
              continue ;
          case 5 : 
              f[/* signedconv */5] = true;
              f[/* conv */10] = String.fromCharCode(c);
              _i = i + 1 | 0;
              continue ;
          
        }
      }
    }}

  function finish_formatting(param, rawbuffer) {
    var justify = param[/* justify */0];
    var signstyle = param[/* signstyle */1];
    var filter = param[/* filter */2];
    var alternate = param[/* alternate */3];
    var base = param[/* base */4];
    var signedconv = param[/* signedconv */5];
    var width = param[/* width */6];
    var uppercase = param[/* uppercase */7];
    var sign = param[/* sign */8];
    var len = rawbuffer.length;
    if (signedconv && (sign < 0 || signstyle !== "-")) {
      len = len + 1 | 0;
    }
    if (alternate) {
      if (base === /* Oct */0) {
        len = len + 1 | 0;
      } else if (base === /* Hex */1) {
        len = len + 2 | 0;
      }
      
    }
    var buffer = "";
    if (justify === "+" && filter === " ") {
      for(var i = len ,i_finish = width - 1 | 0; i <= i_finish; ++i){
        buffer = buffer + filter;
      }
    }
    if (signedconv) {
      if (sign < 0) {
        buffer = buffer + "-";
      } else if (signstyle !== "-") {
        buffer = buffer + signstyle;
      }
      
    }
    if (alternate && base === /* Oct */0) {
      buffer = buffer + "0";
    }
    if (alternate && base === /* Hex */1) {
      buffer = buffer + "0x";
    }
    if (justify === "+" && filter === "0") {
      for(var i$1 = len ,i_finish$1 = width - 1 | 0; i$1 <= i_finish$1; ++i$1){
        buffer = buffer + filter;
      }
    }
    buffer = uppercase ? buffer + rawbuffer.toUpperCase() : buffer + rawbuffer;
    if (justify === "-") {
      for(var i$2 = len ,i_finish$2 = width - 1 | 0; i$2 <= i_finish$2; ++i$2){
        buffer = buffer + " ";
      }
    }
    return buffer;
  }

  function caml_format_int(fmt, i) {
    if (fmt === "%d") {
      return String(i);
    } else {
      var f = parse_format(fmt);
      var f$1 = f;
      var i$1 = i;
      var i$2 = i$1 < 0 ? (
          f$1[/* signedconv */5] ? (f$1[/* sign */8] = -1, -i$1) : (i$1 >>> 0)
        ) : i$1;
      var s = i$2.toString(int_of_base(f$1[/* base */4]));
      if (f$1[/* prec */9] >= 0) {
        f$1[/* filter */2] = " ";
        var n = f$1[/* prec */9] - s.length | 0;
        if (n > 0) {
          s = repeat(n, "0") + s;
        }
        
      }
      return finish_formatting(f$1, s);
    }
  }

  function caml_int64_format(fmt, x) {
    var f = parse_format(fmt);
    var x$1 = f[/* signedconv */5] && lt(x, /* int64 */[
          /* hi */0,
          /* lo */0
        ]) ? (f[/* sign */8] = -1, neg(x)) : x;
    var s = "";
    var match = f[/* base */4];
    switch (match) {
      case 0 : 
          var wbase = /* int64 */[
            /* hi */0,
            /* lo */8
          ];
          var cvtbl = "01234567";
          if (lt(x$1, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var y = discard_sign(x$1);
            var match$1 = div_mod(y, wbase);
            var quotient = add(/* int64 */[
                  /* hi */268435456,
                  /* lo */0
                ], match$1[0]);
            var modulus = match$1[1];
            s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
            while(neq(quotient, /* int64 */[
                    /* hi */0,
                    /* lo */0
                  ])) {
              var match$2 = div_mod(quotient, wbase);
              quotient = match$2[0];
              modulus = match$2[1];
              s = String.fromCharCode(cvtbl.charCodeAt(modulus[1] | 0)) + s;
            }        } else {
            var match$3 = div_mod(x$1, wbase);
            var quotient$1 = match$3[0];
            var modulus$1 = match$3[1];
            s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
            while(neq(quotient$1, /* int64 */[
                    /* hi */0,
                    /* lo */0
                  ])) {
              var match$4 = div_mod(quotient$1, wbase);
              quotient$1 = match$4[0];
              modulus$1 = match$4[1];
              s = String.fromCharCode(cvtbl.charCodeAt(modulus$1[1] | 0)) + s;
            }        }
          break;
      case 1 : 
          s = to_hex(x$1) + s;
          break;
      case 2 : 
          var wbase$1 = /* int64 */[
            /* hi */0,
            /* lo */10
          ];
          var cvtbl$1 = "0123456789";
          if (lt(x$1, /* int64 */[
                  /* hi */0,
                  /* lo */0
                ])) {
            var y$1 = discard_sign(x$1);
            var match$5 = div_mod(y$1, wbase$1);
            var match$6 = div_mod(add(/* int64 */[
                      /* hi */0,
                      /* lo */8
                    ], match$5[1]), wbase$1);
            var quotient$2 = add(add(/* int64 */[
                      /* hi */214748364,
                      /* lo */3435973836
                    ], match$5[0]), match$6[0]);
            var modulus$2 = match$6[1];
            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
            while(neq(quotient$2, /* int64 */[
                    /* hi */0,
                    /* lo */0
                  ])) {
              var match$7 = div_mod(quotient$2, wbase$1);
              quotient$2 = match$7[0];
              modulus$2 = match$7[1];
              s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$2[1] | 0)) + s;
            }        } else {
            var match$8 = div_mod(x$1, wbase$1);
            var quotient$3 = match$8[0];
            var modulus$3 = match$8[1];
            s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
            while(neq(quotient$3, /* int64 */[
                    /* hi */0,
                    /* lo */0
                  ])) {
              var match$9 = div_mod(quotient$3, wbase$1);
              quotient$3 = match$9[0];
              modulus$3 = match$9[1];
              s = String.fromCharCode(cvtbl$1.charCodeAt(modulus$3[1] | 0)) + s;
            }        }
          break;
      
    }
    if (f[/* prec */9] >= 0) {
      f[/* filter */2] = " ";
      var n = f[/* prec */9] - s.length | 0;
      if (n > 0) {
        s = repeat(n, "0") + s;
      }
      
    }
    return finish_formatting(f, s);
  }

  function caml_format_float(fmt, x) {
    var f = parse_format(fmt);
    var prec = f[/* prec */9] < 0 ? 6 : f[/* prec */9];
    var x$1 = x < 0 ? (f[/* sign */8] = -1, -x) : x;
    var s = "";
    if (isNaN(x$1)) {
      s = "nan";
      f[/* filter */2] = " ";
    } else if (isFinite(x$1)) {
      var match = f[/* conv */10];
      switch (match) {
        case "e" : 
            s = x$1.toExponential(prec);
            var i = s.length;
            if (s[i - 3 | 0] === "e") {
              s = s.slice(0, i - 1 | 0) + ("0" + s.slice(i - 1 | 0));
            }
            break;
        case "f" : 
            s = x$1.toFixed(prec);
            break;
        case "g" : 
            var prec$1 = prec !== 0 ? prec : 1;
            s = x$1.toExponential(prec$1 - 1 | 0);
            var j = s.indexOf("e");
            var exp = Number(s.slice(j + 1 | 0)) | 0;
            if (exp < -4 || x$1 >= 1e21 || x$1.toFixed().length > prec$1) {
              var i$1 = j - 1 | 0;
              while(s[i$1] === "0") {
                i$1 = i$1 - 1 | 0;
              }            if (s[i$1] === ".") {
                i$1 = i$1 - 1 | 0;
              }
              s = s.slice(0, i$1 + 1 | 0) + s.slice(j);
              var i$2 = s.length;
              if (s[i$2 - 3 | 0] === "e") {
                s = s.slice(0, i$2 - 1 | 0) + ("0" + s.slice(i$2 - 1 | 0));
              }
              
            } else {
              var p = prec$1;
              if (exp < 0) {
                p = p - (exp + 1 | 0) | 0;
                s = x$1.toFixed(p);
              } else {
                while((function () {
                        s = x$1.toFixed(p);
                        return s.length > (prec$1 + 1 | 0);
                      })()) {
                  p = p - 1 | 0;
                }            }
              if (p !== 0) {
                var k = s.length - 1 | 0;
                while(s[k] === "0") {
                  k = k - 1 | 0;
                }              if (s[k] === ".") {
                  k = k - 1 | 0;
                }
                s = s.slice(0, k + 1 | 0);
              }
              
            }
            break;
        default:
          
      }
    } else {
      s = "inf";
      f[/* filter */2] = " ";
    }
    return finish_formatting(f, s);
  }

  var caml_nativeint_format = caml_format_int;

  var caml_int32_format = caml_format_int;
  /* float_of_string Not a pure module */

  function caml_create_string(len) {
    if (len < 0) {
      throw [
            invalid_argument,
            "String.create"
          ];
    } else {
      var result = new Array(len);
      for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
        result[i] = /* "\000" */0;
      }
      return result;
    }
  }

  function caml_fill_string(s, i, l, c) {
    if (l > 0) {
      for(var k = i ,k_finish = (l + i | 0) - 1 | 0; k <= k_finish; ++k){
        s[k] = c;
      }
      return /* () */0;
    } else {
      return 0;
    }
  }

  function caml_blit_string(s1, i1, s2, i2, len) {
    if (len > 0) {
      var off1 = s1.length - i1 | 0;
      if (len <= off1) {
        for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
          s2[i2 + i | 0] = s1.charCodeAt(i1 + i | 0);
        }
        return /* () */0;
      } else {
        for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
          s2[i2 + i$1 | 0] = s1.charCodeAt(i1 + i$1 | 0);
        }
        for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
          s2[i2 + i$2 | 0] = /* "\000" */0;
        }
        return /* () */0;
      }
    } else {
      return 0;
    }
  }

  function caml_blit_bytes(s1, i1, s2, i2, len) {
    if (len > 0) {
      if (s1 === s2) {
        var s1$1 = s1;
        var i1$1 = i1;
        var i2$1 = i2;
        var len$1 = len;
        if (i1$1 < i2$1) {
          var range_a = (s1$1.length - i2$1 | 0) - 1 | 0;
          var range_b = len$1 - 1 | 0;
          var range = range_a > range_b ? range_b : range_a;
          for(var j = range; j >= 0; --j){
            s1$1[i2$1 + j | 0] = s1$1[i1$1 + j | 0];
          }
          return /* () */0;
        } else if (i1$1 > i2$1) {
          var range_a$1 = (s1$1.length - i1$1 | 0) - 1 | 0;
          var range_b$1 = len$1 - 1 | 0;
          var range$1 = range_a$1 > range_b$1 ? range_b$1 : range_a$1;
          for(var k = 0; k <= range$1; ++k){
            s1$1[i2$1 + k | 0] = s1$1[i1$1 + k | 0];
          }
          return /* () */0;
        } else {
          return 0;
        }
      } else {
        var off1 = s1.length - i1 | 0;
        if (len <= off1) {
          for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
            s2[i2 + i | 0] = s1[i1 + i | 0];
          }
          return /* () */0;
        } else {
          for(var i$1 = 0 ,i_finish$1 = off1 - 1 | 0; i$1 <= i_finish$1; ++i$1){
            s2[i2 + i$1 | 0] = s1[i1 + i$1 | 0];
          }
          for(var i$2 = off1 ,i_finish$2 = len - 1 | 0; i$2 <= i_finish$2; ++i$2){
            s2[i2 + i$2 | 0] = /* "\000" */0;
          }
          return /* () */0;
        }
      }
    } else {
      return 0;
    }
  }

  function bytes_of_string(s) {
    var len = s.length;
    var res = new Array(len);
    for(var i = 0 ,i_finish = len - 1 | 0; i <= i_finish; ++i){
      res[i] = s.charCodeAt(i);
    }
    return res;
  }

  function bytes_to_string(a) {
    var bytes = a;
    var i = 0;
    var len = a.length;
    var s = "";
    var s_len = len;
    if (i === 0 && len <= 4096 && len === bytes.length) {
      return String.fromCharCode.apply(null, bytes);
    } else {
      var offset = 0;
      while(s_len > 0) {
        var next = s_len < 1024 ? s_len : 1024;
        var tmp_bytes = new Array(next);
        caml_blit_bytes(bytes, offset, tmp_bytes, 0, next);
        s = s + String.fromCharCode.apply(null, tmp_bytes);
        s_len = s_len - next | 0;
        offset = offset + next | 0;
      }    return s;
    }
  }

  function get(s, i) {
    if (i < 0 || i >= s.length) {
      throw [
            invalid_argument,
            "index out of bounds"
          ];
    } else {
      return s.charCodeAt(i);
    }
  }
  /* No side effect */

  var id = /* record */[/* contents */0];

  function get_id() {
    id[0] += 1;
    return id[0];
  }

  function create(str) {
    var v_001 = get_id(/* () */0);
    var v = /* tuple */[
      str,
      v_001
    ];
    v.tag = 248;
    return v;
  }

  function isCamlExceptionOrOpenVariant(e) {
    if (e === undefined) {
      return false;
    } else if (e.tag === 248) {
      return true;
    } else {
      var slot = e[0];
      if (slot !== undefined) {
        return slot.tag === 248;
      } else {
        return false;
      }
    }
  }
  /* No side effect */

  /* No side effect */

  function erase_rel(param) {
    if (typeof param === "number") {
      return /* End_of_fmtty */0;
    } else {
      switch (param.tag | 0) {
        case 0 : 
            return /* Char_ty */__(0, [erase_rel(param[0])]);
        case 1 : 
            return /* String_ty */__(1, [erase_rel(param[0])]);
        case 2 : 
            return /* Int_ty */__(2, [erase_rel(param[0])]);
        case 3 : 
            return /* Int32_ty */__(3, [erase_rel(param[0])]);
        case 4 : 
            return /* Nativeint_ty */__(4, [erase_rel(param[0])]);
        case 5 : 
            return /* Int64_ty */__(5, [erase_rel(param[0])]);
        case 6 : 
            return /* Float_ty */__(6, [erase_rel(param[0])]);
        case 7 : 
            return /* Bool_ty */__(7, [erase_rel(param[0])]);
        case 8 : 
            return /* Format_arg_ty */__(8, [
                      param[0],
                      erase_rel(param[1])
                    ]);
        case 9 : 
            var ty1 = param[0];
            return /* Format_subst_ty */__(9, [
                      ty1,
                      ty1,
                      erase_rel(param[2])
                    ]);
        case 10 : 
            return /* Alpha_ty */__(10, [erase_rel(param[0])]);
        case 11 : 
            return /* Theta_ty */__(11, [erase_rel(param[0])]);
        case 12 : 
            return /* Any_ty */__(12, [erase_rel(param[0])]);
        case 13 : 
            return /* Reader_ty */__(13, [erase_rel(param[0])]);
        case 14 : 
            return /* Ignored_reader_ty */__(14, [erase_rel(param[0])]);
        
      }
    }
  }

  function concat_fmtty(fmtty1, fmtty2) {
    if (typeof fmtty1 === "number") {
      return fmtty2;
    } else {
      switch (fmtty1.tag | 0) {
        case 0 : 
            return /* Char_ty */__(0, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 1 : 
            return /* String_ty */__(1, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 2 : 
            return /* Int_ty */__(2, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 3 : 
            return /* Int32_ty */__(3, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 4 : 
            return /* Nativeint_ty */__(4, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 5 : 
            return /* Int64_ty */__(5, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 6 : 
            return /* Float_ty */__(6, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 7 : 
            return /* Bool_ty */__(7, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 8 : 
            return /* Format_arg_ty */__(8, [
                      fmtty1[0],
                      concat_fmtty(fmtty1[1], fmtty2)
                    ]);
        case 9 : 
            return /* Format_subst_ty */__(9, [
                      fmtty1[0],
                      fmtty1[1],
                      concat_fmtty(fmtty1[2], fmtty2)
                    ]);
        case 10 : 
            return /* Alpha_ty */__(10, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 11 : 
            return /* Theta_ty */__(11, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 12 : 
            return /* Any_ty */__(12, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 13 : 
            return /* Reader_ty */__(13, [concat_fmtty(fmtty1[0], fmtty2)]);
        case 14 : 
            return /* Ignored_reader_ty */__(14, [concat_fmtty(fmtty1[0], fmtty2)]);
        
      }
    }
  }

  function concat_fmt(fmt1, fmt2) {
    if (typeof fmt1 === "number") {
      return fmt2;
    } else {
      switch (fmt1.tag | 0) {
        case 0 : 
            return /* Char */__(0, [concat_fmt(fmt1[0], fmt2)]);
        case 1 : 
            return /* Caml_char */__(1, [concat_fmt(fmt1[0], fmt2)]);
        case 2 : 
            return /* String */__(2, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 3 : 
            return /* Caml_string */__(3, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 4 : 
            return /* Int */__(4, [
                      fmt1[0],
                      fmt1[1],
                      fmt1[2],
                      concat_fmt(fmt1[3], fmt2)
                    ]);
        case 5 : 
            return /* Int32 */__(5, [
                      fmt1[0],
                      fmt1[1],
                      fmt1[2],
                      concat_fmt(fmt1[3], fmt2)
                    ]);
        case 6 : 
            return /* Nativeint */__(6, [
                      fmt1[0],
                      fmt1[1],
                      fmt1[2],
                      concat_fmt(fmt1[3], fmt2)
                    ]);
        case 7 : 
            return /* Int64 */__(7, [
                      fmt1[0],
                      fmt1[1],
                      fmt1[2],
                      concat_fmt(fmt1[3], fmt2)
                    ]);
        case 8 : 
            return /* Float */__(8, [
                      fmt1[0],
                      fmt1[1],
                      fmt1[2],
                      concat_fmt(fmt1[3], fmt2)
                    ]);
        case 9 : 
            return /* Bool */__(9, [concat_fmt(fmt1[0], fmt2)]);
        case 10 : 
            return /* Flush */__(10, [concat_fmt(fmt1[0], fmt2)]);
        case 11 : 
            return /* String_literal */__(11, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 12 : 
            return /* Char_literal */__(12, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 13 : 
            return /* Format_arg */__(13, [
                      fmt1[0],
                      fmt1[1],
                      concat_fmt(fmt1[2], fmt2)
                    ]);
        case 14 : 
            return /* Format_subst */__(14, [
                      fmt1[0],
                      fmt1[1],
                      concat_fmt(fmt1[2], fmt2)
                    ]);
        case 15 : 
            return /* Alpha */__(15, [concat_fmt(fmt1[0], fmt2)]);
        case 16 : 
            return /* Theta */__(16, [concat_fmt(fmt1[0], fmt2)]);
        case 17 : 
            return /* Formatting_lit */__(17, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 18 : 
            return /* Formatting_gen */__(18, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 19 : 
            return /* Reader */__(19, [concat_fmt(fmt1[0], fmt2)]);
        case 20 : 
            return /* Scan_char_set */__(20, [
                      fmt1[0],
                      fmt1[1],
                      concat_fmt(fmt1[2], fmt2)
                    ]);
        case 21 : 
            return /* Scan_get_counter */__(21, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 22 : 
            return /* Scan_next_char */__(22, [concat_fmt(fmt1[0], fmt2)]);
        case 23 : 
            return /* Ignored_param */__(23, [
                      fmt1[0],
                      concat_fmt(fmt1[1], fmt2)
                    ]);
        case 24 : 
            return /* Custom */__(24, [
                      fmt1[0],
                      fmt1[1],
                      concat_fmt(fmt1[2], fmt2)
                    ]);
        
      }
    }
  }
  /* No side effect */

  var Exit = create("Pervasives.Exit");

  function abs(x) {
    if (x >= 0) {
      return x;
    } else {
      return -x | 0;
    }
  }

  var min_int$1 = -2147483648;

  function $at(l1, l2) {
    if (l1) {
      return /* :: */[
              l1[0],
              $at(l1[1], l2)
            ];
    } else {
      return l2;
    }
  }

  var max_int$1 = 2147483647;
  /* No side effect */

  function length(l) {
    var _len = 0;
    var _param = l;
    while(true) {
      var param = _param;
      var len = _len;
      if (param) {
        _param = param[1];
        _len = len + 1 | 0;
        continue ;
      } else {
        return len;
      }
    }}

  function hd(param) {
    if (param) {
      return param[0];
    } else {
      throw [
            failure,
            "hd"
          ];
    }
  }

  function nth(l, n) {
    if (n < 0) {
      throw [
            invalid_argument,
            "List.nth"
          ];
    } else {
      var _l = l;
      var _n = n;
      while(true) {
        var n$1 = _n;
        var l$1 = _l;
        if (l$1) {
          if (n$1 === 0) {
            return l$1[0];
          } else {
            _n = n$1 - 1 | 0;
            _l = l$1[1];
            continue ;
          }
        } else {
          throw [
                failure,
                "nth"
              ];
        }
      }  }
  }

  function rev_append(_l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      if (l1) {
        _l2 = /* :: */[
          l1[0],
          l2
        ];
        _l1 = l1[1];
        continue ;
      } else {
        return l2;
      }
    }}

  function rev(l) {
    return rev_append(l, /* [] */0);
  }

  function flatten(param) {
    if (param) {
      return $at(param[0], flatten(param[1]));
    } else {
      return /* [] */0;
    }
  }

  function map(f, param) {
    if (param) {
      var r = _1(f, param[0]);
      return /* :: */[
              r,
              map(f, param[1])
            ];
    } else {
      return /* [] */0;
    }
  }

  function iter(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        _1(f, param[0]);
        _param = param[1];
        continue ;
      } else {
        return /* () */0;
      }
    }}

  function fold_left(f, _accu, _l) {
    while(true) {
      var l = _l;
      var accu = _accu;
      if (l) {
        _l = l[1];
        _accu = _2(f, accu, l[0]);
        continue ;
      } else {
        return accu;
      }
    }}

  function fold_right(f, l, accu) {
    if (l) {
      return _2(f, l[0], fold_right(f, l[1], accu));
    } else {
      return accu;
    }
  }

  function fold_left2(f, _accu, _l1, _l2) {
    while(true) {
      var l2 = _l2;
      var l1 = _l1;
      var accu = _accu;
      if (l1) {
        if (l2) {
          _l2 = l2[1];
          _l1 = l1[1];
          _accu = _3(f, accu, l1[0], l2[0]);
          continue ;
        } else {
          throw [
                invalid_argument,
                "List.fold_left2"
              ];
        }
      } else if (l2) {
        throw [
              invalid_argument,
              "List.fold_left2"
            ];
      } else {
        return accu;
      }
    }}

  function exists(p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (_1(p, param[0])) {
          return true;
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        return false;
      }
    }}

  function find(p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var x = param[0];
        if (_1(p, x)) {
          return x;
        } else {
          _param = param[1];
          continue ;
        }
      } else {
        throw not_found;
      }
    }}

  function find_all(p) {
    return (function (param) {
        var _accu = /* [] */0;
        var _param = param;
        while(true) {
          var param$1 = _param;
          var accu = _accu;
          if (param$1) {
            var l = param$1[1];
            var x = param$1[0];
            if (_1(p, x)) {
              _param = l;
              _accu = /* :: */[
                x,
                accu
              ];
              continue ;
            } else {
              _param = l;
              continue ;
            }
          } else {
            return rev_append(accu, /* [] */0);
          }
        }    });
  }

  var append = $at;

  var filter = find_all;
  /* No side effect */

  var $$Error = create("Js_exn.Error");

  function internalToOCamlException(e) {
    if (isCamlExceptionOrOpenVariant(e)) {
      return e;
    } else {
      return [
              $$Error,
              e
            ];
    }
  }
  /* No side effect */

  var undefinedHeader = /* array */[];

  function some(x) {
    if (x === undefined) {
      var block = /* tuple */[
        undefinedHeader,
        0
      ];
      block.tag = 256;
      return block;
    } else if (x !== null && x[0] === undefinedHeader) {
      var nid = x[1] + 1 | 0;
      var block$1 = /* tuple */[
        undefinedHeader,
        nid
      ];
      block$1.tag = 256;
      return block$1;
    } else {
      return x;
    }
  }

  function valFromOption(x) {
    if (x !== null && x[0] === undefinedHeader) {
      var depth = x[1];
      if (depth === 0) {
        return undefined;
      } else {
        return /* tuple */[
                undefinedHeader,
                depth - 1 | 0
              ];
      }
    } else {
      return x;
    }
  }
  /* No side effect */

  var ParseError = create("Json.ParseError");

  function parseOrRaise(s) {
    try {
      return JSON.parse(s);
    }
    catch (raw_exn){
      var exn = internalToOCamlException(raw_exn);
      if (exn[0] === $$Error) {
        var match = exn[1].message;
        var message = match !== undefined ? match : "Unknown error";
        throw [
              ParseError,
              message
            ];
      } else {
        throw exn;
      }
    }
  }
  /* No side effect */

  function copy(a) {
    var l = a.length;
    if (l === 0) {
      return /* array */[];
    } else {
      return caml_array_sub(a, 0, l);
    }
  }

  function append$1(a1, a2) {
    var l1 = a1.length;
    if (l1 === 0) {
      return copy(a2);
    } else if (a2.length === 0) {
      return caml_array_sub(a1, 0, l1);
    } else {
      return a1.concat(a2);
    }
  }

  function iter$1(f, a) {
    for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
      _1(f, a[i]);
    }
    return /* () */0;
  }

  function map$1(f, a) {
    var l = a.length;
    if (l === 0) {
      return /* array */[];
    } else {
      var r = caml_make_vect(l, _1(f, a[0]));
      for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
        r[i] = _1(f, a[i]);
      }
      return r;
    }
  }

  function mapi$2(f, a) {
    var l = a.length;
    if (l === 0) {
      return /* array */[];
    } else {
      var r = caml_make_vect(l, _2(f, 0, a[0]));
      for(var i = 1 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
        r[i] = _2(f, i, a[i]);
      }
      return r;
    }
  }

  function to_list(a) {
    var _i = a.length - 1 | 0;
    var _res = /* [] */0;
    while(true) {
      var res = _res;
      var i = _i;
      if (i < 0) {
        return res;
      } else {
        _res = /* :: */[
          a[i],
          res
        ];
        _i = i - 1 | 0;
        continue ;
      }
    }}

  function list_length(_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        _param = param[1];
        _accu = accu + 1 | 0;
        continue ;
      } else {
        return accu;
      }
    }}

  function of_list(l) {
    if (l) {
      var a = caml_make_vect(list_length(0, l), l[0]);
      var _i = 1;
      var _param = l[1];
      while(true) {
        var param = _param;
        var i = _i;
        if (param) {
          a[i] = param[0];
          _param = param[1];
          _i = i + 1 | 0;
          continue ;
        } else {
          return a;
        }
      }  } else {
      return /* array */[];
    }
  }

  function fold_left$1(f, x, a) {
    var r = x;
    for(var i = 0 ,i_finish = a.length - 1 | 0; i <= i_finish; ++i){
      r = _2(f, r, a[i]);
    }
    return r;
  }

  function fold_right$1(f, a, x) {
    var r = x;
    for(var i = a.length - 1 | 0; i >= 0; --i){
      r = _2(f, a[i], r);
    }
    return r;
  }

  var Bottom = create("Array.Bottom");

  function sort$1(cmp, a) {
    var maxson = function (l, i) {
      var i31 = ((i + i | 0) + i | 0) + 1 | 0;
      var x = i31;
      if ((i31 + 2 | 0) < l) {
        if (_2(cmp, caml_array_get(a, i31), caml_array_get(a, i31 + 1 | 0)) < 0) {
          x = i31 + 1 | 0;
        }
        if (_2(cmp, caml_array_get(a, x), caml_array_get(a, i31 + 2 | 0)) < 0) {
          x = i31 + 2 | 0;
        }
        return x;
      } else if ((i31 + 1 | 0) < l && _2(cmp, caml_array_get(a, i31), caml_array_get(a, i31 + 1 | 0)) < 0) {
        return i31 + 1 | 0;
      } else if (i31 < l) {
        return i31;
      } else {
        throw [
              Bottom,
              i
            ];
      }
    };
    var trickle = function (l, i, e) {
      try {
        var l$1 = l;
        var _i = i;
        var e$1 = e;
        while(true) {
          var i$1 = _i;
          var j = maxson(l$1, i$1);
          if (_2(cmp, caml_array_get(a, j), e$1) > 0) {
            caml_array_set(a, i$1, caml_array_get(a, j));
            _i = j;
            continue ;
          } else {
            return caml_array_set(a, i$1, e$1);
          }
        }    }
      catch (raw_exn){
        var exn = internalToOCamlException(raw_exn);
        if (exn[0] === Bottom) {
          return caml_array_set(a, exn[1], e);
        } else {
          throw exn;
        }
      }
    };
    var bubble = function (l, i) {
      try {
        var l$1 = l;
        var _i = i;
        while(true) {
          var i$1 = _i;
          var j = maxson(l$1, i$1);
          caml_array_set(a, i$1, caml_array_get(a, j));
          _i = j;
          continue ;
        }    }
      catch (raw_exn){
        var exn = internalToOCamlException(raw_exn);
        if (exn[0] === Bottom) {
          return exn[1];
        } else {
          throw exn;
        }
      }
    };
    var trickleup = function (_i, e) {
      while(true) {
        var i = _i;
        var father = (i - 1 | 0) / 3 | 0;
        if (i === father) {
          throw [
                assert_failure,
                /* tuple */[
                  "array.ml",
                  173,
                  4
                ]
              ];
        }
        if (_2(cmp, caml_array_get(a, father), e) < 0) {
          caml_array_set(a, i, caml_array_get(a, father));
          if (father > 0) {
            _i = father;
            continue ;
          } else {
            return caml_array_set(a, 0, e);
          }
        } else {
          return caml_array_set(a, i, e);
        }
      }  };
    var l = a.length;
    for(var i = ((l + 1 | 0) / 3 | 0) - 1 | 0; i >= 0; --i){
      trickle(l, i, caml_array_get(a, i));
    }
    for(var i$1 = l - 1 | 0; i$1 >= 2; --i$1){
      var e = caml_array_get(a, i$1);
      caml_array_set(a, i$1, caml_array_get(a, 0));
      trickleup(bubble(i$1, 0), e);
    }
    if (l > 1) {
      var e$1 = caml_array_get(a, 1);
      caml_array_set(a, 1, caml_array_get(a, 0));
      return caml_array_set(a, 0, e$1);
    } else {
      return 0;
    }
  }
  /* No side effect */

  function escaped(c) {
    var exit = 0;
    if (c >= 40) {
      if (c !== 92) {
        exit = c >= 127 ? 1 : 2;
      } else {
        return "\\\\";
      }
    } else if (c >= 32) {
      if (c >= 39) {
        return "\\'";
      } else {
        exit = 2;
      }
    } else if (c >= 14) {
      exit = 1;
    } else {
      switch (c) {
        case 8 : 
            return "\\b";
        case 9 : 
            return "\\t";
        case 10 : 
            return "\\n";
        case 0 : 
        case 1 : 
        case 2 : 
        case 3 : 
        case 4 : 
        case 5 : 
        case 6 : 
        case 7 : 
        case 11 : 
        case 12 : 
            exit = 1;
            break;
        case 13 : 
            return "\\r";
        
      }
    }
    switch (exit) {
      case 1 : 
          var s = caml_create_string(4);
          s[0] = /* "\\" */92;
          s[1] = 48 + (c / 100 | 0) | 0;
          s[2] = 48 + (c / 10 | 0) % 10 | 0;
          s[3] = 48 + c % 10 | 0;
          return bytes_to_string(s);
      case 2 : 
          var s$1 = caml_create_string(1);
          s$1[0] = c;
          return bytes_to_string(s$1);
      
    }
  }
  /* No side effect */

  function make(n, c) {
    var s = caml_create_string(n);
    caml_fill_string(s, 0, n, c);
    return s;
  }

  function copy$1(s) {
    var len = s.length;
    var r = caml_create_string(len);
    caml_blit_bytes(s, 0, r, 0, len);
    return r;
  }

  function sub$2(s, ofs, len) {
    if (ofs < 0 || len < 0 || ofs > (s.length - len | 0)) {
      throw [
            invalid_argument,
            "String.sub / Bytes.sub"
          ];
    } else {
      var r = caml_create_string(len);
      caml_blit_bytes(s, ofs, r, 0, len);
      return r;
    }
  }

  function sub_string(b, ofs, len) {
    return bytes_to_string(sub$2(b, ofs, len));
  }

  function blit$1(s1, ofs1, s2, ofs2, len) {
    if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
      throw [
            invalid_argument,
            "Bytes.blit"
          ];
    } else {
      return caml_blit_bytes(s1, ofs1, s2, ofs2, len);
    }
  }

  function blit_string(s1, ofs1, s2, ofs2, len) {
    if (len < 0 || ofs1 < 0 || ofs1 > (s1.length - len | 0) || ofs2 < 0 || ofs2 > (s2.length - len | 0)) {
      throw [
            invalid_argument,
            "String.blit / Bytes.blit_string"
          ];
    } else {
      return caml_blit_string(s1, ofs1, s2, ofs2, len);
    }
  }

  function escaped$1(s) {
    var n = 0;
    for(var i = 0 ,i_finish = s.length - 1 | 0; i <= i_finish; ++i){
      var match = s[i];
      var tmp;
      if (match >= 32) {
        var switcher = match - 34 | 0;
        tmp = switcher > 58 || switcher < 0 ? (
            switcher >= 93 ? 4 : 1
          ) : (
            switcher > 57 || switcher < 1 ? 2 : 1
          );
      } else {
        tmp = match >= 11 ? (
            match !== 13 ? 4 : 2
          ) : (
            match >= 8 ? 2 : 4
          );
      }
      n = n + tmp | 0;
    }
    if (n === s.length) {
      return copy$1(s);
    } else {
      var s$prime = caml_create_string(n);
      n = 0;
      for(var i$1 = 0 ,i_finish$1 = s.length - 1 | 0; i$1 <= i_finish$1; ++i$1){
        var c = s[i$1];
        var exit = 0;
        if (c >= 35) {
          if (c !== 92) {
            if (c >= 127) {
              exit = 1;
            } else {
              s$prime[n] = c;
            }
          } else {
            exit = 2;
          }
        } else if (c >= 32) {
          if (c >= 34) {
            exit = 2;
          } else {
            s$prime[n] = c;
          }
        } else if (c >= 14) {
          exit = 1;
        } else {
          switch (c) {
            case 8 : 
                s$prime[n] = /* "\\" */92;
                n = n + 1 | 0;
                s$prime[n] = /* "b" */98;
                break;
            case 9 : 
                s$prime[n] = /* "\\" */92;
                n = n + 1 | 0;
                s$prime[n] = /* "t" */116;
                break;
            case 10 : 
                s$prime[n] = /* "\\" */92;
                n = n + 1 | 0;
                s$prime[n] = /* "n" */110;
                break;
            case 0 : 
            case 1 : 
            case 2 : 
            case 3 : 
            case 4 : 
            case 5 : 
            case 6 : 
            case 7 : 
            case 11 : 
            case 12 : 
                exit = 1;
                break;
            case 13 : 
                s$prime[n] = /* "\\" */92;
                n = n + 1 | 0;
                s$prime[n] = /* "r" */114;
                break;
            
          }
        }
        switch (exit) {
          case 1 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = 48 + (c / 100 | 0) | 0;
              n = n + 1 | 0;
              s$prime[n] = 48 + (c / 10 | 0) % 10 | 0;
              n = n + 1 | 0;
              s$prime[n] = 48 + c % 10 | 0;
              break;
          case 2 : 
              s$prime[n] = /* "\\" */92;
              n = n + 1 | 0;
              s$prime[n] = c;
              break;
          
        }
        n = n + 1 | 0;
      }
      return s$prime;
    }
  }
  /* No side effect */

  function concat$3(sep, l) {
    if (l) {
      var hd$$1 = l[0];
      var num = /* record */[/* contents */0];
      var len = /* record */[/* contents */0];
      iter((function (s) {
              num[0] = num[0] + 1 | 0;
              len[0] = len[0] + s.length | 0;
              return /* () */0;
            }), l);
      var r = caml_create_string(len[0] + imul(sep.length, num[0] - 1 | 0) | 0);
      caml_blit_string(hd$$1, 0, r, 0, hd$$1.length);
      var pos = /* record */[/* contents */hd$$1.length];
      iter((function (s) {
              caml_blit_string(sep, 0, r, pos[0], sep.length);
              pos[0] = pos[0] + sep.length | 0;
              caml_blit_string(s, 0, r, pos[0], s.length);
              pos[0] = pos[0] + s.length | 0;
              return /* () */0;
            }), l[1]);
      return bytes_to_string(r);
    } else {
      return "";
    }
  }

  function escaped$2(s) {
    var needs_escape = function (_i) {
      while(true) {
        var i = _i;
        if (i >= s.length) {
          return false;
        } else {
          var match = s.charCodeAt(i);
          if (match >= 32) {
            var switcher = match - 34 | 0;
            if (switcher > 58 || switcher < 0) {
              if (switcher >= 93) {
                return true;
              } else {
                _i = i + 1 | 0;
                continue ;
              }
            } else if (switcher > 57 || switcher < 1) {
              return true;
            } else {
              _i = i + 1 | 0;
              continue ;
            }
          } else {
            return true;
          }
        }
      }  };
    if (needs_escape(0)) {
      return bytes_to_string(escaped$1(bytes_of_string(s)));
    } else {
      return s;
    }
  }

  var blit$2 = blit_string;
  /* No side effect */

  function create$1(n) {
    var n$1 = n < 1 ? 1 : n;
    var s = caml_create_string(n$1);
    return /* record */[
            /* buffer */s,
            /* position */0,
            /* length */n$1,
            /* initial_buffer */s
          ];
  }

  function contents(b) {
    return sub_string(b[/* buffer */0], 0, b[/* position */1]);
  }

  function resize(b, more) {
    var len = b[/* length */2];
    var new_len = len;
    while((b[/* position */1] + more | 0) > new_len) {
      new_len = (new_len << 1);
    }  var new_buffer = caml_create_string(new_len);
    blit$1(b[/* buffer */0], 0, new_buffer, 0, b[/* position */1]);
    b[/* buffer */0] = new_buffer;
    b[/* length */2] = new_len;
    return /* () */0;
  }

  function add_char(b, c) {
    var pos = b[/* position */1];
    if (pos >= b[/* length */2]) {
      resize(b, 1);
    }
    b[/* buffer */0][pos] = c;
    b[/* position */1] = pos + 1 | 0;
    return /* () */0;
  }

  function add_string(b, s) {
    var len = s.length;
    var new_position = b[/* position */1] + len | 0;
    if (new_position > b[/* length */2]) {
      resize(b, len);
    }
    blit_string(s, 0, b[/* buffer */0], b[/* position */1], len);
    b[/* position */1] = new_position;
    return /* () */0;
  }
  /* No side effect */

  /* No side effect */

  function caml_classify_float(x) {
    if (isFinite(x)) {
      if (Math.abs(x) >= 2.2250738585072014e-308) {
        return /* FP_normal */0;
      } else if (x !== 0) {
        return /* FP_subnormal */1;
      } else {
        return /* FP_zero */2;
      }
    } else if (isNaN(x)) {
      return /* FP_nan */4;
    } else {
      return /* FP_infinite */3;
    }
  }
  /* No side effect */

  function buffer_check_size(buf, overhead) {
    var len = buf[/* bytes */1].length;
    var min_len = buf[/* ind */0] + overhead | 0;
    if (min_len > len) {
      var new_len = caml_int_max((len << 1), min_len);
      var new_str = caml_create_string(new_len);
      blit$1(buf[/* bytes */1], 0, new_str, 0, len);
      buf[/* bytes */1] = new_str;
      return /* () */0;
    } else {
      return 0;
    }
  }

  function buffer_add_char(buf, c) {
    buffer_check_size(buf, 1);
    buf[/* bytes */1][buf[/* ind */0]] = c;
    buf[/* ind */0] = buf[/* ind */0] + 1 | 0;
    return /* () */0;
  }

  function buffer_add_string(buf, s) {
    var str_len = s.length;
    buffer_check_size(buf, str_len);
    blit$2(s, 0, buf[/* bytes */1], buf[/* ind */0], str_len);
    buf[/* ind */0] = buf[/* ind */0] + str_len | 0;
    return /* () */0;
  }

  function buffer_contents(buf) {
    return sub_string(buf[/* bytes */1], 0, buf[/* ind */0]);
  }

  function char_of_fconv(fconv) {
    switch (fconv) {
      case 0 : 
      case 1 : 
      case 2 : 
          return /* "f" */102;
      case 3 : 
      case 4 : 
      case 5 : 
          return /* "e" */101;
      case 6 : 
      case 7 : 
      case 8 : 
          return /* "E" */69;
      case 9 : 
      case 10 : 
      case 11 : 
          return /* "g" */103;
      case 12 : 
      case 13 : 
      case 14 : 
          return /* "G" */71;
      case 15 : 
          return /* "F" */70;
      
    }
  }

  function bprint_fconv_flag(buf, fconv) {
    switch (fconv) {
      case 1 : 
      case 4 : 
      case 7 : 
      case 10 : 
      case 13 : 
          return buffer_add_char(buf, /* "+" */43);
      case 2 : 
      case 5 : 
      case 8 : 
      case 11 : 
      case 14 : 
          return buffer_add_char(buf, /* " " */32);
      case 0 : 
      case 3 : 
      case 6 : 
      case 9 : 
      case 12 : 
      case 15 : 
          return /* () */0;
      
    }
  }

  function string_of_formatting_lit(formatting_lit) {
    if (typeof formatting_lit === "number") {
      switch (formatting_lit) {
        case 0 : 
            return "@]";
        case 1 : 
            return "@}";
        case 2 : 
            return "@?";
        case 3 : 
            return "@\n";
        case 4 : 
            return "@.";
        case 5 : 
            return "@@";
        case 6 : 
            return "@%";
        
      }
    } else {
      switch (formatting_lit.tag | 0) {
        case 0 : 
        case 1 : 
            return formatting_lit[0];
        case 2 : 
            return "@" + bytes_to_string(make(1, formatting_lit[0]));
        
      }
    }
  }

  function bprint_fmtty(buf, _fmtty) {
    while(true) {
      var fmtty = _fmtty;
      if (typeof fmtty === "number") {
        return /* () */0;
      } else {
        switch (fmtty.tag | 0) {
          case 0 : 
              buffer_add_string(buf, "%c");
              _fmtty = fmtty[0];
              continue ;
          case 1 : 
              buffer_add_string(buf, "%s");
              _fmtty = fmtty[0];
              continue ;
          case 2 : 
              buffer_add_string(buf, "%i");
              _fmtty = fmtty[0];
              continue ;
          case 3 : 
              buffer_add_string(buf, "%li");
              _fmtty = fmtty[0];
              continue ;
          case 4 : 
              buffer_add_string(buf, "%ni");
              _fmtty = fmtty[0];
              continue ;
          case 5 : 
              buffer_add_string(buf, "%Li");
              _fmtty = fmtty[0];
              continue ;
          case 6 : 
              buffer_add_string(buf, "%f");
              _fmtty = fmtty[0];
              continue ;
          case 7 : 
              buffer_add_string(buf, "%B");
              _fmtty = fmtty[0];
              continue ;
          case 8 : 
              buffer_add_string(buf, "%{");
              bprint_fmtty(buf, fmtty[0]);
              buffer_add_string(buf, "%}");
              _fmtty = fmtty[1];
              continue ;
          case 9 : 
              buffer_add_string(buf, "%(");
              bprint_fmtty(buf, fmtty[0]);
              buffer_add_string(buf, "%)");
              _fmtty = fmtty[2];
              continue ;
          case 10 : 
              buffer_add_string(buf, "%a");
              _fmtty = fmtty[0];
              continue ;
          case 11 : 
              buffer_add_string(buf, "%t");
              _fmtty = fmtty[0];
              continue ;
          case 12 : 
              buffer_add_string(buf, "%?");
              _fmtty = fmtty[0];
              continue ;
          case 13 : 
              buffer_add_string(buf, "%r");
              _fmtty = fmtty[0];
              continue ;
          case 14 : 
              buffer_add_string(buf, "%_r");
              _fmtty = fmtty[0];
              continue ;
          
        }
      }
    }}

  function symm(param) {
    if (typeof param === "number") {
      return /* End_of_fmtty */0;
    } else {
      switch (param.tag | 0) {
        case 0 : 
            return /* Char_ty */__(0, [symm(param[0])]);
        case 1 : 
            return /* String_ty */__(1, [symm(param[0])]);
        case 2 : 
            return /* Int_ty */__(2, [symm(param[0])]);
        case 3 : 
            return /* Int32_ty */__(3, [symm(param[0])]);
        case 4 : 
            return /* Nativeint_ty */__(4, [symm(param[0])]);
        case 5 : 
            return /* Int64_ty */__(5, [symm(param[0])]);
        case 6 : 
            return /* Float_ty */__(6, [symm(param[0])]);
        case 7 : 
            return /* Bool_ty */__(7, [symm(param[0])]);
        case 8 : 
            return /* Format_arg_ty */__(8, [
                      param[0],
                      symm(param[1])
                    ]);
        case 9 : 
            return /* Format_subst_ty */__(9, [
                      param[1],
                      param[0],
                      symm(param[2])
                    ]);
        case 10 : 
            return /* Alpha_ty */__(10, [symm(param[0])]);
        case 11 : 
            return /* Theta_ty */__(11, [symm(param[0])]);
        case 12 : 
            return /* Any_ty */__(12, [symm(param[0])]);
        case 13 : 
            return /* Reader_ty */__(13, [symm(param[0])]);
        case 14 : 
            return /* Ignored_reader_ty */__(14, [symm(param[0])]);
        
      }
    }
  }

  function fmtty_rel_det(param) {
    if (typeof param === "number") {
      return /* tuple */[
              (function () {
                  return /* Refl */0;
                }),
              (function () {
                  return /* Refl */0;
                }),
              (function () {
                  return /* Refl */0;
                }),
              (function () {
                  return /* Refl */0;
                })
            ];
    } else {
      switch (param.tag | 0) {
        case 0 : 
            var match = fmtty_rel_det(param[0]);
            var af = match[1];
            var fa = match[0];
            return /* tuple */[
                    (function () {
                        _1(fa, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match[2],
                    match[3]
                  ];
        case 1 : 
            var match$1 = fmtty_rel_det(param[0]);
            var af$1 = match$1[1];
            var fa$1 = match$1[0];
            return /* tuple */[
                    (function () {
                        _1(fa$1, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$1, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$1[2],
                    match$1[3]
                  ];
        case 2 : 
            var match$2 = fmtty_rel_det(param[0]);
            var af$2 = match$2[1];
            var fa$2 = match$2[0];
            return /* tuple */[
                    (function () {
                        _1(fa$2, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$2, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$2[2],
                    match$2[3]
                  ];
        case 3 : 
            var match$3 = fmtty_rel_det(param[0]);
            var af$3 = match$3[1];
            var fa$3 = match$3[0];
            return /* tuple */[
                    (function () {
                        _1(fa$3, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$3, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$3[2],
                    match$3[3]
                  ];
        case 4 : 
            var match$4 = fmtty_rel_det(param[0]);
            var af$4 = match$4[1];
            var fa$4 = match$4[0];
            return /* tuple */[
                    (function () {
                        _1(fa$4, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$4, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$4[2],
                    match$4[3]
                  ];
        case 5 : 
            var match$5 = fmtty_rel_det(param[0]);
            var af$5 = match$5[1];
            var fa$5 = match$5[0];
            return /* tuple */[
                    (function () {
                        _1(fa$5, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$5, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$5[2],
                    match$5[3]
                  ];
        case 6 : 
            var match$6 = fmtty_rel_det(param[0]);
            var af$6 = match$6[1];
            var fa$6 = match$6[0];
            return /* tuple */[
                    (function () {
                        _1(fa$6, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$6, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$6[2],
                    match$6[3]
                  ];
        case 7 : 
            var match$7 = fmtty_rel_det(param[0]);
            var af$7 = match$7[1];
            var fa$7 = match$7[0];
            return /* tuple */[
                    (function () {
                        _1(fa$7, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$7, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$7[2],
                    match$7[3]
                  ];
        case 8 : 
            var match$8 = fmtty_rel_det(param[1]);
            var af$8 = match$8[1];
            var fa$8 = match$8[0];
            return /* tuple */[
                    (function () {
                        _1(fa$8, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$8, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$8[2],
                    match$8[3]
                  ];
        case 9 : 
            var match$9 = fmtty_rel_det(param[2]);
            var de = match$9[3];
            var ed = match$9[2];
            var af$9 = match$9[1];
            var fa$9 = match$9[0];
            var ty = trans(symm(param[0]), param[1]);
            var match$10 = fmtty_rel_det(ty);
            var jd = match$10[3];
            var dj = match$10[2];
            var ga = match$10[1];
            var ag = match$10[0];
            return /* tuple */[
                    (function () {
                        _1(fa$9, /* Refl */0);
                        _1(ag, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(ga, /* Refl */0);
                        _1(af$9, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(ed, /* Refl */0);
                        _1(dj, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(jd, /* Refl */0);
                        _1(de, /* Refl */0);
                        return /* Refl */0;
                      })
                  ];
        case 10 : 
            var match$11 = fmtty_rel_det(param[0]);
            var af$10 = match$11[1];
            var fa$10 = match$11[0];
            return /* tuple */[
                    (function () {
                        _1(fa$10, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$10, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$11[2],
                    match$11[3]
                  ];
        case 11 : 
            var match$12 = fmtty_rel_det(param[0]);
            var af$11 = match$12[1];
            var fa$11 = match$12[0];
            return /* tuple */[
                    (function () {
                        _1(fa$11, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$11, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$12[2],
                    match$12[3]
                  ];
        case 12 : 
            var match$13 = fmtty_rel_det(param[0]);
            var af$12 = match$13[1];
            var fa$12 = match$13[0];
            return /* tuple */[
                    (function () {
                        _1(fa$12, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$12, /* Refl */0);
                        return /* Refl */0;
                      }),
                    match$13[2],
                    match$13[3]
                  ];
        case 13 : 
            var match$14 = fmtty_rel_det(param[0]);
            var de$1 = match$14[3];
            var ed$1 = match$14[2];
            var af$13 = match$14[1];
            var fa$13 = match$14[0];
            return /* tuple */[
                    (function () {
                        _1(fa$13, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$13, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(ed$1, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(de$1, /* Refl */0);
                        return /* Refl */0;
                      })
                  ];
        case 14 : 
            var match$15 = fmtty_rel_det(param[0]);
            var de$2 = match$15[3];
            var ed$2 = match$15[2];
            var af$14 = match$15[1];
            var fa$14 = match$15[0];
            return /* tuple */[
                    (function () {
                        _1(fa$14, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(af$14, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(ed$2, /* Refl */0);
                        return /* Refl */0;
                      }),
                    (function () {
                        _1(de$2, /* Refl */0);
                        return /* Refl */0;
                      })
                  ];
        
      }
    }
  }

  function trans(ty1, ty2) {
    var exit$$1 = 0;
    if (typeof ty1 === "number") {
      if (typeof ty2 === "number") {
        return /* End_of_fmtty */0;
      } else {
        switch (ty2.tag | 0) {
          case 8 : 
              exit$$1 = 6;
              break;
          case 9 : 
              exit$$1 = 7;
              break;
          case 10 : 
              exit$$1 = 1;
              break;
          case 11 : 
              exit$$1 = 2;
              break;
          case 12 : 
              exit$$1 = 3;
              break;
          case 13 : 
              exit$$1 = 4;
              break;
          case 14 : 
              exit$$1 = 5;
              break;
          default:
            throw [
                  assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    816,
                    23
                  ]
                ];
        }
      }
    } else {
      switch (ty1.tag | 0) {
        case 0 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 0 : 
                    return /* Char_ty */__(0, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 1 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 1 : 
                    return /* String_ty */__(1, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 2 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 2 : 
                    return /* Int_ty */__(2, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 3 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 3 : 
                    return /* Int32_ty */__(3, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 4 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 4 : 
                    return /* Nativeint_ty */__(4, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 5 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 5 : 
                    return /* Int64_ty */__(5, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 6 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 6 : 
                    return /* Float_ty */__(6, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 7 : 
            if (typeof ty2 === "number") {
              exit$$1 = 8;
            } else {
              switch (ty2.tag | 0) {
                case 7 : 
                    return /* Bool_ty */__(7, [trans(ty1[0], ty2[0])]);
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    exit$$1 = 7;
                    break;
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                
              }
            }
            break;
        case 8 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      802,
                      26
                    ]
                  ];
            } else {
              switch (ty2.tag | 0) {
                case 8 : 
                    return /* Format_arg_ty */__(8, [
                              trans(ty1[0], ty2[0]),
                              trans(ty1[1], ty2[1])
                            ]);
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                default:
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          802,
                          26
                        ]
                      ];
              }
            }
            break;
        case 9 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      812,
                      28
                    ]
                  ];
            } else {
              switch (ty2.tag | 0) {
                case 8 : 
                    exit$$1 = 6;
                    break;
                case 9 : 
                    var ty = trans(symm(ty1[1]), ty2[0]);
                    var match = fmtty_rel_det(ty);
                    _1(match[1], /* Refl */0);
                    _1(match[3], /* Refl */0);
                    return /* Format_subst_ty */__(9, [
                              ty1[0],
                              ty2[1],
                              trans(ty1[2], ty2[2])
                            ]);
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    exit$$1 = 5;
                    break;
                default:
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          812,
                          28
                        ]
                      ];
              }
            }
            break;
        case 10 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      780,
                      21
                    ]
                  ];
            } else if (ty2.tag === 10) {
              return /* Alpha_ty */__(10, [trans(ty1[0], ty2[0])]);
            } else {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      780,
                      21
                    ]
                  ];
            }
        case 11 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      784,
                      21
                    ]
                  ];
            } else {
              switch (ty2.tag | 0) {
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    return /* Theta_ty */__(11, [trans(ty1[0], ty2[0])]);
                default:
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          784,
                          21
                        ]
                      ];
              }
            }
            break;
        case 12 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      788,
                      19
                    ]
                  ];
            } else {
              switch (ty2.tag | 0) {
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    return /* Any_ty */__(12, [trans(ty1[0], ty2[0])]);
                default:
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          788,
                          19
                        ]
                      ];
              }
            }
            break;
        case 13 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      792,
                      22
                    ]
                  ];
            } else {
              switch (ty2.tag | 0) {
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    return /* Reader_ty */__(13, [trans(ty1[0], ty2[0])]);
                default:
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          792,
                          22
                        ]
                      ];
              }
            }
            break;
        case 14 : 
            if (typeof ty2 === "number") {
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      797,
                      30
                    ]
                  ];
            } else {
              switch (ty2.tag | 0) {
                case 10 : 
                    exit$$1 = 1;
                    break;
                case 11 : 
                    exit$$1 = 2;
                    break;
                case 12 : 
                    exit$$1 = 3;
                    break;
                case 13 : 
                    exit$$1 = 4;
                    break;
                case 14 : 
                    return /* Ignored_reader_ty */__(14, [trans(ty1[0], ty2[0])]);
                default:
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          797,
                          30
                        ]
                      ];
              }
            }
            break;
        
      }
    }
    switch (exit$$1) {
      case 1 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  781,
                  21
                ]
              ];
      case 2 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  785,
                  21
                ]
              ];
      case 3 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  789,
                  19
                ]
              ];
      case 4 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  793,
                  22
                ]
              ];
      case 5 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  798,
                  30
                ]
              ];
      case 6 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  803,
                  26
                ]
              ];
      case 7 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  813,
                  28
                ]
              ];
      case 8 : 
          throw [
                assert_failure,
                /* tuple */[
                  "camlinternalFormat.ml",
                  817,
                  23
                ]
              ];
      
    }
  }

  var Type_mismatch = create("CamlinternalFormat.Type_mismatch");

  function type_padding(pad, fmtty) {
    if (typeof pad === "number") {
      return /* Padding_fmtty_EBB */[
              /* No_padding */0,
              fmtty
            ];
    } else if (pad.tag) {
      if (typeof fmtty === "number") {
        throw Type_mismatch;
      } else if (fmtty.tag === 2) {
        return /* Padding_fmtty_EBB */[
                /* Arg_padding */__(1, [pad[0]]),
                fmtty[0]
              ];
      } else {
        throw Type_mismatch;
      }
    } else {
      return /* Padding_fmtty_EBB */[
              /* Lit_padding */__(0, [
                  pad[0],
                  pad[1]
                ]),
              fmtty
            ];
    }
  }

  function type_padprec(pad, prec, fmtty) {
    var match = type_padding(pad, fmtty);
    if (typeof prec === "number") {
      if (prec !== 0) {
        var match$1 = match[1];
        if (typeof match$1 === "number") {
          throw Type_mismatch;
        } else if (match$1.tag === 2) {
          return /* Padprec_fmtty_EBB */[
                  match[0],
                  /* Arg_precision */1,
                  match$1[0]
                ];
        } else {
          throw Type_mismatch;
        }
      } else {
        return /* Padprec_fmtty_EBB */[
                match[0],
                /* No_precision */0,
                match[1]
              ];
      }
    } else {
      return /* Padprec_fmtty_EBB */[
              match[0],
              /* Lit_precision */[prec[0]],
              match[1]
            ];
    }
  }

  function type_ignored_param_one(ign, fmt, fmtty) {
    var match = type_format_gen(fmt, fmtty);
    return /* Fmt_fmtty_EBB */[
            /* Ignored_param */__(23, [
                ign,
                match[0]
              ]),
            match[1]
          ];
  }

  function type_format_gen(fmt, fmtty) {
    if (typeof fmt === "number") {
      return /* Fmt_fmtty_EBB */[
              /* End_of_format */0,
              fmtty
            ];
    } else {
      switch (fmt.tag | 0) {
        case 0 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag) {
              throw Type_mismatch;
            } else {
              var match = type_format_gen(fmt[0], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Char */__(0, [match[0]]),
                      match[1]
                    ];
            }
        case 1 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag) {
              throw Type_mismatch;
            } else {
              var match$1 = type_format_gen(fmt[0], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Caml_char */__(1, [match$1[0]]),
                      match$1[1]
                    ];
            }
        case 2 : 
            var match$2 = type_padding(fmt[0], fmtty);
            var match$3 = match$2[1];
            if (typeof match$3 === "number") {
              throw Type_mismatch;
            } else if (match$3.tag === 1) {
              var match$4 = type_format_gen(fmt[1], match$3[0]);
              return /* Fmt_fmtty_EBB */[
                      /* String */__(2, [
                          match$2[0],
                          match$4[0]
                        ]),
                      match$4[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 3 : 
            var match$5 = type_padding(fmt[0], fmtty);
            var match$6 = match$5[1];
            if (typeof match$6 === "number") {
              throw Type_mismatch;
            } else if (match$6.tag === 1) {
              var match$7 = type_format_gen(fmt[1], match$6[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Caml_string */__(3, [
                          match$5[0],
                          match$7[0]
                        ]),
                      match$7[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 4 : 
            var match$8 = type_padprec(fmt[1], fmt[2], fmtty);
            var match$9 = match$8[2];
            if (typeof match$9 === "number") {
              throw Type_mismatch;
            } else if (match$9.tag === 2) {
              var match$10 = type_format_gen(fmt[3], match$9[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Int */__(4, [
                          fmt[0],
                          match$8[0],
                          match$8[1],
                          match$10[0]
                        ]),
                      match$10[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 5 : 
            var match$11 = type_padprec(fmt[1], fmt[2], fmtty);
            var match$12 = match$11[2];
            if (typeof match$12 === "number") {
              throw Type_mismatch;
            } else if (match$12.tag === 3) {
              var match$13 = type_format_gen(fmt[3], match$12[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Int32 */__(5, [
                          fmt[0],
                          match$11[0],
                          match$11[1],
                          match$13[0]
                        ]),
                      match$13[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 6 : 
            var match$14 = type_padprec(fmt[1], fmt[2], fmtty);
            var match$15 = match$14[2];
            if (typeof match$15 === "number") {
              throw Type_mismatch;
            } else if (match$15.tag === 4) {
              var match$16 = type_format_gen(fmt[3], match$15[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Nativeint */__(6, [
                          fmt[0],
                          match$14[0],
                          match$14[1],
                          match$16[0]
                        ]),
                      match$16[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 7 : 
            var match$17 = type_padprec(fmt[1], fmt[2], fmtty);
            var match$18 = match$17[2];
            if (typeof match$18 === "number") {
              throw Type_mismatch;
            } else if (match$18.tag === 5) {
              var match$19 = type_format_gen(fmt[3], match$18[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Int64 */__(7, [
                          fmt[0],
                          match$17[0],
                          match$17[1],
                          match$19[0]
                        ]),
                      match$19[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 8 : 
            var match$20 = type_padprec(fmt[1], fmt[2], fmtty);
            var match$21 = match$20[2];
            if (typeof match$21 === "number") {
              throw Type_mismatch;
            } else if (match$21.tag === 6) {
              var match$22 = type_format_gen(fmt[3], match$21[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Float */__(8, [
                          fmt[0],
                          match$20[0],
                          match$20[1],
                          match$22[0]
                        ]),
                      match$22[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 9 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 7) {
              var match$23 = type_format_gen(fmt[0], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Bool */__(9, [match$23[0]]),
                      match$23[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 10 : 
            var match$24 = type_format_gen(fmt[0], fmtty);
            return /* Fmt_fmtty_EBB */[
                    /* Flush */__(10, [match$24[0]]),
                    match$24[1]
                  ];
        case 11 : 
            var match$25 = type_format_gen(fmt[1], fmtty);
            return /* Fmt_fmtty_EBB */[
                    /* String_literal */__(11, [
                        fmt[0],
                        match$25[0]
                      ]),
                    match$25[1]
                  ];
        case 12 : 
            var match$26 = type_format_gen(fmt[1], fmtty);
            return /* Fmt_fmtty_EBB */[
                    /* Char_literal */__(12, [
                        fmt[0],
                        match$26[0]
                      ]),
                    match$26[1]
                  ];
        case 13 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 8) {
              var sub_fmtty$prime = fmtty[0];
              if (caml_notequal(/* Fmtty_EBB */[fmt[1]], /* Fmtty_EBB */[sub_fmtty$prime])) {
                throw Type_mismatch;
              }
              var match$27 = type_format_gen(fmt[2], fmtty[1]);
              return /* Fmt_fmtty_EBB */[
                      /* Format_arg */__(13, [
                          fmt[0],
                          sub_fmtty$prime,
                          match$27[0]
                        ]),
                      match$27[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 14 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 9) {
              var sub_fmtty1 = fmtty[0];
              if (caml_notequal(/* Fmtty_EBB */[erase_rel(fmt[1])], /* Fmtty_EBB */[erase_rel(sub_fmtty1)])) {
                throw Type_mismatch;
              }
              var match$28 = type_format_gen(fmt[2], erase_rel(fmtty[2]));
              return /* Fmt_fmtty_EBB */[
                      /* Format_subst */__(14, [
                          fmt[0],
                          sub_fmtty1,
                          match$28[0]
                        ]),
                      match$28[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 15 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 10) {
              var match$29 = type_format_gen(fmt[0], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Alpha */__(15, [match$29[0]]),
                      match$29[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 16 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 11) {
              var match$30 = type_format_gen(fmt[0], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Theta */__(16, [match$30[0]]),
                      match$30[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 17 : 
            var match$31 = type_format_gen(fmt[1], fmtty);
            return /* Fmt_fmtty_EBB */[
                    /* Formatting_lit */__(17, [
                        fmt[0],
                        match$31[0]
                      ]),
                    match$31[1]
                  ];
        case 18 : 
            var formatting_gen = fmt[0];
            var fmt0 = fmt[1];
            var fmtty0 = fmtty;
            if (formatting_gen.tag) {
              var match$32 = formatting_gen[0];
              var match$33 = type_format_gen(match$32[0], fmtty0);
              var match$34 = type_format_gen(fmt0, match$33[1]);
              return /* Fmt_fmtty_EBB */[
                      /* Formatting_gen */__(18, [
                          /* Open_box */__(1, [/* Format */[
                                match$33[0],
                                match$32[1]
                              ]]),
                          match$34[0]
                        ]),
                      match$34[1]
                    ];
            } else {
              var match$35 = formatting_gen[0];
              var match$36 = type_format_gen(match$35[0], fmtty0);
              var match$37 = type_format_gen(fmt0, match$36[1]);
              return /* Fmt_fmtty_EBB */[
                      /* Formatting_gen */__(18, [
                          /* Open_tag */__(0, [/* Format */[
                                match$36[0],
                                match$35[1]
                              ]]),
                          match$37[0]
                        ]),
                      match$37[1]
                    ];
            }
        case 19 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 13) {
              var match$38 = type_format_gen(fmt[0], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Reader */__(19, [match$38[0]]),
                      match$38[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 20 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 1) {
              var match$39 = type_format_gen(fmt[2], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Scan_char_set */__(20, [
                          fmt[0],
                          fmt[1],
                          match$39[0]
                        ]),
                      match$39[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 21 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 2) {
              var match$40 = type_format_gen(fmt[1], fmtty[0]);
              return /* Fmt_fmtty_EBB */[
                      /* Scan_get_counter */__(21, [
                          fmt[0],
                          match$40[0]
                        ]),
                      match$40[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 23 : 
            var ign = fmt[0];
            var fmt$1 = fmt[1];
            var fmtty$1 = fmtty;
            if (typeof ign === "number") {
              if (ign === 3) {
                if (typeof fmtty$1 === "number") {
                  throw Type_mismatch;
                } else if (fmtty$1.tag === 14) {
                  var match$41 = type_format_gen(fmt$1, fmtty$1[0]);
                  return /* Fmt_fmtty_EBB */[
                          /* Ignored_param */__(23, [
                              /* Ignored_reader */3,
                              match$41[0]
                            ]),
                          match$41[1]
                        ];
                } else {
                  throw Type_mismatch;
                }
              } else {
                return type_ignored_param_one(ign, fmt$1, fmtty$1);
              }
            } else {
              switch (ign.tag | 0) {
                case 7 : 
                    return type_ignored_param_one(/* Ignored_format_arg */__(7, [
                                  ign[0],
                                  ign[1]
                                ]), fmt$1, fmtty$1);
                case 8 : 
                    var match$42 = type_ignored_format_substitution(ign[1], fmt$1, fmtty$1);
                    var match$43 = match$42[1];
                    return /* Fmt_fmtty_EBB */[
                            /* Ignored_param */__(23, [
                                /* Ignored_format_subst */__(8, [
                                    ign[0],
                                    match$42[0]
                                  ]),
                                match$43[0]
                              ]),
                            match$43[1]
                          ];
                default:
                  return type_ignored_param_one(ign, fmt$1, fmtty$1);
              }
            }
        case 22 : 
        case 24 : 
            throw Type_mismatch;
        
      }
    }
  }

  function type_ignored_format_substitution(sub_fmtty, fmt, fmtty) {
    if (typeof sub_fmtty === "number") {
      return /* Fmtty_fmt_EBB */[
              /* End_of_fmtty */0,
              type_format_gen(fmt, fmtty)
            ];
    } else {
      switch (sub_fmtty.tag | 0) {
        case 0 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag) {
              throw Type_mismatch;
            } else {
              var match = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Char_ty */__(0, [match[0]]),
                      match[1]
                    ];
            }
        case 1 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 1) {
              var match$1 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* String_ty */__(1, [match$1[0]]),
                      match$1[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 2 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 2) {
              var match$2 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Int_ty */__(2, [match$2[0]]),
                      match$2[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 3 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 3) {
              var match$3 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Int32_ty */__(3, [match$3[0]]),
                      match$3[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 4 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 4) {
              var match$4 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Nativeint_ty */__(4, [match$4[0]]),
                      match$4[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 5 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 5) {
              var match$5 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Int64_ty */__(5, [match$5[0]]),
                      match$5[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 6 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 6) {
              var match$6 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Float_ty */__(6, [match$6[0]]),
                      match$6[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 7 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 7) {
              var match$7 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Bool_ty */__(7, [match$7[0]]),
                      match$7[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 8 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 8) {
              var sub2_fmtty$prime = fmtty[0];
              if (caml_notequal(/* Fmtty_EBB */[sub_fmtty[0]], /* Fmtty_EBB */[sub2_fmtty$prime])) {
                throw Type_mismatch;
              }
              var match$8 = type_ignored_format_substitution(sub_fmtty[1], fmt, fmtty[1]);
              return /* Fmtty_fmt_EBB */[
                      /* Format_arg_ty */__(8, [
                          sub2_fmtty$prime,
                          match$8[0]
                        ]),
                      match$8[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 9 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 9) {
              var sub2_fmtty$prime$1 = fmtty[1];
              var sub1_fmtty$prime = fmtty[0];
              if (caml_notequal(/* Fmtty_EBB */[erase_rel(sub_fmtty[0])], /* Fmtty_EBB */[erase_rel(sub1_fmtty$prime)])) {
                throw Type_mismatch;
              }
              if (caml_notequal(/* Fmtty_EBB */[erase_rel(sub_fmtty[1])], /* Fmtty_EBB */[erase_rel(sub2_fmtty$prime$1)])) {
                throw Type_mismatch;
              }
              var sub_fmtty$prime = trans(symm(sub1_fmtty$prime), sub2_fmtty$prime$1);
              var match$9 = fmtty_rel_det(sub_fmtty$prime);
              _1(match$9[1], /* Refl */0);
              _1(match$9[3], /* Refl */0);
              var match$10 = type_ignored_format_substitution(erase_rel(sub_fmtty[2]), fmt, fmtty[2]);
              return /* Fmtty_fmt_EBB */[
                      /* Format_subst_ty */__(9, [
                          sub1_fmtty$prime,
                          sub2_fmtty$prime$1,
                          symm(match$10[0])
                        ]),
                      match$10[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 10 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 10) {
              var match$11 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Alpha_ty */__(10, [match$11[0]]),
                      match$11[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 11 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 11) {
              var match$12 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Theta_ty */__(11, [match$12[0]]),
                      match$12[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 12 : 
            throw Type_mismatch;
        case 13 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 13) {
              var match$13 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Reader_ty */__(13, [match$13[0]]),
                      match$13[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        case 14 : 
            if (typeof fmtty === "number") {
              throw Type_mismatch;
            } else if (fmtty.tag === 14) {
              var match$14 = type_ignored_format_substitution(sub_fmtty[0], fmt, fmtty[0]);
              return /* Fmtty_fmt_EBB */[
                      /* Ignored_reader_ty */__(14, [match$14[0]]),
                      match$14[1]
                    ];
            } else {
              throw Type_mismatch;
            }
        
      }
    }
  }

  function type_format(fmt, fmtty) {
    var match = type_format_gen(fmt, fmtty);
    if (typeof match[1] === "number") {
      return match[0];
    } else {
      throw Type_mismatch;
    }
  }

  function recast(fmt, fmtty) {
    return type_format(fmt, erase_rel(symm(fmtty)));
  }

  function fix_padding(padty, width, str) {
    var len = str.length;
    var width$1 = abs(width);
    var padty$1 = width < 0 ? /* Left */0 : padty;
    if (width$1 <= len) {
      return str;
    } else {
      var res = make(width$1, padty$1 === /* Zeros */2 ? /* "0" */48 : /* " " */32);
      switch (padty$1) {
        case 0 : 
            blit$2(str, 0, res, 0, len);
            break;
        case 1 : 
            blit$2(str, 0, res, width$1 - len | 0, len);
            break;
        case 2 : 
            if (len > 0 && (get(str, 0) === /* "+" */43 || get(str, 0) === /* "-" */45 || get(str, 0) === /* " " */32)) {
              res[0] = get(str, 0);
              blit$2(str, 1, res, (width$1 - len | 0) + 1 | 0, len - 1 | 0);
            } else if (len > 1 && get(str, 0) === /* "0" */48 && (get(str, 1) === /* "x" */120 || get(str, 1) === /* "X" */88)) {
              res[1] = get(str, 1);
              blit$2(str, 2, res, (width$1 - len | 0) + 2 | 0, len - 2 | 0);
            } else {
              blit$2(str, 0, res, width$1 - len | 0, len);
            }
            break;
        
      }
      return bytes_to_string(res);
    }
  }

  function fix_int_precision(prec, str) {
    var prec$1 = abs(prec);
    var len = str.length;
    var c = get(str, 0);
    var exit$$1 = 0;
    if (c >= 58) {
      if (c >= 71) {
        if (c > 102 || c < 97) {
          return str;
        } else {
          exit$$1 = 2;
        }
      } else if (c >= 65) {
        exit$$1 = 2;
      } else {
        return str;
      }
    } else if (c !== 32) {
      if (c >= 43) {
        switch (c - 43 | 0) {
          case 0 : 
          case 2 : 
              exit$$1 = 1;
              break;
          case 1 : 
          case 3 : 
          case 4 : 
              return str;
          case 5 : 
              if ((prec$1 + 2 | 0) > len && len > 1 && (get(str, 1) === /* "x" */120 || get(str, 1) === /* "X" */88)) {
                var res = make(prec$1 + 2 | 0, /* "0" */48);
                res[1] = get(str, 1);
                blit$2(str, 2, res, (prec$1 - len | 0) + 4 | 0, len - 2 | 0);
                return bytes_to_string(res);
              } else {
                exit$$1 = 2;
              }
              break;
          case 6 : 
          case 7 : 
          case 8 : 
          case 9 : 
          case 10 : 
          case 11 : 
          case 12 : 
          case 13 : 
          case 14 : 
              exit$$1 = 2;
              break;
          
        }
      } else {
        return str;
      }
    } else {
      exit$$1 = 1;
    }
    switch (exit$$1) {
      case 1 : 
          if ((prec$1 + 1 | 0) > len) {
            var res$1 = make(prec$1 + 1 | 0, /* "0" */48);
            res$1[0] = c;
            blit$2(str, 1, res$1, (prec$1 - len | 0) + 2 | 0, len - 1 | 0);
            return bytes_to_string(res$1);
          } else {
            return str;
          }
      case 2 : 
          if (prec$1 > len) {
            var res$2 = make(prec$1, /* "0" */48);
            blit$2(str, 0, res$2, prec$1 - len | 0, len);
            return bytes_to_string(res$2);
          } else {
            return str;
          }
      
    }
  }

  function string_to_caml_string(str) {
    return concat$3(escaped$2(str), /* :: */[
                "\"",
                /* :: */[
                  "\"",
                  /* [] */0
                ]
              ]);
  }

  function format_of_iconv(iconv) {
    switch (iconv) {
      case 0 : 
          return "%d";
      case 1 : 
          return "%+d";
      case 2 : 
          return "% d";
      case 3 : 
          return "%i";
      case 4 : 
          return "%+i";
      case 5 : 
          return "% i";
      case 6 : 
          return "%x";
      case 7 : 
          return "%#x";
      case 8 : 
          return "%X";
      case 9 : 
          return "%#X";
      case 10 : 
          return "%o";
      case 11 : 
          return "%#o";
      case 12 : 
          return "%u";
      
    }
  }

  function format_of_aconv(iconv, c) {
    var seps;
    switch (iconv) {
      case 0 : 
          seps = /* :: */[
            "%",
            /* :: */[
              "d",
              /* [] */0
            ]
          ];
          break;
      case 1 : 
          seps = /* :: */[
            "%+",
            /* :: */[
              "d",
              /* [] */0
            ]
          ];
          break;
      case 2 : 
          seps = /* :: */[
            "% ",
            /* :: */[
              "d",
              /* [] */0
            ]
          ];
          break;
      case 3 : 
          seps = /* :: */[
            "%",
            /* :: */[
              "i",
              /* [] */0
            ]
          ];
          break;
      case 4 : 
          seps = /* :: */[
            "%+",
            /* :: */[
              "i",
              /* [] */0
            ]
          ];
          break;
      case 5 : 
          seps = /* :: */[
            "% ",
            /* :: */[
              "i",
              /* [] */0
            ]
          ];
          break;
      case 6 : 
          seps = /* :: */[
            "%",
            /* :: */[
              "x",
              /* [] */0
            ]
          ];
          break;
      case 7 : 
          seps = /* :: */[
            "%#",
            /* :: */[
              "x",
              /* [] */0
            ]
          ];
          break;
      case 8 : 
          seps = /* :: */[
            "%",
            /* :: */[
              "X",
              /* [] */0
            ]
          ];
          break;
      case 9 : 
          seps = /* :: */[
            "%#",
            /* :: */[
              "X",
              /* [] */0
            ]
          ];
          break;
      case 10 : 
          seps = /* :: */[
            "%",
            /* :: */[
              "o",
              /* [] */0
            ]
          ];
          break;
      case 11 : 
          seps = /* :: */[
            "%#",
            /* :: */[
              "o",
              /* [] */0
            ]
          ];
          break;
      case 12 : 
          seps = /* :: */[
            "%",
            /* :: */[
              "u",
              /* [] */0
            ]
          ];
          break;
      
    }
    return concat$3(bytes_to_string(make(1, c)), seps);
  }

  function format_of_fconv(fconv, prec) {
    if (fconv === /* Float_F */15) {
      return "%.12g";
    } else {
      var prec$1 = abs(prec);
      var symb = char_of_fconv(fconv);
      var buf = /* record */[
        /* ind */0,
        /* bytes */caml_create_string(16)
      ];
      buffer_add_char(buf, /* "%" */37);
      bprint_fconv_flag(buf, fconv);
      buffer_add_char(buf, /* "." */46);
      buffer_add_string(buf, String(prec$1));
      buffer_add_char(buf, symb);
      return buffer_contents(buf);
    }
  }

  function convert_int(iconv, n) {
    return caml_format_int(format_of_iconv(iconv), n);
  }

  function convert_int32(iconv, n) {
    return caml_int32_format(format_of_aconv(iconv, /* "l" */108), n);
  }

  function convert_nativeint(iconv, n) {
    return caml_nativeint_format(format_of_aconv(iconv, /* "n" */110), n);
  }

  function convert_int64(iconv, n) {
    return caml_int64_format(format_of_aconv(iconv, /* "L" */76), n);
  }

  function convert_float(fconv, prec, x) {
    var prec$1 = abs(prec);
    var str = caml_format_float(format_of_fconv(fconv, prec$1), x);
    if (fconv !== /* Float_F */15) {
      return str;
    } else {
      var len = str.length;
      var is_valid = function (_i) {
        while(true) {
          var i = _i;
          if (i === len) {
            return false;
          } else {
            var match = get(str, i);
            var switcher = match - 46 | 0;
            if (switcher > 23 || switcher < 0) {
              if (switcher !== 55) {
                _i = i + 1 | 0;
                continue ;
              } else {
                return true;
              }
            } else if (switcher > 22 || switcher < 1) {
              return true;
            } else {
              _i = i + 1 | 0;
              continue ;
            }
          }
        }    };
      var match = caml_classify_float(x);
      if (match !== 3) {
        if (match >= 4) {
          return "nan";
        } else if (is_valid(0)) {
          return str;
        } else {
          return str + ".";
        }
      } else if (x < 0.0) {
        return "neg_infinity";
      } else {
        return "infinity";
      }
    }
  }

  function format_caml_char(c) {
    return concat$3(escaped(c), /* :: */[
                "'",
                /* :: */[
                  "'",
                  /* [] */0
                ]
              ]);
  }

  function string_of_fmtty(fmtty) {
    var buf = /* record */[
      /* ind */0,
      /* bytes */caml_create_string(16)
    ];
    bprint_fmtty(buf, fmtty);
    return buffer_contents(buf);
  }

  function make_printf(_k, o, _acc, _fmt) {
    while(true) {
      var fmt = _fmt;
      var acc = _acc;
      var k = _k;
      if (typeof fmt === "number") {
        return _2(k, o, acc);
      } else {
        switch (fmt.tag | 0) {
          case 0 : 
              var rest = fmt[0];
              return (function(k,acc,rest){
              return function (c) {
                var new_acc = /* Acc_data_char */__(5, [
                    acc,
                    c
                  ]);
                return make_printf(k, o, new_acc, rest);
              }
              }(k,acc,rest));
          case 1 : 
              var rest$1 = fmt[0];
              return (function(k,acc,rest$1){
              return function (c) {
                var new_acc_001 = format_caml_char(c);
                var new_acc = /* Acc_data_string */__(4, [
                    acc,
                    new_acc_001
                  ]);
                return make_printf(k, o, new_acc, rest$1);
              }
              }(k,acc,rest$1));
          case 2 : 
              return make_string_padding(k, o, acc, fmt[1], fmt[0], (function (str) {
                            return str;
                          }));
          case 3 : 
              return make_string_padding(k, o, acc, fmt[1], fmt[0], string_to_caml_string);
          case 4 : 
              return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int, fmt[0]);
          case 5 : 
              return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int32, fmt[0]);
          case 6 : 
              return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_nativeint, fmt[0]);
          case 7 : 
              return make_int_padding_precision(k, o, acc, fmt[3], fmt[1], fmt[2], convert_int64, fmt[0]);
          case 8 : 
              var k$1 = k;
              var o$1 = o;
              var acc$1 = acc;
              var fmt$1 = fmt[3];
              var pad = fmt[1];
              var prec = fmt[2];
              var fconv = fmt[0];
              if (typeof pad === "number") {
                if (typeof prec === "number") {
                  if (prec !== 0) {
                    return (function(k$1,o$1,acc$1,fmt$1,fconv){
                    return function (p, x) {
                      var str = convert_float(fconv, p, x);
                      return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                    acc$1,
                                    str
                                  ]), fmt$1);
                    }
                    }(k$1,o$1,acc$1,fmt$1,fconv));
                  } else {
                    return (function(k$1,o$1,acc$1,fmt$1,fconv){
                    return function (x) {
                      var str = convert_float(fconv, 6, x);
                      return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                    acc$1,
                                    str
                                  ]), fmt$1);
                    }
                    }(k$1,o$1,acc$1,fmt$1,fconv));
                  }
                } else {
                  var p = prec[0];
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,p){
                  return function (x) {
                    var str = convert_float(fconv, p, x);
                    return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,p));
                }
              } else if (pad.tag) {
                var padty = pad[0];
                if (typeof prec === "number") {
                  if (prec !== 0) {
                    return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){
                    return function (w, p, x) {
                      var str = fix_padding(padty, w, convert_float(fconv, p, x));
                      return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                    acc$1,
                                    str
                                  ]), fmt$1);
                    }
                    }(k$1,o$1,acc$1,fmt$1,fconv,padty));
                  } else {
                    return (function(k$1,o$1,acc$1,fmt$1,fconv,padty){
                    return function (w, x) {
                      var str = convert_float(fconv, 6, x);
                      var str$prime = fix_padding(padty, w, str);
                      return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                    acc$1,
                                    str$prime
                                  ]), fmt$1);
                    }
                    }(k$1,o$1,acc$1,fmt$1,fconv,padty));
                  }
                } else {
                  var p$1 = prec[0];
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1){
                  return function (w, x) {
                    var str = fix_padding(padty, w, convert_float(fconv, p$1, x));
                    return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty,p$1));
                }
              } else {
                var w = pad[1];
                var padty$1 = pad[0];
                if (typeof prec === "number") {
                  if (prec !== 0) {
                    return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){
                    return function (p, x) {
                      var str = fix_padding(padty$1, w, convert_float(fconv, p, x));
                      return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                    acc$1,
                                    str
                                  ]), fmt$1);
                    }
                    }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));
                  } else {
                    return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w){
                    return function (x) {
                      var str = convert_float(fconv, 6, x);
                      var str$prime = fix_padding(padty$1, w, str);
                      return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                    acc$1,
                                    str$prime
                                  ]), fmt$1);
                    }
                    }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w));
                  }
                } else {
                  var p$2 = prec[0];
                  return (function(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2){
                  return function (x) {
                    var str = fix_padding(padty$1, w, convert_float(fconv, p$2, x));
                    return make_printf(k$1, o$1, /* Acc_data_string */__(4, [
                                  acc$1,
                                  str
                                ]), fmt$1);
                  }
                  }(k$1,o$1,acc$1,fmt$1,fconv,padty$1,w,p$2));
                }
              }
          case 9 : 
              var rest$2 = fmt[0];
              return (function(k,acc,rest$2){
              return function (b) {
                return make_printf(k, o, /* Acc_data_string */__(4, [
                              acc,
                              b ? "true" : "false"
                            ]), rest$2);
              }
              }(k,acc,rest$2));
          case 10 : 
              _fmt = fmt[0];
              _acc = /* Acc_flush */__(7, [acc]);
              continue ;
          case 11 : 
              _fmt = fmt[1];
              _acc = /* Acc_string_literal */__(2, [
                  acc,
                  fmt[0]
                ]);
              continue ;
          case 12 : 
              _fmt = fmt[1];
              _acc = /* Acc_char_literal */__(3, [
                  acc,
                  fmt[0]
                ]);
              continue ;
          case 13 : 
              var rest$3 = fmt[2];
              var ty = string_of_fmtty(fmt[1]);
              return (function(k,acc,rest$3,ty){
              return function () {
                return make_printf(k, o, /* Acc_data_string */__(4, [
                              acc,
                              ty
                            ]), rest$3);
              }
              }(k,acc,rest$3,ty));
          case 14 : 
              var rest$4 = fmt[2];
              var fmtty = fmt[1];
              return (function(k,acc,fmtty,rest$4){
              return function (param) {
                return make_printf(k, o, acc, concat_fmt(recast(param[0], fmtty), rest$4));
              }
              }(k,acc,fmtty,rest$4));
          case 15 : 
              var rest$5 = fmt[0];
              return (function(k,acc,rest$5){
              return function (f, x) {
                return make_printf(k, o, /* Acc_delay */__(6, [
                              acc,
                              (function (o) {
                                  return _2(f, o, x);
                                })
                            ]), rest$5);
              }
              }(k,acc,rest$5));
          case 16 : 
              var rest$6 = fmt[0];
              return (function(k,acc,rest$6){
              return function (f) {
                return make_printf(k, o, /* Acc_delay */__(6, [
                              acc,
                              f
                            ]), rest$6);
              }
              }(k,acc,rest$6));
          case 17 : 
              _fmt = fmt[1];
              _acc = /* Acc_formatting_lit */__(0, [
                  acc,
                  fmt[0]
                ]);
              continue ;
          case 18 : 
              var match = fmt[0];
              if (match.tag) {
                var rest$7 = fmt[1];
                var k$prime = (function(k,acc,rest$7){
                return function k$prime(koc, kacc) {
                  return make_printf(k, koc, /* Acc_formatting_gen */__(1, [
                                acc,
                                /* Acc_open_box */__(1, [kacc])
                              ]), rest$7);
                }
                }(k,acc,rest$7));
                _fmt = match[0][0];
                _acc = /* End_of_acc */0;
                _k = k$prime;
                continue ;
              } else {
                var rest$8 = fmt[1];
                var k$prime$1 = (function(k,acc,rest$8){
                return function k$prime$1(koc, kacc) {
                  return make_printf(k, koc, /* Acc_formatting_gen */__(1, [
                                acc,
                                /* Acc_open_tag */__(0, [kacc])
                              ]), rest$8);
                }
                }(k,acc,rest$8));
                _fmt = match[0][0];
                _acc = /* End_of_acc */0;
                _k = k$prime$1;
                continue ;
              }
          case 19 : 
              throw [
                    assert_failure,
                    /* tuple */[
                      "camlinternalFormat.ml",
                      1449,
                      4
                    ]
                  ];
          case 20 : 
              var rest$9 = fmt[2];
              var new_acc = /* Acc_invalid_arg */__(8, [
                  acc,
                  "Printf: bad conversion %["
                ]);
              return (function(k,rest$9,new_acc){
              return function () {
                return make_printf(k, o, new_acc, rest$9);
              }
              }(k,rest$9,new_acc));
          case 21 : 
              var rest$10 = fmt[1];
              return (function(k,acc,rest$10){
              return function (n) {
                var new_acc_001 = caml_format_int("%u", n);
                var new_acc = /* Acc_data_string */__(4, [
                    acc,
                    new_acc_001
                  ]);
                return make_printf(k, o, new_acc, rest$10);
              }
              }(k,acc,rest$10));
          case 22 : 
              var rest$11 = fmt[0];
              return (function(k,acc,rest$11){
              return function (c) {
                var new_acc = /* Acc_data_char */__(5, [
                    acc,
                    c
                  ]);
                return make_printf(k, o, new_acc, rest$11);
              }
              }(k,acc,rest$11));
          case 23 : 
              var k$2 = k;
              var o$2 = o;
              var acc$2 = acc;
              var ign = fmt[0];
              var fmt$2 = fmt[1];
              if (typeof ign === "number") {
                if (ign === 3) {
                  throw [
                        assert_failure,
                        /* tuple */[
                          "camlinternalFormat.ml",
                          1517,
                          39
                        ]
                      ];
                } else {
                  return make_invalid_arg(k$2, o$2, acc$2, fmt$2);
                }
              } else if (ign.tag === 8) {
                return make_from_fmtty(k$2, o$2, acc$2, ign[1], fmt$2);
              } else {
                return make_invalid_arg(k$2, o$2, acc$2, fmt$2);
              }
          case 24 : 
              return make_custom(k, o, acc, fmt[2], fmt[0], _1(fmt[1], /* () */0));
          
        }
      }
    }}

  function make_from_fmtty(k, o, acc, fmtty, fmt) {
    if (typeof fmtty === "number") {
      return make_invalid_arg(k, o, acc, fmt);
    } else {
      switch (fmtty.tag | 0) {
        case 0 : 
            var rest = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest, fmt);
              });
        case 1 : 
            var rest$1 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$1, fmt);
              });
        case 2 : 
            var rest$2 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$2, fmt);
              });
        case 3 : 
            var rest$3 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$3, fmt);
              });
        case 4 : 
            var rest$4 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$4, fmt);
              });
        case 5 : 
            var rest$5 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$5, fmt);
              });
        case 6 : 
            var rest$6 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$6, fmt);
              });
        case 7 : 
            var rest$7 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$7, fmt);
              });
        case 8 : 
            var rest$8 = fmtty[1];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$8, fmt);
              });
        case 9 : 
            var rest$9 = fmtty[2];
            var ty = trans(symm(fmtty[0]), fmtty[1]);
            return (function () {
                return make_from_fmtty(k, o, acc, concat_fmtty(ty, rest$9), fmt);
              });
        case 10 : 
            var rest$10 = fmtty[0];
            return (function (_, _$1) {
                return make_from_fmtty(k, o, acc, rest$10, fmt);
              });
        case 11 : 
            var rest$11 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$11, fmt);
              });
        case 12 : 
            var rest$12 = fmtty[0];
            return (function () {
                return make_from_fmtty(k, o, acc, rest$12, fmt);
              });
        case 13 : 
            throw [
                  assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    1540,
                    31
                  ]
                ];
        case 14 : 
            throw [
                  assert_failure,
                  /* tuple */[
                    "camlinternalFormat.ml",
                    1541,
                    31
                  ]
                ];
        
      }
    }
  }

  function make_invalid_arg(k, o, acc, fmt) {
    return make_printf(k, o, /* Acc_invalid_arg */__(8, [
                  acc,
                  "Printf: bad conversion %_"
                ]), fmt);
  }

  function make_string_padding(k, o, acc, fmt, pad, trans) {
    if (typeof pad === "number") {
      return (function (x) {
          var new_acc_001 = _1(trans, x);
          var new_acc = /* Acc_data_string */__(4, [
              acc,
              new_acc_001
            ]);
          return make_printf(k, o, new_acc, fmt);
        });
    } else if (pad.tag) {
      var padty = pad[0];
      return (function (w, x) {
          var new_acc_001 = fix_padding(padty, w, _1(trans, x));
          var new_acc = /* Acc_data_string */__(4, [
              acc,
              new_acc_001
            ]);
          return make_printf(k, o, new_acc, fmt);
        });
    } else {
      var width = pad[1];
      var padty$1 = pad[0];
      return (function (x) {
          var new_acc_001 = fix_padding(padty$1, width, _1(trans, x));
          var new_acc = /* Acc_data_string */__(4, [
              acc,
              new_acc_001
            ]);
          return make_printf(k, o, new_acc, fmt);
        });
    }
  }

  function make_int_padding_precision(k, o, acc, fmt, pad, prec, trans, iconv) {
    if (typeof pad === "number") {
      if (typeof prec === "number") {
        if (prec !== 0) {
          return (function (p, x) {
              var str = fix_int_precision(p, _2(trans, iconv, x));
              return make_printf(k, o, /* Acc_data_string */__(4, [
                            acc,
                            str
                          ]), fmt);
            });
        } else {
          return (function (x) {
              var str = _2(trans, iconv, x);
              return make_printf(k, o, /* Acc_data_string */__(4, [
                            acc,
                            str
                          ]), fmt);
            });
        }
      } else {
        var p = prec[0];
        return (function (x) {
            var str = fix_int_precision(p, _2(trans, iconv, x));
            return make_printf(k, o, /* Acc_data_string */__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else if (pad.tag) {
      var padty = pad[0];
      if (typeof prec === "number") {
        if (prec !== 0) {
          return (function (w, p, x) {
              var str = fix_padding(padty, w, fix_int_precision(p, _2(trans, iconv, x)));
              return make_printf(k, o, /* Acc_data_string */__(4, [
                            acc,
                            str
                          ]), fmt);
            });
        } else {
          return (function (w, x) {
              var str = fix_padding(padty, w, _2(trans, iconv, x));
              return make_printf(k, o, /* Acc_data_string */__(4, [
                            acc,
                            str
                          ]), fmt);
            });
        }
      } else {
        var p$1 = prec[0];
        return (function (w, x) {
            var str = fix_padding(padty, w, fix_int_precision(p$1, _2(trans, iconv, x)));
            return make_printf(k, o, /* Acc_data_string */__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    } else {
      var w = pad[1];
      var padty$1 = pad[0];
      if (typeof prec === "number") {
        if (prec !== 0) {
          return (function (p, x) {
              var str = fix_padding(padty$1, w, fix_int_precision(p, _2(trans, iconv, x)));
              return make_printf(k, o, /* Acc_data_string */__(4, [
                            acc,
                            str
                          ]), fmt);
            });
        } else {
          return (function (x) {
              var str = fix_padding(padty$1, w, _2(trans, iconv, x));
              return make_printf(k, o, /* Acc_data_string */__(4, [
                            acc,
                            str
                          ]), fmt);
            });
        }
      } else {
        var p$2 = prec[0];
        return (function (x) {
            var str = fix_padding(padty$1, w, fix_int_precision(p$2, _2(trans, iconv, x)));
            return make_printf(k, o, /* Acc_data_string */__(4, [
                          acc,
                          str
                        ]), fmt);
          });
      }
    }
  }

  function make_custom(k, o, acc, rest, arity, f) {
    if (arity) {
      var arity$1 = arity[0];
      return (function (x) {
          return make_custom(k, o, acc, rest, arity$1, _1(f, x));
        });
    } else {
      return make_printf(k, o, /* Acc_data_string */__(4, [
                    acc,
                    f
                  ]), rest);
    }
  }

  function strput_acc(b, _acc) {
    while(true) {
      var acc = _acc;
      var exit$$1 = 0;
      if (typeof acc === "number") {
        return /* () */0;
      } else {
        switch (acc.tag | 0) {
          case 0 : 
              var s = string_of_formatting_lit(acc[1]);
              strput_acc(b, acc[0]);
              return add_string(b, s);
          case 1 : 
              var match = acc[1];
              var p = acc[0];
              strput_acc(b, p);
              if (match.tag) {
                add_string(b, "@[");
                _acc = match[0];
                continue ;
              } else {
                add_string(b, "@{");
                _acc = match[0];
                continue ;
              }
          case 2 : 
          case 4 : 
              exit$$1 = 1;
              break;
          case 3 : 
          case 5 : 
              exit$$1 = 2;
              break;
          case 6 : 
              strput_acc(b, acc[0]);
              return add_string(b, _1(acc[1], /* () */0));
          case 7 : 
              _acc = acc[0];
              continue ;
          case 8 : 
              strput_acc(b, acc[0]);
              throw [
                    invalid_argument,
                    acc[1]
                  ];
          
        }
      }
      switch (exit$$1) {
        case 1 : 
            strput_acc(b, acc[0]);
            return add_string(b, acc[1]);
        case 2 : 
            strput_acc(b, acc[0]);
            return add_char(b, acc[1]);
        
      }
    }}
  /* No side effect */

  function ksprintf(k, param) {
    var k$prime = function (_, acc) {
      var buf = create$1(64);
      strput_acc(buf, acc);
      return _1(k, contents(buf));
    };
    return make_printf(k$prime, /* () */0, /* End_of_acc */0, param[0]);
  }

  function sprintf(fmt) {
    return ksprintf((function (s) {
                  return s;
                }), fmt);
  }
  /* No side effect */

  function classify(x) {
    var ty = typeof x;
    if (ty === "string") {
      return /* JSONString */__(0, [x]);
    } else if (ty === "number") {
      return /* JSONNumber */__(1, [x]);
    } else if (ty === "boolean") {
      if (x === true) {
        return /* JSONTrue */1;
      } else {
        return /* JSONFalse */0;
      }
    } else if (x === null) {
      return /* JSONNull */2;
    } else if (Array.isArray(x)) {
      return /* JSONArray */__(3, [x]);
    } else {
      return /* JSONObject */__(2, [x]);
    }
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  var classify$1 = classify;
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function error(param) {
    if (param.tag) {
      return some(param[0]);
    }
    
  }

  function first(fst, e) {
    if (e.tag) {
      return e;
    } else {
      return fst;
    }
  }

  function error_of_first(fst, param) {
    if (param.tag) {
      return some(param[0]);
    } else {
      return error(fst);
    }
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function height(param) {
    if (param) {
      return param[4];
    } else {
      return 0;
    }
  }

  function create$2(l, x, d, r) {
    var hl = height(l);
    var hr = height(r);
    return /* Node */[
            l,
            x,
            d,
            r,
            hl >= hr ? hl + 1 | 0 : hr + 1 | 0
          ];
  }

  function singleton(x, d) {
    return /* Node */[
            /* Empty */0,
            x,
            d,
            /* Empty */0,
            1
          ];
  }

  function bal(l, x, d, r) {
    var hl = l ? l[4] : 0;
    var hr = r ? r[4] : 0;
    if (hl > (hr + 2 | 0)) {
      if (l) {
        var lr = l[3];
        var ld = l[2];
        var lv = l[1];
        var ll = l[0];
        if (height(ll) >= height(lr)) {
          return create$2(ll, lv, ld, create$2(lr, x, d, r));
        } else if (lr) {
          return create$2(create$2(ll, lv, ld, lr[0]), lr[1], lr[2], create$2(lr[3], x, d, r));
        } else {
          throw [
                invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              invalid_argument,
              "Map.bal"
            ];
      }
    } else if (hr > (hl + 2 | 0)) {
      if (r) {
        var rr = r[3];
        var rd = r[2];
        var rv = r[1];
        var rl = r[0];
        if (height(rr) >= height(rl)) {
          return create$2(create$2(l, x, d, rl), rv, rd, rr);
        } else if (rl) {
          return create$2(create$2(l, x, d, rl[0]), rl[1], rl[2], create$2(rl[3], rv, rd, rr));
        } else {
          throw [
                invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        throw [
              invalid_argument,
              "Map.bal"
            ];
      }
    } else {
      return /* Node */[
              l,
              x,
              d,
              r,
              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            ];
    }
  }

  function is_empty(param) {
    if (param) {
      return false;
    } else {
      return true;
    }
  }

  function add$1(x, data, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = caml_string_compare(x, v);
      if (c === 0) {
        return /* Node */[
                l,
                x,
                data,
                r,
                param[4]
              ];
      } else if (c < 0) {
        return bal(add$1(x, data, l), v, d, r);
      } else {
        return bal(l, v, d, add$1(x, data, r));
      }
    } else {
      return /* Node */[
              /* Empty */0,
              x,
              data,
              /* Empty */0,
              1
            ];
    }
  }

  function find$1(x, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var c = caml_string_compare(x, param[1]);
        if (c === 0) {
          return param[2];
        } else {
          _param = c < 0 ? param[0] : param[3];
          continue ;
        }
      } else {
        throw not_found;
      }
    }}

  function mem$1(x, _param) {
    while(true) {
      var param = _param;
      if (param) {
        var c = caml_string_compare(x, param[1]);
        if (c === 0) {
          return true;
        } else {
          _param = c < 0 ? param[0] : param[3];
          continue ;
        }
      } else {
        return false;
      }
    }}

  function min_binding(_param) {
    while(true) {
      var param = _param;
      if (param) {
        var l = param[0];
        if (l) {
          _param = l;
          continue ;
        } else {
          return /* tuple */[
                  param[1],
                  param[2]
                ];
        }
      } else {
        throw not_found;
      }
    }}

  function max_binding(_param) {
    while(true) {
      var param = _param;
      if (param) {
        var r = param[3];
        if (r) {
          _param = r;
          continue ;
        } else {
          return /* tuple */[
                  param[1],
                  param[2]
                ];
        }
      } else {
        throw not_found;
      }
    }}

  function remove_min_binding(param) {
    if (param) {
      var l = param[0];
      if (l) {
        return bal(remove_min_binding(l), param[1], param[2], param[3]);
      } else {
        return param[3];
      }
    } else {
      throw [
            invalid_argument,
            "Map.remove_min_elt"
          ];
    }
  }

  function remove(x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = caml_string_compare(x, v);
      if (c === 0) {
        var t1 = l;
        var t2 = r;
        if (t1) {
          if (t2) {
            var match = min_binding(t2);
            return bal(t1, match[0], match[1], remove_min_binding(t2));
          } else {
            return t1;
          }
        } else {
          return t2;
        }
      } else if (c < 0) {
        return bal(remove(x, l), v, d, r);
      } else {
        return bal(l, v, d, remove(x, r));
      }
    } else {
      return /* Empty */0;
    }
  }

  function iter$4(f, _param) {
    while(true) {
      var param = _param;
      if (param) {
        iter$4(f, param[0]);
        _2(f, param[1], param[2]);
        _param = param[3];
        continue ;
      } else {
        return /* () */0;
      }
    }}

  function map$4(f, param) {
    if (param) {
      var l$prime = map$4(f, param[0]);
      var d$prime = _1(f, param[2]);
      var r$prime = map$4(f, param[3]);
      return /* Node */[
              l$prime,
              param[1],
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  }

  function mapi$5(f, param) {
    if (param) {
      var v = param[1];
      var l$prime = mapi$5(f, param[0]);
      var d$prime = _2(f, v, param[2]);
      var r$prime = mapi$5(f, param[3]);
      return /* Node */[
              l$prime,
              v,
              d$prime,
              r$prime,
              param[4]
            ];
    } else {
      return /* Empty */0;
    }
  }

  function fold(f, _m, _accu) {
    while(true) {
      var accu = _accu;
      var m = _m;
      if (m) {
        _accu = _3(f, m[1], m[2], fold(f, m[0], accu));
        _m = m[3];
        continue ;
      } else {
        return accu;
      }
    }}

  function for_all$1(p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (_2(p, param[1], param[2]) && for_all$1(p, param[0])) {
          _param = param[3];
          continue ;
        } else {
          return false;
        }
      } else {
        return true;
      }
    }}

  function exists$1(p, _param) {
    while(true) {
      var param = _param;
      if (param) {
        if (_2(p, param[1], param[2]) || exists$1(p, param[0])) {
          return true;
        } else {
          _param = param[3];
          continue ;
        }
      } else {
        return false;
      }
    }}

  function add_min_binding(k, v, param) {
    if (param) {
      return bal(add_min_binding(k, v, param[0]), param[1], param[2], param[3]);
    } else {
      return singleton(k, v);
    }
  }

  function add_max_binding(k, v, param) {
    if (param) {
      return bal(param[0], param[1], param[2], add_max_binding(k, v, param[3]));
    } else {
      return singleton(k, v);
    }
  }

  function join(l, v, d, r) {
    if (l) {
      if (r) {
        var rh = r[4];
        var lh = l[4];
        if (lh > (rh + 2 | 0)) {
          return bal(l[0], l[1], l[2], join(l[3], v, d, r));
        } else if (rh > (lh + 2 | 0)) {
          return bal(join(l, v, d, r[0]), r[1], r[2], r[3]);
        } else {
          return create$2(l, v, d, r);
        }
      } else {
        return add_max_binding(v, d, l);
      }
    } else {
      return add_min_binding(v, d, r);
    }
  }

  function concat$4(t1, t2) {
    if (t1) {
      if (t2) {
        var match = min_binding(t2);
        return join(t1, match[0], match[1], remove_min_binding(t2));
      } else {
        return t1;
      }
    } else {
      return t2;
    }
  }

  function concat_or_join(t1, v, d, t2) {
    if (d !== undefined) {
      return join(t1, v, valFromOption(d), t2);
    } else {
      return concat$4(t1, t2);
    }
  }

  function split$1(x, param) {
    if (param) {
      var r = param[3];
      var d = param[2];
      var v = param[1];
      var l = param[0];
      var c = caml_string_compare(x, v);
      if (c === 0) {
        return /* tuple */[
                l,
                some(d),
                r
              ];
      } else if (c < 0) {
        var match = split$1(x, l);
        return /* tuple */[
                match[0],
                match[1],
                join(match[2], v, d, r)
              ];
      } else {
        var match$1 = split$1(x, r);
        return /* tuple */[
                join(l, v, d, match$1[0]),
                match$1[1],
                match$1[2]
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              undefined,
              /* Empty */0
            ];
    }
  }

  function merge$1(f, s1, s2) {
    var exit$$1 = 0;
    if (s1) {
      var v1 = s1[1];
      if (s1[4] >= height(s2)) {
        var match = split$1(v1, s2);
        return concat_or_join(merge$1(f, s1[0], match[0]), v1, _3(f, v1, some(s1[2]), match[1]), merge$1(f, s1[3], match[2]));
      } else {
        exit$$1 = 1;
      }
    } else if (s2) {
      exit$$1 = 1;
    } else {
      return /* Empty */0;
    }
    if (exit$$1 === 1) {
      if (s2) {
        var v2 = s2[1];
        var match$1 = split$1(v2, s1);
        return concat_or_join(merge$1(f, match$1[0], s2[0]), v2, _3(f, v2, match$1[1], some(s2[2])), merge$1(f, match$1[2], s2[3]));
      } else {
        throw [
              assert_failure,
              /* tuple */[
                "map.ml",
                270,
                10
              ]
            ];
      }
    }
    
  }

  function filter$1(p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var l$prime = filter$1(p, param[0]);
      var pvd = _2(p, v, d);
      var r$prime = filter$1(p, param[3]);
      if (pvd) {
        return join(l$prime, v, d, r$prime);
      } else {
        return concat$4(l$prime, r$prime);
      }
    } else {
      return /* Empty */0;
    }
  }

  function partition$1(p, param) {
    if (param) {
      var d = param[2];
      var v = param[1];
      var match = partition$1(p, param[0]);
      var lf = match[1];
      var lt = match[0];
      var pvd = _2(p, v, d);
      var match$1 = partition$1(p, param[3]);
      var rf = match$1[1];
      var rt = match$1[0];
      if (pvd) {
        return /* tuple */[
                join(lt, v, d, rt),
                concat$4(lf, rf)
              ];
      } else {
        return /* tuple */[
                concat$4(lt, rt),
                join(lf, v, d, rf)
              ];
      }
    } else {
      return /* tuple */[
              /* Empty */0,
              /* Empty */0
            ];
    }
  }

  function cons_enum(_m, _e) {
    while(true) {
      var e = _e;
      var m = _m;
      if (m) {
        _e = /* More */[
          m[1],
          m[2],
          m[3],
          e
        ];
        _m = m[0];
        continue ;
      } else {
        return e;
      }
    }}

  function compare$4(cmp, m1, m2) {
    var _e1 = cons_enum(m1, /* End */0);
    var _e2 = cons_enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (e1) {
        if (e2) {
          var c = caml_string_compare(e1[0], e2[0]);
          if (c !== 0) {
            return c;
          } else {
            var c$1 = _2(cmp, e1[1], e2[1]);
            if (c$1 !== 0) {
              return c$1;
            } else {
              _e2 = cons_enum(e2[2], e2[3]);
              _e1 = cons_enum(e1[2], e1[3]);
              continue ;
            }
          }
        } else {
          return 1;
        }
      } else if (e2) {
        return -1;
      } else {
        return 0;
      }
    }}

  function equal(cmp, m1, m2) {
    var _e1 = cons_enum(m1, /* End */0);
    var _e2 = cons_enum(m2, /* End */0);
    while(true) {
      var e2 = _e2;
      var e1 = _e1;
      if (e1) {
        if (e2 && caml_string_compare(e1[0], e2[0]) === 0 && _2(cmp, e1[1], e2[1])) {
          _e2 = cons_enum(e2[2], e2[3]);
          _e1 = cons_enum(e1[2], e1[3]);
          continue ;
        } else {
          return false;
        }
      } else if (e2) {
        return false;
      } else {
        return true;
      }
    }}

  function cardinal(param) {
    if (param) {
      return (cardinal(param[0]) + 1 | 0) + cardinal(param[3]) | 0;
    } else {
      return 0;
    }
  }

  function bindings_aux(_accu, _param) {
    while(true) {
      var param = _param;
      var accu = _accu;
      if (param) {
        _param = param[0];
        _accu = /* :: */[
          /* tuple */[
            param[1],
            param[2]
          ],
          bindings_aux(accu, param[3])
        ];
        continue ;
      } else {
        return accu;
      }
    }}

  function bindings(s) {
    return bindings_aux(/* [] */0, s);
  }

  var ObjectDict = [
    /* Empty */0,
    is_empty,
    mem$1,
    add$1,
    singleton,
    remove,
    merge$1,
    compare$4,
    equal,
    iter$4,
    fold,
    for_all$1,
    exists$1,
    filter$1,
    partition$1,
    cardinal,
    bindings,
    min_binding,
    max_binding,
    min_binding,
    split$1,
    find$1,
    map$4,
    mapi$5
  ];

  var ParseFail = create("Tea_json.Decoder.ParseFail");

  var string = /* Decoder */[(function (value) {
        var match = classify$1(value);
        if (typeof match === "number" || match.tag) {
          return /* Error */__(1, ["Non-string value"]);
        } else {
          return /* Ok */__(0, [match[0]]);
        }
      })];

  var $$int = /* Decoder */[(function (value) {
        var match = classify$1(value);
        if (typeof match === "number" || match.tag !== 1) {
          return /* Error */__(1, ["Non-int value"]);
        } else {
          var n = match[0];
          if (n > min_int$1 && n < max_int$1) {
            return /* Ok */__(0, [n | 0]);
          } else {
            return /* Error */__(1, ["number out of int range"]);
          }
        }
      })];

  var $$float = /* Decoder */[(function (value) {
        var match = classify$1(value);
        if (typeof match === "number" || match.tag !== 1) {
          return /* Error */__(1, ["Non-float-value"]);
        } else {
          return /* Ok */__(0, [match[0]]);
        }
      })];

  var bool = /* Decoder */[(function (value) {
        var match = classify$1(value);
        if (typeof match === "number") {
          switch (match) {
            case 0 : 
                return /* Ok */__(0, [false]);
            case 1 : 
                return /* Ok */__(0, [true]);
            case 2 : 
                return /* Error */__(1, ["Non-boolean value"]);
            
          }
        } else {
          return /* Error */__(1, ["Non-boolean value"]);
        }
      })];

  function $$null$1(v) {
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" && match >= 2) {
                  return /* Ok */__(0, [v]);
                } else {
                  return /* Error */__(1, ["Non-null value"]);
                }
              })];
  }

  function list(param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" || match.tag !== 3) {
                  return /* Error */__(1, ["Non-list value"]);
                } else {
                  var parse = function (v) {
                    var match = _1(decoder, v);
                    if (match.tag) {
                      throw [
                            ParseFail,
                            match[0]
                          ];
                    } else {
                      return match[0];
                    }
                  };
                  try {
                    return /* Ok */__(0, [map(parse, to_list(match[0]))]);
                  }
                  catch (raw_exn){
                    var exn = internalToOCamlException(raw_exn);
                    if (exn[0] === ParseFail) {
                      return /* Error */__(1, ["list -> " + exn[1]]);
                    } else {
                      throw exn;
                    }
                  }
                }
              })];
  }

  function array(param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" || match.tag !== 3) {
                  return /* Error */__(1, ["Non-array value"]);
                } else {
                  var parse = function (v) {
                    var match = _1(decoder, v);
                    if (match.tag) {
                      throw [
                            ParseFail,
                            match[0]
                          ];
                    } else {
                      return match[0];
                    }
                  };
                  try {
                    return /* Ok */__(0, [map$1(parse, match[0])]);
                  }
                  catch (raw_exn){
                    var exn = internalToOCamlException(raw_exn);
                    if (exn[0] === ParseFail) {
                      return /* Error */__(1, ["array -> " + exn[1]]);
                    } else {
                      throw exn;
                    }
                  }
                }
              })];
  }

  function keyValuePairs(param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" || match.tag !== 2) {
                  return /* Error */__(1, ["Non-keyValuePair value"]);
                } else {
                  var o = match[0];
                  var keys = Object.keys(o);
                  var parse = function (k, l) {
                    var match = o[k];
                    if (match !== undefined) {
                      var match$1 = _1(decoder, match);
                      if (match$1.tag) {
                        throw [
                              ParseFail,
                              match$1[0]
                            ];
                      } else {
                        return /* :: */[
                                /* tuple */[
                                  k,
                                  match$1[0]
                                ],
                                l
                              ];
                      }
                    } else {
                      throw [
                            ParseFail,
                            "Key is undefined: " + k
                          ];
                    }
                  };
                  try {
                    return /* Ok */__(0, [fold_right$1(parse, keys, /* [] */0)]);
                  }
                  catch (raw_exn){
                    var exn = internalToOCamlException(raw_exn);
                    if (exn[0] === ParseFail) {
                      return /* Error */__(1, ["Invalid keyValuePair parsing: " + exn[1]]);
                    } else {
                      throw exn;
                    }
                  }
                }
              })];
  }

  function dict(param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" || match.tag !== 2) {
                  return /* Error */__(1, ["Non-dict value"]);
                } else {
                  var o = match[0];
                  var keys = Object.keys(o);
                  var parse = function (k, d) {
                    var match = o[k];
                    if (match !== undefined) {
                      var match$1 = _1(decoder, match);
                      if (match$1.tag) {
                        throw [
                              ParseFail,
                              match$1[0]
                            ];
                      } else {
                        return add$1(k, match$1[0], d);
                      }
                    } else {
                      throw [
                            ParseFail,
                            "Key is undefined: " + k
                          ];
                    }
                  };
                  try {
                    return /* Ok */__(0, [fold_right$1(parse, keys, /* Empty */0)]);
                  }
                  catch (raw_exn){
                    var exn = internalToOCamlException(raw_exn);
                    if (exn[0] === ParseFail) {
                      return /* Error */__(1, ["Invalid dict parsing: " + exn[1]]);
                    } else {
                      throw exn;
                    }
                  }
                }
              })];
  }

  function field(key, param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" || match.tag !== 2) {
                  return /* Error */__(1, ["Non-fieldable value"]);
                } else {
                  var match$1 = match[0][key];
                  if (match$1 !== undefined) {
                    var o = _1(decoder, match$1);
                    if (o.tag) {
                      return /* Error */__(1, ["field `" + (key + ("` -> " + o[0]))]);
                    } else {
                      return o;
                    }
                  } else {
                    return /* Error */__(1, ["Field Value is undefined: " + key]);
                  }
                }
              })];
  }

  function at(fields, dec) {
    return fold_right(field, fields, dec);
  }

  function index$2(idx, param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = classify$1(value);
                if (typeof match === "number" || match.tag !== 3) {
                  return /* Error */__(1, ["Non-array value"]);
                } else {
                  var a = match[0];
                  if (idx < 0 || idx > a.length) {
                    return /* Error */__(1, ["Array index out of range: " + String(idx)]);
                  } else {
                    return _1(decoder, caml_array_get(a, idx));
                  }
                }
              })];
  }

  function maybe(param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder, value);
                if (match.tag) {
                  return /* Ok */__(0, [undefined]);
                } else {
                  return /* Ok */__(0, [some(match[0])]);
                }
              })];
  }

  function oneOf(decoders) {
    return /* Decoder */[(function (value) {
                var parse = function (v, _param) {
                  while(true) {
                    var param = _param;
                    if (param) {
                      var rest = param[1];
                      try {
                        var ok$$1 = _1(param[0][0], v);
                        if (ok$$1.tag) {
                          return parse(v, rest);
                        } else {
                          return ok$$1;
                        }
                      }
                      catch (exn){
                        _param = rest;
                        continue ;
                      }
                    } else {
                      return /* Error */__(1, ["No one-of's matched"]);
                    }
                  }              };
                return parse(value, decoders);
              })];
  }

  function map$1$1(mapper, param) {
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                if (match.tag) {
                  return /* Error */__(1, ["map " + match[0]]);
                } else {
                  return /* Ok */__(0, [_1(mapper, match[0])]);
                }
              })];
  }

  function map2$1(mapper, param, param$1) {
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_2(mapper, match[0], match$1[0])]);
                }
                if (exit$$1 === 1) {
                  var match$2 = error_of_first(match, match$1);
                  if (match$2 !== undefined) {
                    return /* Error */__(1, ["map2 -> " + match$2]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function map3(mapper, param, param$1, param$2) {
    var decoder3 = param$2[0];
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var match$2 = _1(decoder3, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag || match$2.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_3(mapper, match[0], match$1[0], match$2[0])]);
                }
                if (exit$$1 === 1) {
                  var match$3 = first(match$2, first(match$1, match));
                  if (match$3.tag) {
                    return /* Error */__(1, ["map3 -> " + match$3[0]]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function map4(mapper, param, param$1, param$2, param$3) {
    var decoder4 = param$3[0];
    var decoder3 = param$2[0];
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var match$2 = _1(decoder3, value);
                var match$3 = _1(decoder4, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag || match$2.tag || match$3.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_4(mapper, match[0], match$1[0], match$2[0], match$3[0])]);
                }
                if (exit$$1 === 1) {
                  var match$4 = first(match$3, first(match$2, first(match$1, match)));
                  if (match$4.tag) {
                    return /* Error */__(1, ["map4 -> " + match$4[0]]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function map5(mapper, param, param$1, param$2, param$3, param$4) {
    var decoder5 = param$4[0];
    var decoder4 = param$3[0];
    var decoder3 = param$2[0];
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var match$2 = _1(decoder3, value);
                var match$3 = _1(decoder4, value);
                var match$4 = _1(decoder5, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_5(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0])]);
                }
                if (exit$$1 === 1) {
                  var match$5 = first(match$4, first(match$3, first(match$2, first(match$1, match))));
                  if (match$5.tag) {
                    return /* Error */__(1, ["map5 -> " + match$5[0]]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function map6(mapper, param, param$1, param$2, param$3, param$4, param$5) {
    var decoder6 = param$5[0];
    var decoder5 = param$4[0];
    var decoder4 = param$3[0];
    var decoder3 = param$2[0];
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var match$2 = _1(decoder3, value);
                var match$3 = _1(decoder4, value);
                var match$4 = _1(decoder5, value);
                var match$5 = _1(decoder6, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_6(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0])]);
                }
                if (exit$$1 === 1) {
                  var match$6 = first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match)))));
                  if (match$6.tag) {
                    return /* Error */__(1, ["map6 -> " + match$6[0]]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function map7(mapper, param, param$1, param$2, param$3, param$4, param$5, param$6) {
    var decoder7 = param$6[0];
    var decoder6 = param$5[0];
    var decoder5 = param$4[0];
    var decoder4 = param$3[0];
    var decoder3 = param$2[0];
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var match$2 = _1(decoder3, value);
                var match$3 = _1(decoder4, value);
                var match$4 = _1(decoder5, value);
                var match$5 = _1(decoder6, value);
                var match$6 = _1(decoder7, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag || match$6.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_7(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0])]);
                }
                if (exit$$1 === 1) {
                  var match$7 = first(match$6, first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match))))));
                  if (match$7.tag) {
                    return /* Error */__(1, ["map7 -> " + match$7[0]]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function map8(mapper, param, param$1, param$2, param$3, param$4, param$5, param$6, param$7) {
    var decoder8 = param$7[0];
    var decoder7 = param$6[0];
    var decoder6 = param$5[0];
    var decoder5 = param$4[0];
    var decoder4 = param$3[0];
    var decoder3 = param$2[0];
    var decoder2 = param$1[0];
    var decoder1 = param[0];
    return /* Decoder */[(function (value) {
                var match = _1(decoder1, value);
                var match$1 = _1(decoder2, value);
                var match$2 = _1(decoder3, value);
                var match$3 = _1(decoder4, value);
                var match$4 = _1(decoder5, value);
                var match$5 = _1(decoder6, value);
                var match$6 = _1(decoder7, value);
                var match$7 = _1(decoder8, value);
                var exit$$1 = 0;
                if (match.tag || match$1.tag || match$2.tag || match$3.tag || match$4.tag || match$5.tag || match$6.tag || match$7.tag) {
                  exit$$1 = 1;
                } else {
                  return /* Ok */__(0, [_8(mapper, match[0], match$1[0], match$2[0], match$3[0], match$4[0], match$5[0], match$6[0], match$7[0])]);
                }
                if (exit$$1 === 1) {
                  var match$8 = first(match$7, first(match$6, first(match$5, first(match$4, first(match$3, first(match$2, first(match$1, match)))))));
                  if (match$8.tag) {
                    return /* Error */__(1, ["map8 -> " + match$8[0]]);
                  } else {
                    throw [
                          failure,
                          "Impossible case"
                        ];
                  }
                }
                
              })];
  }

  function succeed(v) {
    return /* Decoder */[(function () {
                return /* Ok */__(0, [v]);
              })];
  }

  function fail(e) {
    return /* Decoder */[(function () {
                return /* Error */__(1, [e]);
              })];
  }

  var value = /* Decoder */[(function (value) {
        return /* Ok */__(0, [value]);
      })];

  function andThen(func, param) {
    var decoder = param[0];
    return /* Decoder */[(function (value) {
                var err = _1(decoder, value);
                if (err.tag) {
                  return err;
                } else {
                  var match = _1(func, err[0]);
                  return _1(match[0], value);
                }
              })];
  }

  function lazy_(func) {
    return andThen(func, /* Decoder */[(function () {
                    return /* Ok */__(0, [/* () */0]);
                  })]);
  }

  function nullable(decoder) {
    return oneOf(/* :: */[
                $$null$1(undefined),
                /* :: */[
                  map$1$1((function (v) {
                          return some(v);
                        }), decoder),
                  /* [] */0
                ]
              ]);
  }

  function decodeValue(param, value) {
    try {
      return _1(param[0], value);
    }
    catch (raw_exn){
      var exn = internalToOCamlException(raw_exn);
      if (exn[0] === ParseFail) {
        return /* Error */__(1, [exn[1]]);
      } else {
        return /* Error */__(1, ["Unknown JSON parsing error"]);
      }
    }
  }

  function decodeEvent(param, value) {
    try {
      return _1(param[0], value);
    }
    catch (raw_exn){
      var exn = internalToOCamlException(raw_exn);
      if (exn[0] === ParseFail) {
        return /* Error */__(1, [exn[1]]);
      } else {
        return /* Error */__(1, ["Unknown JSON parsing error"]);
      }
    }
  }

  function decodeString$2(decoder, string) {
    try {
      var value = JSON.parse(string);
      return decodeValue(decoder, value);
    }
    catch (exn){
      return /* Error */__(1, ["Invalid JSON string"]);
    }
  }

  var Decoder = /* module */[
    /* ObjectDict */ObjectDict,
    /* ParseFail */ParseFail,
    /* string */string,
    /* int */$$int,
    /* float */$$float,
    /* bool */bool,
    /* null */$$null$1,
    /* list */list,
    /* array */array,
    /* keyValuePairs */keyValuePairs,
    /* dict */dict,
    /* field */field,
    /* at */at,
    /* index */index$2,
    /* maybe */maybe,
    /* oneOf */oneOf,
    /* map */map$1$1,
    /* map2 */map2$1,
    /* map3 */map3,
    /* map4 */map4,
    /* map5 */map5,
    /* map6 */map6,
    /* map7 */map7,
    /* map8 */map8,
    /* succeed */succeed,
    /* fail */fail,
    /* value */value,
    /* andThen */andThen,
    /* lazy_ */lazy_,
    /* nullable */nullable,
    /* decodeValue */decodeValue,
    /* decodeEvent */decodeEvent,
    /* decodeString */decodeString$2
  ];
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE


  function append$2(key, value, f) {
    return f.append(key, value);
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function getAllResponseHeaders(x) {
    var match = x.getAllResponseHeaders();
    if (match !== null) {
      if (match === "") {
        return /* Error */__(1, [/* NetworkError */1]);
      } else {
        return /* Ok */__(0, [match]);
      }
    } else {
      return /* Error */__(1, [/* IncompleteResponse */0]);
    }
  }

  function getAllResponseHeadersAsList(x) {
    var err = getAllResponseHeaders(x);
    if (err.tag) {
      return err;
    } else {
      return /* Ok */__(0, [map((function (param) {
                        if (param.length !== 2) {
                          throw [
                                failure,
                                "Cannot happen, already checked length"
                              ];
                        } else {
                          var key = param[0];
                          var value = param[1];
                          return /* tuple */[
                                  key,
                                  value
                                ];
                        }
                      }), filter((function (a) {
                              return a.length === 2;
                            }))(to_list(map$1((function (param) {
                                    return param.split(": ", 2);
                                  }), err[0].split("\r\n")))))]);
    }
  }

  function getAllResponseHeadersAsDict(x) {
    var height = function (param) {
      if (param) {
        return param[4];
      } else {
        return 0;
      }
    };
    var create = function (l, x, d, r) {
      var hl = height(l);
      var hr = height(r);
      return /* Node */[
              l,
              x,
              d,
              r,
              hl >= hr ? hl + 1 | 0 : hr + 1 | 0
            ];
    };
    var bal = function (l, x, d, r) {
      var hl = l ? l[4] : 0;
      var hr = r ? r[4] : 0;
      if (hl > (hr + 2 | 0)) {
        if (l) {
          var lr = l[3];
          var ld = l[2];
          var lv = l[1];
          var ll = l[0];
          if (height(ll) >= height(lr)) {
            return create(ll, lv, ld, create(lr, x, d, r));
          } else if (lr) {
            return create(create(ll, lv, ld, lr[0]), lr[1], lr[2], create(lr[3], x, d, r));
          } else {
            throw [
                  invalid_argument,
                  "Map.bal"
                ];
          }
        } else {
          throw [
                invalid_argument,
                "Map.bal"
              ];
        }
      } else if (hr > (hl + 2 | 0)) {
        if (r) {
          var rr = r[3];
          var rd = r[2];
          var rv = r[1];
          var rl = r[0];
          if (height(rr) >= height(rl)) {
            return create(create(l, x, d, rl), rv, rd, rr);
          } else if (rl) {
            return create(create(l, x, d, rl[0]), rl[1], rl[2], create(rl[3], rv, rd, rr));
          } else {
            throw [
                  invalid_argument,
                  "Map.bal"
                ];
          }
        } else {
          throw [
                invalid_argument,
                "Map.bal"
              ];
        }
      } else {
        return /* Node */[
                l,
                x,
                d,
                r,
                hl >= hr ? hl + 1 | 0 : hr + 1 | 0
              ];
      }
    };
    var add = function (x, data, param) {
      if (param) {
        var r = param[3];
        var d = param[2];
        var v = param[1];
        var l = param[0];
        var c = caml_string_compare(x, v);
        if (c === 0) {
          return /* Node */[
                  l,
                  x,
                  data,
                  r,
                  param[4]
                ];
        } else if (c < 0) {
          return bal(add(x, data, l), v, d, r);
        } else {
          return bal(l, v, d, add(x, data, r));
        }
      } else {
        return /* Node */[
                /* Empty */0,
                x,
                data,
                /* Empty */0,
                1
              ];
      }
    };
    var err = getAllResponseHeadersAsList(x);
    if (err.tag) {
      return err;
    } else {
      var insert = function (d, param) {
        return add(param[0], param[1], d);
      };
      return /* Ok */__(0, [fold_left(insert, /* Empty */0, err[0])]);
    }
  }

  function open_(method$prime, url, $staropt$star, $staropt$star$1, $staropt$star$2, x) {
    var async = $staropt$star !== undefined ? $staropt$star : true;
    var user = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    var password = $staropt$star$2 !== undefined ? $staropt$star$2 : "";
    return x.open(method$prime, url, async, user, password);
  }

  function send(body, x) {
    if (typeof body === "number") {
      if (body === 0) {
        return x.send();
      } else {
        return x.send(null);
      }
    } else {
      switch (body.tag | 0) {
        case 0 : 
            return x.send(body[0]);
        case 1 : 
            return x.send(body[0]);
        case 2 : 
            var form = fold_left((function (f, param) {
                    append$2(param[0], param[1], f);
                    return f;
                  }), new FormData(), body[0]);
            return x.send(form);
        case 3 : 
            return x.send(body[0]);
        
      }
    }
  }

  function setRequestHeader(header, value, x) {
    return x.setRequestHeader(header, value);
  }

  function set_responseType(typ, x) {
    if (typeof typ === "number") {
      switch (typ) {
        case 0 : 
            x.responseType = "";
            return /* () */0;
        case 1 : 
            x.responseType = "arraybuffer";
            return /* () */0;
        case 2 : 
            x.responseType = "blob";
            return /* () */0;
        case 3 : 
            x.responseType = "document";
            return /* () */0;
        case 4 : 
            x.responseType = "json";
            return /* () */0;
        case 5 : 
            x.responseType = "text";
            return /* () */0;
        
      }
    } else {
      x.responseType = typ[0];
      return /* () */0;
    }
  }

  function get_responseType(x) {
    var s = x.responseType;
    switch (s) {
      case "" : 
          return /* StringResponseType */0;
      case "arraybuffer" : 
          return /* ArrayBufferResponseType */1;
      case "blob" : 
          return /* BlobResponseType */2;
      case "document" : 
          return /* DocumentResponseType */3;
      case "json" : 
          return /* JsonResponseType */4;
      case "text" : 
          return /* TextResponseType */5;
      default:
        return /* RawResponseType */[s];
    }
  }

  function get_response(x) {
    var match = x.response;
    if (match !== null) {
      var match$1 = get_responseType(x);
      if (typeof match$1 === "number") {
        switch (match$1) {
          case 0 : 
              return /* StringResponse */__(0, [match]);
          case 1 : 
              return /* ArrayBufferResponse */__(1, [match]);
          case 2 : 
              return /* BlobResponse */__(2, [match]);
          case 3 : 
              return /* DocumentResponse */__(3, [match]);
          case 4 : 
              return /* JsonResponse */__(4, [match]);
          case 5 : 
              return /* TextResponse */__(5, [match]);
          
        }
      } else {
        return /* RawResponse */__(6, [
                  match$1[0],
                  match
                ]);
      }
    } else {
      return /* NoResponse */0;
    }
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function string_of_error(param) {
    if (typeof param === "number") {
      switch (param) {
        case 0 : 
            return "Timeout";
        case 1 : 
            return "Unknown network error";
        case 2 : 
            return "Request aborted";
        
      }
    } else {
      switch (param.tag | 0) {
        case 0 : 
            return "Bad Url: " + param[0];
        case 1 : 
            return "Bad Status: " + param[0][/* url */0];
        case 2 : 
            return "Bad Payload: " + param[1][/* url */0];
        
      }
    }
  }

  function expectStringResponse(func) {
    return /* Expect */[
            /* TextResponseType */5,
            (function (param) {
                var body = param[/* body */3];
                if (typeof body === "number" || body.tag !== 5) {
                  return /* Error */__(1, ["Non-text response returned"]);
                } else {
                  return _1(func, body[0]);
                }
              })
          ];
  }

  var expectString = expectStringResponse((function (resString) {
          return /* Ok */__(0, [resString]);
        }));

  function getString(url) {
    return /* Request */[
            /* record */[
              /* method' */"GET",
              /* headers : [] */0,
              /* url */url,
              /* body : EmptyBody */0,
              /* expect */expectString,
              /* timeout */undefined,
              /* withCredentials */false
            ],
            undefined
          ];
  }

  function send$1(resultToMessage, param) {
    var maybeEvents = param[1];
    var request = param[0];
    var expect = request[/* expect */4];
    var responseToResult = expect[1];
    var typ = expect[0];
    var withCredentials = request[/* withCredentials */6];
    var timeout = request[/* timeout */5];
    var body = request[/* body */3];
    var url = request[/* url */2];
    var headers = request[/* headers */1];
    var method$prime = request[/* method' */0];
    return /* EnqueueCall */__(2, [(function (callbacks) {
                  var enqRes = function (result, _) {
                    return _1(callbacks[0][/* enqueue */0], _1(resultToMessage, result));
                  };
                  var xhr = new XMLHttpRequest();
                  if (maybeEvents !== undefined) {
                    var match = maybeEvents;
                    var mayCB = function (thenDo, param) {
                      if (param !== undefined) {
                        return _1(thenDo, _1(param, callbacks));
                      } else {
                        return /* () */0;
                      }
                    };
                    mayCB((function (param) {
                            xhr.onreadystatechange = param;
                            return /* () */0;
                          }), match[/* onreadystatechange */0]);
                    mayCB((function (param) {
                            xhr.onprogress = param;
                            return /* () */0;
                          }), match[/* onprogress */1]);
                  }
                  var partial_arg = /* Error */__(1, [/* NetworkError */1]);
                  var cb = function (param) {
                    return enqRes(partial_arg, param);
                  };
                  xhr.onerror = cb;
                  var partial_arg$1 = /* Error */__(1, [/* Timeout */0]);
                  var cb$1 = function (param) {
                    return enqRes(partial_arg$1, param);
                  };
                  xhr.ontimeout = cb$1;
                  var partial_arg$2 = /* Error */__(1, [/* Aborted */2]);
                  var cb$2 = function (param) {
                    return enqRes(partial_arg$2, param);
                  };
                  xhr.onabort = cb$2;
                  var cb$3 = function () {
                    var match = getAllResponseHeadersAsDict(xhr);
                    var headers;
                    headers = match.tag ? /* Empty */0 : match[0];
                    var response_000 = /* url */xhr.responseURL;
                    var response_001 = /* status : record */[
                      /* code */xhr.status,
                      /* message */xhr.statusText
                    ];
                    var response_003 = /* body */get_response(xhr);
                    var response = /* record */[
                      response_000,
                      response_001,
                      /* headers */headers,
                      response_003
                    ];
                    if (response_001[/* code */0] < 200 || 300 <= response_001[/* code */0]) {
                      var partial_arg = /* Error */__(1, [/* BadStatus */__(1, [response])]);
                      return (function (param) {
                                  return enqRes(partial_arg, param);
                                })(/* () */0);
                    } else {
                      var match$1 = _1(responseToResult, response);
                      if (match$1.tag) {
                        var partial_arg$1 = /* Error */__(1, [/* BadPayload */__(2, [
                                match$1[0],
                                response
                              ])]);
                        return (function (param) {
                                    return enqRes(partial_arg$1, param);
                                  })(/* () */0);
                      } else {
                        var partial_arg$2 = /* Ok */__(0, [match$1[0]]);
                        return (function (param) {
                                    return enqRes(partial_arg$2, param);
                                  })(/* () */0);
                      }
                    }
                  };
                  xhr.onload = cb$3;
                  try {
                    open_(method$prime, url, undefined, undefined, undefined, xhr);
                  }
                  catch (exn){
                    var partial_arg$3 = /* Error */__(1, [/* BadUrl */__(0, [url])]);
                    ((function (param) {
                            return enqRes(partial_arg$3, param);
                          })(/* () */0));
                  }
                  var setHeader = function (param) {
                    return setRequestHeader(param[0], param[1], xhr);
                  };
                  iter(setHeader, headers);
                  set_responseType(typ, xhr);
                  if (timeout !== undefined) {
                    xhr.timeout = timeout;
                  }
                  xhr.withCredentials = withCredentials;
                  send(body, xhr);
                  return /* () */0;
                })]);
  }
  /* expectString Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function requestAnimationFrame(callback) {
    return window.requestAnimationFrame(callback);
  }

  function addEventListener$1(typ, listener, options) {
    return window.addEventListener(typ, listener, options);
  }

  function removeEventListener(typ, listener, options) {
    return window.removeEventListener(typ, listener, options);
  }

  function requestAnimationFrame_polyfill() {
    return (
    // requestAnimationFrame polyfill
    (function() {
        var lastTime = 0;
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for(var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
            window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
            window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame']
                                       || window[vendors[x]+'CancelRequestAnimationFrame'];
        }

        if (!window.requestAnimationFrame)
            window.requestAnimationFrame = function(callback, element) {
                var currTime = new Date().getTime();
                var timeToCall = Math.max(0, 16 - (currTime - lastTime));
                var id = window.setTimeout(function() { callback(currTime + timeToCall); },
                  timeToCall);
                lastTime = currTime + timeToCall;
                return id;
            };

        if (!window.cancelAnimationFrame)
            window.cancelAnimationFrame = function(id) {
                clearTimeout(id);
            };
    }())
    );
  }
  /* No side effect */

  function _isInteger(value) {
    if (isFinite(value)) {
      return Math.floor(value) === value;
    } else {
      return false;
    }
  }

  var DecodeError = create("Json_decode.DecodeError");

  function $$float$2(json) {
    if (typeof json === "number") {
      return json;
    } else {
      throw [
            DecodeError,
            "Expected number, got " + JSON.stringify(json)
          ];
    }
  }

  function $$int$2(json) {
    var f = $$float$2(json);
    if (_isInteger(f)) {
      return f;
    } else {
      throw [
            DecodeError,
            "Expected integer, got " + JSON.stringify(json)
          ];
    }
  }

  function string$2(json) {
    if (typeof json === "string") {
      return json;
    } else {
      throw [
            DecodeError,
            "Expected string, got " + JSON.stringify(json)
          ];
    }
  }

  function array$2(decode, json) {
    if (Array.isArray(json)) {
      var length$$1 = json.length;
      var target = new Array(length$$1);
      for(var i = 0 ,i_finish = length$$1 - 1 | 0; i <= i_finish; ++i){
        var value;
        try {
          value = _1(decode, json[i]);
        }
        catch (raw_exn){
          var exn = internalToOCamlException(raw_exn);
          if (exn[0] === DecodeError) {
            throw [
                  DecodeError,
                  exn[1] + ("\n\tin array at index " + String(i))
                ];
          } else {
            throw exn;
          }
        }
        target[i] = value;
      }
      return target;
    } else {
      throw [
            DecodeError,
            "Expected array, got " + JSON.stringify(json)
          ];
    }
  }

  function dict$1(decode, json) {
    if (typeof json === "object" && !Array.isArray(json) && json !== null) {
      var keys = Object.keys(json);
      var l = keys.length;
      var target = { };
      for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
        var key = keys[i];
        var value;
        try {
          value = _1(decode, json[key]);
        }
        catch (raw_exn){
          var exn = internalToOCamlException(raw_exn);
          if (exn[0] === DecodeError) {
            throw [
                  DecodeError,
                  exn[1] + "\n\tin dict"
                ];
          } else {
            throw exn;
          }
        }
        target[key] = value;
      }
      return target;
    } else {
      throw [
            DecodeError,
            "Expected object, got " + JSON.stringify(json)
          ];
    }
  }

  function field$1(key, decode, json) {
    if (typeof json === "object" && !Array.isArray(json) && json !== null) {
      var match = json[key];
      if (match !== undefined) {
        try {
          return _1(decode, match);
        }
        catch (raw_exn){
          var exn = internalToOCamlException(raw_exn);
          if (exn[0] === DecodeError) {
            throw [
                  DecodeError,
                  exn[1] + ("\n\tat field '" + (key + "'"))
                ];
          } else {
            throw exn;
          }
        }
      } else {
        throw [
              DecodeError,
              "Expected field \'" + (String(key) + "\'")
            ];
      }
    } else {
      throw [
            DecodeError,
            "Expected object, got " + JSON.stringify(json)
          ];
    }
  }

  function optional(decode, json) {
    try {
      return some(_1(decode, json));
    }
    catch (raw_exn){
      var exn = internalToOCamlException(raw_exn);
      if (exn[0] === DecodeError) {
        return undefined;
      } else {
        throw exn;
      }
    }
  }

  function oneOf$1(decoders, json) {
    var _decoders = decoders;
    var _errors = /* [] */0;
    while(true) {
      var errors = _errors;
      var decoders$1 = _decoders;
      if (decoders$1) {
        try {
          return _1(decoders$1[0], json);
        }
        catch (raw_exn){
          var exn = internalToOCamlException(raw_exn);
          if (exn[0] === DecodeError) {
            _errors = /* :: */[
              exn[1],
              errors
            ];
            _decoders = decoders$1[1];
            continue ;
          } else {
            throw exn;
          }
        }
      } else {
        var revErrors = rev(errors);
        throw [
              DecodeError,
              "All decoders given to oneOf failed. Here are all the errors: " + (String(revErrors) + ". And the JSON being decoded: ") + JSON.stringify(json)
            ];
      }
    }}

  function either(a, b) {
    var partial_arg_001 = /* :: */[
      b,
      /* [] */0
    ];
    var partial_arg = /* :: */[
      a,
      partial_arg_001
    ];
    return (function (param) {
        return oneOf$1(partial_arg, param);
      });
  }

  function map$5(f, decode, json) {
    return _1(f, _1(decode, json));
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE


  function body() {
    return document.body;
  }

  function getElementById(id) {
    return document.getElementById(id);
  }

  function createElementNsOptional(namespace, tagName) {
    if (namespace === "") {
      return document.createElement(tagName);
    } else {
      return document.createElementNS(namespace, tagName);
    }
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function extractSearchParams(params) {
    var lookfor;
    var exit = 0;
    var val;
    try {
      val = find((function (param) {
              return param[0] === "lookfor";
            }), params);
      exit = 1;
    }
    catch (exn){
      if (exn === not_found) {
        lookfor = "";
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      lookfor = decodeURIComponent(val[1]);
    }
    var page;
    var exit$1 = 0;
    var val$1;
    try {
      val$1 = find((function (param) {
              return param[0] === "page";
            }), params);
      exit$1 = 1;
    }
    catch (exn$1){
      if (exn$1 === not_found) {
        page = "0";
      } else {
        throw exn$1;
      }
    }
    if (exit$1 === 1) {
      page = val$1[1];
    }
    var limit;
    var exit$2 = 0;
    var val$2;
    try {
      val$2 = find((function (param) {
              return param[0] === "limit";
            }), params);
      exit$2 = 1;
    }
    catch (exn$2){
      if (exn$2 === not_found) {
        limit = "10";
      } else {
        throw exn$2;
      }
    }
    if (exit$2 === 1) {
      limit = val$2[1];
    }
    var filters = filter((function (param) {
              return param[0] === "filter[]";
            }))(params);
    var filters$1 = map((function (param) {
            var value = param[1];
            var match = value.split(":");
            if (match.length !== 2) {
              return /* tuple */[
                      value,
                      ""
                    ];
            } else {
              var key = match[0];
              var value$1 = match[1];
              return /* tuple */[
                      key,
                      decodeURIComponent(value$1)
                    ];
            }
          }), filters);
    return /* tuple */[
            lookfor,
            filters$1,
            page,
            limit
          ];
  }

  function decodeTranslations(json) {
    var json$1 = parseOrRaise(json);
    var translations = dict$1(string$2, json$1);
    return /* Success */__(3, [translations]);
  }

  function loadTranslations(lan, callback) {
    var url = _1(sprintf(/* Format */[
              /* String_literal */__(11, [
                  "translations/",
                  /* String */__(2, [
                      /* No_padding */0,
                      /* String_literal */__(11, [
                          ".json",
                          /* End_of_format */0
                        ])
                    ])
                ]),
              "translations/%s.json"
            ]), lan);
    return send$1(callback, getString(url));
  }

  function updateTranslations(current, append$$1) {
    if (typeof current === "number" || current.tag !== 3) {
      return /* () */0;
    } else {
      var translations = current[0];
      return iter$1((function (param) {
                    translations[param[0]] = param[1];
                    return /* () */0;
                  }), append$$1);
    }
  }

  function trans$1(key, translations) {
    if (typeof translations === "number" || translations.tag !== 3) {
      return key;
    } else {
      var match = translations[0][key];
      if (match !== undefined) {
        return match;
      } else {
        return key;
      }
    }
  }

  function toStorage(k, v) {
    var ls = localStorage;
    ls.setItem(k, v);
    return /* () */0;
  }

  function fromStorage(k, $$default) {
    var ls = localStorage;
    var match = ls.getItem(k);
    if (match !== null) {
      return match;
    } else {
      return $$default;
    }
  }

  function scrollToElement(id) {
    var act = function (id) {
      var el = getElementById(id);
      if (el == null) {
        requestAnimationFrame((function () {
                return act(id);
              }));
        return /* () */0;
      } else {
        return (window.scrollTo(0, Math.max(0, document.getElementById(id).offsetTop)-40));
      }
    };
    return act(id);
  }

  function resetPageScroll() {
    return ( document.documentElement.scrollTop = 0 );
  }

  var hash = function (s){
    return s.split("").reduce(
       function(a,b){
         a=((a<<5)-a)+b.charCodeAt(0);
         return a&a
       },
     0);
  };
  /* Tea_http Not a pure module */

  var commonjsGlobal = typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function unwrapExports (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  /*
  object-assign
  (c) Sindre Sorhus
  @license MIT
  */
  /* eslint-disable no-unused-vars */
  var getOwnPropertySymbols = Object.getOwnPropertySymbols;
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  var propIsEnumerable = Object.prototype.propertyIsEnumerable;

  function toObject(val) {
  	if (val === null || val === undefined) {
  		throw new TypeError('Object.assign cannot be called with null or undefined');
  	}

  	return Object(val);
  }

  function shouldUseNative() {
  	try {
  		if (!Object.assign) {
  			return false;
  		}

  		// Detect buggy property enumeration order in older V8 versions.

  		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
  		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
  		test1[5] = 'de';
  		if (Object.getOwnPropertyNames(test1)[0] === '5') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test2 = {};
  		for (var i = 0; i < 10; i++) {
  			test2['_' + String.fromCharCode(i)] = i;
  		}
  		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
  			return test2[n];
  		});
  		if (order2.join('') !== '0123456789') {
  			return false;
  		}

  		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
  		var test3 = {};
  		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
  			test3[letter] = letter;
  		});
  		if (Object.keys(Object.assign({}, test3)).join('') !==
  				'abcdefghijklmnopqrst') {
  			return false;
  		}

  		return true;
  	} catch (err) {
  		// We don't expect any of the above to throw, but better to be safe.
  		return false;
  	}
  }

  var objectAssign = shouldUseNative() ? Object.assign : function (target, source) {
  	var from;
  	var to = toObject(target);
  	var symbols;

  	for (var s = 1; s < arguments.length; s++) {
  		from = Object(arguments[s]);

  		for (var key in from) {
  			if (hasOwnProperty.call(from, key)) {
  				to[key] = from[key];
  			}
  		}

  		if (getOwnPropertySymbols) {
  			symbols = getOwnPropertySymbols(from);
  			for (var i = 0; i < symbols.length; i++) {
  				if (propIsEnumerable.call(from, symbols[i])) {
  					to[symbols[i]] = from[symbols[i]];
  				}
  			}
  		}
  	}

  	return to;
  };

  var sheet = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.StyleSheet = StyleSheet;



  var _objectAssign2 = _interopRequireDefault(objectAssign);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  /* 

  high performance StyleSheet for css-in-js systems 

  - uses multiple style tags behind the scenes for millions of rules 
  - uses `insertRule` for appending in production for *much* faster performance
  - 'polyfills' on server side 


  // usage

  import StyleSheet from 'glamor/lib/sheet'
  let styleSheet = new StyleSheet()

  styleSheet.inject() 
  - 'injects' the stylesheet into the page (or into memory if on server)

  styleSheet.insert('#box { border: 1px solid red; }') 
  - appends a css rule into the stylesheet 

  styleSheet.flush() 
  - empties the stylesheet of all its contents


  */

  function last(arr) {
    return arr[arr.length - 1];
  }

  function sheetForTag(tag) {
    if (tag.sheet) {
      return tag.sheet;
    }

    // this weirdness brought to you by firefox 
    for (var i = 0; i < document.styleSheets.length; i++) {
      if (document.styleSheets[i].ownerNode === tag) {
        return document.styleSheets[i];
      }
    }
  }

  var isBrowser = typeof window !== 'undefined';
  var isDev = "production" === 'development' || !"production"; //(x => (x === 'development') || !x)("production")
  var isTest = "production" === 'test';

  var oldIE = function () {
    if (isBrowser) {
      var div = document.createElement('div');
      div.innerHTML = '<!--[if lt IE 10]><i></i><![endif]-->';
      return div.getElementsByTagName('i').length === 1;
    }
  }();

  function makeStyleTag() {
    var tag = document.createElement('style');
    tag.type = 'text/css';
    tag.setAttribute('data-glamor', '');
    tag.appendChild(document.createTextNode(''));
    (document.head || document.getElementsByTagName('head')[0]).appendChild(tag);
    return tag;
  }

  function StyleSheet() {
    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
        _ref$speedy = _ref.speedy,
        speedy = _ref$speedy === undefined ? !isDev && !isTest : _ref$speedy,
        _ref$maxLength = _ref.maxLength,
        maxLength = _ref$maxLength === undefined ? isBrowser && oldIE ? 4000 : 65000 : _ref$maxLength;

    this.isSpeedy = speedy; // the big drawback here is that the css won't be editable in devtools
    this.sheet = undefined;
    this.tags = [];
    this.maxLength = maxLength;
    this.ctr = 0;
  }

  (0, _objectAssign2.default)(StyleSheet.prototype, {
    getSheet: function getSheet() {
      return sheetForTag(last(this.tags));
    },
    inject: function inject() {
      var _this = this;

      if (this.injected) {
        throw new Error('already injected stylesheet!');
      }
      if (isBrowser) {
        this.tags[0] = makeStyleTag();
      } else {
        // server side 'polyfill'. just enough behavior to be useful.
        this.sheet = {
          cssRules: [],
          insertRule: function insertRule(rule) {
            // enough 'spec compliance' to be able to extract the rules later  
            // in other words, just the cssText field 
            _this.sheet.cssRules.push({ cssText: rule });
          }
        };
      }
      this.injected = true;
    },
    speedy: function speedy(bool) {
      if (this.ctr !== 0) {
        throw new Error('cannot change speedy mode after inserting any rule to sheet. Either call speedy(' + bool + ') earlier in your app, or call flush() before speedy(' + bool + ')');
      }
      this.isSpeedy = !!bool;
    },
    _insert: function _insert(rule) {
      // this weirdness for perf, and chrome's weird bug 
      // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
      try {
        var sheet = this.getSheet();
        sheet.insertRule(rule, rule.indexOf('@import') !== -1 ? 0 : sheet.cssRules.length);
      } catch (e) {
        if (isDev) {
          // might need beter dx for this 
          console.warn('whoops, illegal rule inserted', rule); //eslint-disable-line no-console
        }
      }
    },
    insert: function insert(rule) {

      if (isBrowser) {
        // this is the ultrafast version, works across browsers 
        if (this.isSpeedy && this.getSheet().insertRule) {
          this._insert(rule);
        }
        // more browser weirdness. I don't even know    
        // else if(this.tags.length > 0 && this.tags::last().styleSheet) {      
        //   this.tags::last().styleSheet.cssText+= rule
        // }
        else {
            if (rule.indexOf('@import') !== -1) {
              var tag = last(this.tags);
              tag.insertBefore(document.createTextNode(rule), tag.firstChild);
            } else {
              last(this.tags).appendChild(document.createTextNode(rule));
            }
          }
      } else {
        // server side is pretty simple         
        this.sheet.insertRule(rule, rule.indexOf('@import') !== -1 ? 0 : this.sheet.cssRules.length);
      }

      this.ctr++;
      if (isBrowser && this.ctr % this.maxLength === 0) {
        this.tags.push(makeStyleTag());
      }
      return this.ctr - 1;
    },

    // commenting this out till we decide on v3's decision 
    // _replace(index, rule) {
    //   // this weirdness for perf, and chrome's weird bug 
    //   // https://stackoverflow.com/questions/20007992/chrome-suddenly-stopped-accepting-insertrule
    //   try {  
    //     let sheet = this.getSheet()        
    //     sheet.deleteRule(index) // todo - correct index here     
    //     sheet.insertRule(rule, index)
    //   }
    //   catch(e) {
    //     if(isDev) {
    //       // might need beter dx for this 
    //       console.warn('whoops, problem replacing rule', rule) //eslint-disable-line no-console
    //     }          
    //   }          

    // }
    // replace(index, rule) {
    //   if(isBrowser) {
    //     if(this.isSpeedy && this.getSheet().insertRule) {
    //       this._replace(index, rule)
    //     }
    //     else {
    //       let _slot = Math.floor((index  + this.maxLength) / this.maxLength) - 1        
    //       let _index = (index % this.maxLength) + 1
    //       let tag = this.tags[_slot]
    //       tag.replaceChild(document.createTextNode(rule), tag.childNodes[_index])
    //     }
    //   }
    //   else {
    //     let rules = this.sheet.cssRules
    //     this.sheet.cssRules = [ ...rules.slice(0, index), { cssText: rule }, ...rules.slice(index + 1) ]
    //   }
    // }
    delete: function _delete(index) {
      // we insert a blank rule when 'deleting' so previously returned indexes remain stable
      return this.replace(index, '');
    },
    flush: function flush() {
      if (isBrowser) {
        this.tags.forEach(function (tag) {
          return tag.parentNode.removeChild(tag);
        });
        this.tags = [];
        this.sheet = null;
        this.ctr = 0;
        // todo - look for remnants in document.styleSheets
      } else {
        // simpler on server 
        this.sheet.cssRules = [];
      }
      this.injected = false;
    },
    rules: function rules() {
      if (!isBrowser) {
        return this.sheet.cssRules;
      }
      var arr = [];
      this.tags.forEach(function (tag) {
        return arr.splice.apply(arr, [arr.length, 0].concat(_toConsumableArray(Array.from(sheetForTag(tag).cssRules))));
      });
      return arr;
    }
  });
  });

  unwrapExports(sheet);
  var sheet_1 = sheet.StyleSheet;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */

  var _hyphenPattern = /-(.)/g;

  /**
   * Camelcases a hyphenated string, for example:
   *
   *   > camelize('background-color')
   *   < "backgroundColor"
   *
   * @param {string} string
   * @return {string}
   */
  function camelize(string) {
    return string.replace(_hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  }

  var camelize_1 = camelize;

  var msPattern = /^-ms-/;

  /**
   * Camelcases a hyphenated CSS property name, for example:
   *
   *   > camelizeStyleName('background-color')
   *   < "backgroundColor"
   *   > camelizeStyleName('-moz-transition')
   *   < "MozTransition"
   *   > camelizeStyleName('-ms-transition')
   *   < "msTransition"
   *
   * As Andi Smith suggests
   * (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
   * is converted to lowercase `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function camelizeStyleName(string) {
    return camelize_1(string.replace(msPattern, 'ms-'));
  }

  var camelizeStyleName_1 = camelizeStyleName;

  var CSSProperty_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule CSSProperty
   */

  /**
   * CSS properties which accept numbers but are not in units of "px".
   */

  var isUnitlessNumber = {
    animationIterationCount: true,
    borderImageOutset: true,
    borderImageSlice: true,
    borderImageWidth: true,
    boxFlex: true,
    boxFlexGroup: true,
    boxOrdinalGroup: true,
    columnCount: true,
    flex: true,
    flexGrow: true,
    flexPositive: true,
    flexShrink: true,
    flexNegative: true,
    flexOrder: true,
    gridRow: true,
    gridRowStart: true,
    gridRowEnd: true,
    gridColumn: true,
    gridColumnStart: true,
    gridColumnEnd: true,
    fontWeight: true,
    lineClamp: true,
    lineHeight: true,
    opacity: true,
    order: true,
    orphans: true,
    tabSize: true,
    widows: true,
    zIndex: true,
    zoom: true,

    // SVG-related properties
    fillOpacity: true,
    floodOpacity: true,
    stopOpacity: true,
    strokeDasharray: true,
    strokeDashoffset: true,
    strokeMiterlimit: true,
    strokeOpacity: true,
    strokeWidth: true

    /**
     * @param {string} prefix vendor-specific prefix, eg: Webkit
     * @param {string} key style name, eg: transitionDuration
     * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
     * WebkitTransitionDuration
     */
  };function prefixKey(prefix, key) {
    return prefix + key.charAt(0).toUpperCase() + key.substring(1);
  }

  /**
   * Support style names that may come passed in prefixed by adding permutations
   * of vendor prefixes.
   */
  var prefixes = ['Webkit', 'ms', 'Moz', 'O'];

  // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
  // infinite loop, because it iterates over the newly added props too.
  Object.keys(isUnitlessNumber).forEach(function (prop) {
    prefixes.forEach(function (prefix) {
      isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
    });
  });

  /**
   * Most style properties can be unset by doing .style[prop] = '' but IE8
   * doesn't like doing that with shorthand properties so for the properties that
   * IE8 breaks on, which are listed here, we instead unset each of the
   * individual properties. See http://bugs.jquery.com/ticket/12385.
   * The 4-value 'clock' properties like margin, padding, border-width seem to
   * behave without any problems. Curiously, list-style works too without any
   * special prodding.
   */
  var shorthandPropertyExpansions = {
    background: {
      backgroundAttachment: true,
      backgroundColor: true,
      backgroundImage: true,
      backgroundPositionX: true,
      backgroundPositionY: true,
      backgroundRepeat: true
    },
    backgroundPosition: {
      backgroundPositionX: true,
      backgroundPositionY: true
    },
    border: {
      borderWidth: true,
      borderStyle: true,
      borderColor: true
    },
    borderBottom: {
      borderBottomWidth: true,
      borderBottomStyle: true,
      borderBottomColor: true
    },
    borderLeft: {
      borderLeftWidth: true,
      borderLeftStyle: true,
      borderLeftColor: true
    },
    borderRight: {
      borderRightWidth: true,
      borderRightStyle: true,
      borderRightColor: true
    },
    borderTop: {
      borderTopWidth: true,
      borderTopStyle: true,
      borderTopColor: true
    },
    font: {
      fontStyle: true,
      fontVariant: true,
      fontWeight: true,
      fontSize: true,
      lineHeight: true,
      fontFamily: true
    },
    outline: {
      outlineWidth: true,
      outlineStyle: true,
      outlineColor: true
    }
  };

  var CSSProperty = {
    isUnitlessNumber: isUnitlessNumber,
    shorthandPropertyExpansions: shorthandPropertyExpansions
  };

  exports.default = CSSProperty;
  });

  unwrapExports(CSSProperty_1);

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   */

  function makeEmptyFunction(arg) {
    return function () {
      return arg;
    };
  }

  /**
   * This function accepts and discards inputs; it has no side effects. This is
   * primarily useful idiomatically for overridable function endpoints which
   * always need to be callable, since JS lacks a null-call idiom ala Cocoa.
   */
  var emptyFunction = function emptyFunction() {};

  emptyFunction.thatReturns = makeEmptyFunction;
  emptyFunction.thatReturnsFalse = makeEmptyFunction(false);
  emptyFunction.thatReturnsTrue = makeEmptyFunction(true);
  emptyFunction.thatReturnsNull = makeEmptyFunction(null);
  emptyFunction.thatReturnsThis = function () {
    return this;
  };
  emptyFunction.thatReturnsArgument = function (arg) {
    return arg;
  };

  var emptyFunction_1 = emptyFunction;

  /**
   * Similar to invariant but only logs a warning if the condition is not met.
   * This can be used to log issues in development environments in critical
   * paths. Removing the logging code for production environments will keep the
   * same logic and follow the same code paths.
   */

  var warning = emptyFunction_1;



  var warning_1 = warning;

  var dangerousStyleValue_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });



  var _CSSProperty2 = _interopRequireDefault(CSSProperty_1);



  var _warning2 = _interopRequireDefault(warning_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  /**
   * Copyright 2013-present, Facebook, Inc.
   * All rights reserved.
   *
   * This source code is licensed under the BSD-style license found in the
   * LICENSE file in the root directory of this source tree. An additional grant
   * of patent rights can be found in the PATENTS file in the same directory.
   *
   * @providesModule dangerousStyleValue
   */

  var isUnitlessNumber = _CSSProperty2.default.isUnitlessNumber;

  /**
   * Convert a value into the proper css writable value. The style name `name`
   * should be logical (no hyphens), as specified
   * in `CSSProperty.isUnitlessNumber`.
   *
   * @param {string} name CSS property name such as `topMargin`.
   * @param {*} value CSS property value such as `10px`.
   * @param {ReactDOMComponent} component
   * @return {string} Normalized style value with dimensions applied.
   */
  function dangerousStyleValue(name, value, component) {
    // Note that we've removed escapeTextForBrowser() calls here since the
    // whole string will be escaped when the attribute is injected into
    // the markup. If you provide unsafe user data here they can inject
    // arbitrary CSS which may be problematic (I couldn't repro this):
    // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
    // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
    // This is not an XSS hole but instead a potential CSS injection issue
    // which has lead to a greater discussion about how we're going to
    // trust URLs moving forward. See #2115901

    var isEmpty = value == null || typeof value === 'boolean' || value === '';
    if (isEmpty) {
      return '';
    }

    var isNonNumeric = isNaN(value);
    if (isNonNumeric || value === 0 || isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name]) {
      return '' + value; // cast to string
    }

    if (typeof value === 'string') {
      
      value = value.trim();
    }
    return value + 'px';
  }

  exports.default = dangerousStyleValue;
  });

  unwrapExports(dangerousStyleValue_1);

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * @typechecks
   */

  var _uppercasePattern = /([A-Z])/g;

  /**
   * Hyphenates a camelcased string, for example:
   *
   *   > hyphenate('backgroundColor')
   *   < "background-color"
   *
   * For CSS style names, use `hyphenateStyleName` instead which works properly
   * with all vendor prefixes, including `ms`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenate(string) {
    return string.replace(_uppercasePattern, '-$1').toLowerCase();
  }

  var hyphenate_1 = hyphenate;

  var msPattern$1 = /^ms-/;

  /**
   * Hyphenates a camelcased CSS property name, for example:
   *
   *   > hyphenateStyleName('backgroundColor')
   *   < "background-color"
   *   > hyphenateStyleName('MozTransition')
   *   < "-moz-transition"
   *   > hyphenateStyleName('msTransition')
   *   < "-ms-transition"
   *
   * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
   * is converted to `-ms-`.
   *
   * @param {string} string
   * @return {string}
   */
  function hyphenateStyleName(string) {
    return hyphenate_1(string).replace(msPattern$1, '-ms-');
  }

  var hyphenateStyleName_1 = hyphenateStyleName;

  /**
   * Copyright (c) 2013-present, Facebook, Inc.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *
   * 
   * @typechecks static-only
   */

  /**
   * Memoizes the return value of a function that accepts one string argument.
   */

  function memoizeStringOnly(callback) {
    var cache = {};
    return function (string) {
      if (!cache.hasOwnProperty(string)) {
        cache[string] = callback.call(this, string);
      }
      return cache[string];
    };
  }

  var memoizeStringOnly_1 = memoizeStringOnly;

  var CSSPropertyOperations = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.processStyleName = undefined;
  exports.createMarkupForStyles = createMarkupForStyles;



  var _camelizeStyleName2 = _interopRequireDefault(camelizeStyleName_1);



  var _dangerousStyleValue2 = _interopRequireDefault(dangerousStyleValue_1);



  var _hyphenateStyleName2 = _interopRequireDefault(hyphenateStyleName_1);



  var _memoizeStringOnly2 = _interopRequireDefault(memoizeStringOnly_1);



  var _warning2 = _interopRequireDefault(warning_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var processStyleName = exports.processStyleName = (0, _memoizeStringOnly2.default)(_hyphenateStyleName2.default); /**
                                                                                                                     * Copyright 2013-present, Facebook, Inc.
                                                                                                                     * All rights reserved.
                                                                                                                     *
                                                                                                                     * This source code is licensed under the BSD-style license found in the
                                                                                                                     * LICENSE file in the root directory of this source tree. An additional grant
                                                                                                                     * of patent rights can be found in the PATENTS file in the same directory.
                                                                                                                     *
                                                                                                                     * @providesModule CSSPropertyOperations
                                                                                                                     */



  /**
     * Serializes a mapping of style properties for use as inline styles:
     *
     *   > createMarkupForStyles({width: '200px', height: 0})
     *   "width:200px;height:0;"
     *
     * Undefined values are ignored so that declarative programming is easier.
     * The result should be HTML-escaped before insertion into the DOM.
     *
     * @param {object} styles
     * @param {ReactDOMComponent} component
     * @return {?string}
     */

  function createMarkupForStyles(styles, component) {
    var serialized = '';
    for (var styleName in styles) {
      var isCustomProp = styleName.indexOf('--') === 0;
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }
      if (styleName === 'label') {
        continue;
      }
      var styleValue = styles[styleName];
      if (styleValue != null) {
        if (isCustomProp) {
          serialized += styleName + ':' + styleValue + ';';
        } else {
          serialized += processStyleName(styleName) + ':';
          serialized += (0, _dangerousStyleValue2.default)(styleName, styleValue, component) + ';';
        }
      }
    }
    return serialized || null;
  }
  });

  unwrapExports(CSSPropertyOperations);
  var CSSPropertyOperations_1 = CSSPropertyOperations.processStyleName;
  var CSSPropertyOperations_2 = CSSPropertyOperations.createMarkupForStyles;

  var clean_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

  exports.default = clean;
  // Returns true for null, false, undefined and {}
  function isFalsy(value) {
    return value === null || value === undefined || value === false || (typeof value === 'undefined' ? 'undefined' : _typeof(value)) === 'object' && Object.keys(value).length === 0;
  }

  function cleanObject(object) {
    if (isFalsy(object)) return null;
    if ((typeof object === 'undefined' ? 'undefined' : _typeof(object)) !== 'object') return object;

    var acc = {},
        keys = Object.keys(object),
        hasFalsy = false;
    for (var i = 0; i < keys.length; i++) {
      var value = object[keys[i]];
      var filteredValue = clean(value);
      if (filteredValue === null || filteredValue !== value) {
        hasFalsy = true;
      }
      if (filteredValue !== null) {
        acc[keys[i]] = filteredValue;
      }
    }
    return Object.keys(acc).length === 0 ? null : hasFalsy ? acc : object;
  }

  function cleanArray(rules) {
    var hasFalsy = false;
    var filtered = [];
    rules.forEach(function (rule) {
      var filteredRule = clean(rule);
      if (filteredRule === null || filteredRule !== rule) {
        hasFalsy = true;
      }
      if (filteredRule !== null) {
        filtered.push(filteredRule);
      }
    });
    return filtered.length == 0 ? null : hasFalsy ? filtered : rules;
  }

  // Takes style array or object provided by user and clears all the falsy data 
  // If there is no styles left after filtration returns null
  function clean(input) {
    return Array.isArray(input) ? cleanArray(input) : cleanObject(input);
  }
  });

  unwrapExports(clean_1);

  var staticData = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var w = ["Webkit"];
  var m = ["Moz"];
  var ms = ["ms"];
  var wm = ["Webkit", "Moz"];
  var wms = ["Webkit", "ms"];
  var wmms = ["Webkit", "Moz", "ms"];

  exports.default = {
    plugins: [],
    prefixMap: { "appearance": wm, "userSelect": wmms, "textEmphasisPosition": w, "textEmphasis": w, "textEmphasisStyle": w, "textEmphasisColor": w, "boxDecorationBreak": w, "clipPath": w, "maskImage": w, "maskMode": w, "maskRepeat": w, "maskPosition": w, "maskClip": w, "maskOrigin": w, "maskSize": w, "maskComposite": w, "mask": w, "maskBorderSource": w, "maskBorderMode": w, "maskBorderSlice": w, "maskBorderWidth": w, "maskBorderOutset": w, "maskBorderRepeat": w, "maskBorder": w, "maskType": w, "textDecorationStyle": w, "textDecorationSkip": w, "textDecorationLine": w, "textDecorationColor": w, "filter": w, "fontFeatureSettings": w, "breakAfter": wmms, "breakBefore": wmms, "breakInside": wmms, "columnCount": wm, "columnFill": wm, "columnGap": wm, "columnRule": wm, "columnRuleColor": wm, "columnRuleStyle": wm, "columnRuleWidth": wm, "columns": wm, "columnSpan": wm, "columnWidth": wm, "writingMode": wms, "flex": w, "flexBasis": w, "flexDirection": w, "flexGrow": w, "flexFlow": w, "flexShrink": w, "flexWrap": w, "alignContent": w, "alignItems": w, "alignSelf": w, "justifyContent": w, "order": w, "transform": w, "transformOrigin": w, "transformOriginX": w, "transformOriginY": w, "backfaceVisibility": w, "perspective": w, "perspectiveOrigin": w, "transformStyle": w, "transformOriginZ": w, "animation": w, "animationDelay": w, "animationDirection": w, "animationFillMode": w, "animationDuration": w, "animationIterationCount": w, "animationName": w, "animationPlayState": w, "animationTimingFunction": w, "backdropFilter": w, "fontKerning": w, "scrollSnapType": wms, "scrollSnapPointsX": wms, "scrollSnapPointsY": wms, "scrollSnapDestination": wms, "scrollSnapCoordinate": wms, "shapeImageThreshold": w, "shapeImageMargin": w, "shapeImageOutside": w, "hyphens": wmms, "flowInto": wms, "flowFrom": wms, "regionFragment": wms, "textAlignLast": m, "tabSize": m, "wrapFlow": ms, "wrapThrough": ms, "wrapMargin": ms, "gridTemplateColumns": ms, "gridTemplateRows": ms, "gridTemplateAreas": ms, "gridTemplate": ms, "gridAutoColumns": ms, "gridAutoRows": ms, "gridAutoFlow": ms, "grid": ms, "gridRowStart": ms, "gridColumnStart": ms, "gridRowEnd": ms, "gridRow": ms, "gridColumn": ms, "gridColumnEnd": ms, "gridColumnGap": ms, "gridRowGap": ms, "gridArea": ms, "gridGap": ms, "textSizeAdjust": wms, "borderImage": w, "borderImageOutset": w, "borderImageRepeat": w, "borderImageSlice": w, "borderImageSource": w, "borderImageWidth": w, "transitionDelay": w, "transitionDuration": w, "transitionProperty": w, "transitionTimingFunction": w }
  };
  module.exports = exports["default"];
  });

  unwrapExports(staticData);

  var capitalizeString_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = capitalizeString;
  function capitalizeString(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  module.exports = exports["default"];
  });

  unwrapExports(capitalizeString_1);

  var prefixProperty_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = prefixProperty;



  var _capitalizeString2 = _interopRequireDefault(capitalizeString_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function prefixProperty(prefixProperties, property, style) {
    if (prefixProperties.hasOwnProperty(property)) {
      var requiredPrefixes = prefixProperties[property];
      for (var i = 0, len = requiredPrefixes.length; i < len; ++i) {
        style[requiredPrefixes[i] + (0, _capitalizeString2.default)(property)] = style[property];
      }
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(prefixProperty_1);

  var prefixValue_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = prefixValue;
  function prefixValue(plugins, property, value, style, metaData) {
    for (var i = 0, len = plugins.length; i < len; ++i) {
      var processedValue = plugins[i](property, value, style, metaData);

      // we can stop processing if a value is returned
      // as all plugin criteria are unique
      if (processedValue) {
        return processedValue;
      }
    }
  }
  module.exports = exports["default"];
  });

  unwrapExports(prefixValue_1);

  var cursor_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = cursor;
  var prefixes = ['-webkit-', '-moz-', ''];

  var values = {
    'zoom-in': true,
    'zoom-out': true,
    grab: true,
    grabbing: true
  };

  function cursor(property, value) {
    if (property === 'cursor' && values.hasOwnProperty(value)) {
      return prefixes.map(function (prefix) {
        return prefix + value;
      });
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(cursor_1);

  var isPrefixedValue_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = isPrefixedValue;
  var regex = /-webkit-|-moz-|-ms-/;

  function isPrefixedValue(value) {
    return typeof value === 'string' && regex.test(value);
  }
  module.exports = exports['default'];
  });

  unwrapExports(isPrefixedValue_1);

  var crossFade_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = crossFade;



  var _isPrefixedValue2 = _interopRequireDefault(isPrefixedValue_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // http://caniuse.com/#search=cross-fade
  var prefixes = ['-webkit-', ''];
  function crossFade(property, value) {
    if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('cross-fade(') > -1) {
      return prefixes.map(function (prefix) {
        return value.replace(/cross-fade\(/g, prefix + 'cross-fade(');
      });
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(crossFade_1);

  var filter_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = filter;



  var _isPrefixedValue2 = _interopRequireDefault(isPrefixedValue_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // http://caniuse.com/#feat=css-filter-function
  var prefixes = ['-webkit-', ''];
  function filter(property, value) {
    if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('filter(') > -1) {
      return prefixes.map(function (prefix) {
        return value.replace(/filter\(/g, prefix + 'filter(');
      });
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(filter_1);

  var flex_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flex;
  var values = {
    flex: ['-webkit-box', '-moz-box', '-ms-flexbox', '-webkit-flex', 'flex'],
    'inline-flex': ['-webkit-inline-box', '-moz-inline-box', '-ms-inline-flexbox', '-webkit-inline-flex', 'inline-flex']
  };

  function flex(property, value) {
    if (property === 'display' && values.hasOwnProperty(value)) {
      return values[value];
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(flex_1);

  var flexboxOld_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = flexboxOld;
  var alternativeValues = {
    'space-around': 'justify',
    'space-between': 'justify',
    'flex-start': 'start',
    'flex-end': 'end',
    'wrap-reverse': 'multiple',
    wrap: 'multiple'
  };

  var alternativeProps = {
    alignItems: 'WebkitBoxAlign',
    justifyContent: 'WebkitBoxPack',
    flexWrap: 'WebkitBoxLines'
  };

  function flexboxOld(property, value, style) {
    if (property === 'flexDirection' && typeof value === 'string') {
      if (value.indexOf('column') > -1) {
        style.WebkitBoxOrient = 'vertical';
      } else {
        style.WebkitBoxOrient = 'horizontal';
      }
      if (value.indexOf('reverse') > -1) {
        style.WebkitBoxDirection = 'reverse';
      } else {
        style.WebkitBoxDirection = 'normal';
      }
    }
    if (alternativeProps.hasOwnProperty(property)) {
      style[alternativeProps[property]] = alternativeValues[value] || value;
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(flexboxOld_1);

  var gradient_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = gradient;



  var _isPrefixedValue2 = _interopRequireDefault(isPrefixedValue_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var prefixes = ['-webkit-', '-moz-', ''];

  var values = /linear-gradient|radial-gradient|repeating-linear-gradient|repeating-radial-gradient/;

  function gradient(property, value) {
    if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && values.test(value)) {
      return prefixes.map(function (prefix) {
        return prefix + value;
      });
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(gradient_1);

  var imageSet_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = imageSet;



  var _isPrefixedValue2 = _interopRequireDefault(isPrefixedValue_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  // http://caniuse.com/#feat=css-image-set
  var prefixes = ['-webkit-', ''];
  function imageSet(property, value) {
    if (typeof value === 'string' && !(0, _isPrefixedValue2.default)(value) && value.indexOf('image-set(') > -1) {
      return prefixes.map(function (prefix) {
        return value.replace(/image-set\(/g, prefix + 'image-set(');
      });
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(imageSet_1);

  var position_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = position;
  function position(property, value) {
    if (property === 'position' && value === 'sticky') {
      return ['-webkit-sticky', 'sticky'];
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(position_1);

  var sizing_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = sizing;
  var prefixes = ['-webkit-', '-moz-', ''];

  var properties = {
    maxHeight: true,
    maxWidth: true,
    width: true,
    height: true,
    columnWidth: true,
    minWidth: true,
    minHeight: true
  };
  var values = {
    'min-content': true,
    'max-content': true,
    'fill-available': true,
    'fit-content': true,
    'contain-floats': true
  };

  function sizing(property, value) {
    if (properties.hasOwnProperty(property) && values.hasOwnProperty(value)) {
      return prefixes.map(function (prefix) {
        return prefix + value;
      });
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(sizing_1);

  var uppercasePattern = /[A-Z]/g;
  var msPattern$2 = /^ms-/;
  var cache = {};

  function hyphenateStyleName$1(string) {
      return string in cache
      ? cache[string]
      : cache[string] = string
        .replace(uppercasePattern, '-$&')
        .toLowerCase()
        .replace(msPattern$2, '-ms-');
  }

  var hyphenateStyleName_1$1 = hyphenateStyleName$1;

  var hyphenateProperty_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = hyphenateProperty;



  var _hyphenateStyleName2 = _interopRequireDefault(hyphenateStyleName_1$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function hyphenateProperty(property) {
    return (0, _hyphenateStyleName2.default)(property);
  }
  module.exports = exports['default'];
  });

  unwrapExports(hyphenateProperty_1);

  var transition_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = transition;



  var _hyphenateProperty2 = _interopRequireDefault(hyphenateProperty_1);



  var _isPrefixedValue2 = _interopRequireDefault(isPrefixedValue_1);



  var _capitalizeString2 = _interopRequireDefault(capitalizeString_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var properties = {
    transition: true,
    transitionProperty: true,
    WebkitTransition: true,
    WebkitTransitionProperty: true,
    MozTransition: true,
    MozTransitionProperty: true
  };


  var prefixMapping = {
    Webkit: '-webkit-',
    Moz: '-moz-',
    ms: '-ms-'
  };

  function prefixValue(value, propertyPrefixMap) {
    if ((0, _isPrefixedValue2.default)(value)) {
      return value;
    }

    // only split multi values, not cubic beziers
    var multipleValues = value.split(/,(?![^()]*(?:\([^()]*\))?\))/g);

    for (var i = 0, len = multipleValues.length; i < len; ++i) {
      var singleValue = multipleValues[i];
      var values = [singleValue];
      for (var property in propertyPrefixMap) {
        var dashCaseProperty = (0, _hyphenateProperty2.default)(property);

        if (singleValue.indexOf(dashCaseProperty) > -1 && dashCaseProperty !== 'order') {
          var prefixes = propertyPrefixMap[property];
          for (var j = 0, pLen = prefixes.length; j < pLen; ++j) {
            // join all prefixes and create a new value
            values.unshift(singleValue.replace(dashCaseProperty, prefixMapping[prefixes[j]] + dashCaseProperty));
          }
        }
      }

      multipleValues[i] = values.join(',');
    }

    return multipleValues.join(',');
  }

  function transition(property, value, style, propertyPrefixMap) {
    // also check for already prefixed transitions
    if (typeof value === 'string' && properties.hasOwnProperty(property)) {
      var outputValue = prefixValue(value, propertyPrefixMap);
      // if the property is already prefixed
      var webkitOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
        return !/-moz-|-ms-/.test(val);
      }).join(',');

      if (property.indexOf('Webkit') > -1) {
        return webkitOutput;
      }

      var mozOutput = outputValue.split(/,(?![^()]*(?:\([^()]*\))?\))/g).filter(function (val) {
        return !/-webkit-|-ms-/.test(val);
      }).join(',');

      if (property.indexOf('Moz') > -1) {
        return mozOutput;
      }

      style['Webkit' + (0, _capitalizeString2.default)(property)] = webkitOutput;
      style['Moz' + (0, _capitalizeString2.default)(property)] = mozOutput;
      return outputValue;
    }
  }
  module.exports = exports['default'];
  });

  unwrapExports(transition_1);

  var prefixer_1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = prefixer;



  var _staticData2 = _interopRequireDefault(staticData);



  var _prefixProperty2 = _interopRequireDefault(prefixProperty_1);



  var _prefixValue2 = _interopRequireDefault(prefixValue_1);



  var _cursor2 = _interopRequireDefault(cursor_1);



  var _crossFade2 = _interopRequireDefault(crossFade_1);



  var _filter2 = _interopRequireDefault(filter_1);



  var _flex2 = _interopRequireDefault(flex_1);



  var _flexboxOld2 = _interopRequireDefault(flexboxOld_1);



  var _gradient2 = _interopRequireDefault(gradient_1);



  var _imageSet2 = _interopRequireDefault(imageSet_1);



  var _position2 = _interopRequireDefault(position_1);



  var _sizing2 = _interopRequireDefault(sizing_1);



  var _transition2 = _interopRequireDefault(transition_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var plugins = [_crossFade2.default, _cursor2.default, _filter2.default, _flexboxOld2.default, _gradient2.default, _imageSet2.default, _position2.default, _sizing2.default, _transition2.default, _flex2.default]; // custom facade for inline-style-prefixer

  var prefixMap = _staticData2.default.prefixMap;

  function prefixer(style) {
    for (var property in style) {
      var value = style[property];

      var processedValue = (0, _prefixValue2.default)(plugins, property, value, style, prefixMap);

      // only modify the value if it was touched
      // by any plugin to prevent unnecessary mutations
      if (processedValue) {
        style[property] = processedValue;
      }

      (0, _prefixProperty2.default)(prefixMap, property, style);
    }
    return style;
  }
  });

  unwrapExports(prefixer_1);

  var plugins = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  exports.PluginSet = PluginSet;
  exports.fallbacks = fallbacks;
  exports.contentWrap = contentWrap;
  exports.prefixes = prefixes;



  var _objectAssign2 = _interopRequireDefault(objectAssign);





  var _prefixer2 = _interopRequireDefault(prefixer_1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  var isDev = function (x) {
    return x === 'development' || !x;
  }("production");

  function PluginSet(initial) {
    this.fns = initial || [];
  }

  (0, _objectAssign2.default)(PluginSet.prototype, {
    add: function add() {
      var _this = this;

      for (var _len = arguments.length, fns = Array(_len), _key = 0; _key < _len; _key++) {
        fns[_key] = arguments[_key];
      }

      fns.forEach(function (fn) {
        if (_this.fns.indexOf(fn) >= 0) {
          if (isDev) {
            console.warn('adding the same plugin again, ignoring'); //eslint-disable-line no-console
          }
        } else {
          _this.fns = [fn].concat(_this.fns);
        }
      });
    },
    remove: function remove(fn) {
      this.fns = this.fns.filter(function (x) {
        return x !== fn;
      });
    },
    clear: function clear() {
      this.fns = [];
    },
    transform: function transform(o) {
      return this.fns.reduce(function (o, fn) {
        return fn(o);
      }, o);
    }
  });

  function fallbacks(node) {
    var hasArray = Object.keys(node.style).map(function (x) {
      return Array.isArray(node.style[x]);
    }).indexOf(true) >= 0;
    if (hasArray) {
      var style = node.style;

      var flattened = Object.keys(style).reduce(function (o, key) {
        o[key] = Array.isArray(style[key]) ? style[key].join('; ' + (0, CSSPropertyOperations.processStyleName)(key) + ': ') : style[key];
        return o;
      }, {});
      // todo - 
      // flatten arrays which haven't been flattened yet 
      return (0, _objectAssign2.default)({}, node, { style: flattened });
    }
    return node;
  }

  var contentValues = ['normal', 'none', 'counter', 'open-quote', 'close-quote', 'no-open-quote', 'no-close-quote', 'initial', 'inherit'];

  function contentWrap(node) {
    if (node.style.content) {
      var cont = node.style.content;
      if (contentValues.indexOf(cont) >= 0) {
        return node;
      }
      if (/^(attr|calc|counters?|url)\(/.test(cont)) {
        return node;
      }
      if (cont.charAt(0) === cont.charAt(cont.length - 1) && (cont.charAt(0) === '"' || cont.charAt(0) === "'")) {
        return node;
      }
      return _extends({}, node, { style: _extends({}, node.style, { content: '"' + cont + '"' }) });
    }
    return node;
  }

  function prefixes(node) {
    return (0, _objectAssign2.default)({}, node, { style: (0, _prefixer2.default)(_extends({}, node.style)) });
  }
  });

  unwrapExports(plugins);
  var plugins_1 = plugins.PluginSet;
  var plugins_2 = plugins.fallbacks;
  var plugins_3 = plugins.contentWrap;
  var plugins_4 = plugins.prefixes;

  var hash$1 = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = doHash;
  // murmurhash2 via https://gist.github.com/raycmorgan/588423

  function doHash(str, seed) {
    var m = 0x5bd1e995;
    var r = 24;
    var h = seed ^ str.length;
    var length = str.length;
    var currentIndex = 0;

    while (length >= 4) {
      var k = UInt32(str, currentIndex);

      k = Umul32(k, m);
      k ^= k >>> r;
      k = Umul32(k, m);

      h = Umul32(h, m);
      h ^= k;

      currentIndex += 4;
      length -= 4;
    }

    switch (length) {
      case 3:
        h ^= UInt16(str, currentIndex);
        h ^= str.charCodeAt(currentIndex + 2) << 16;
        h = Umul32(h, m);
        break;

      case 2:
        h ^= UInt16(str, currentIndex);
        h = Umul32(h, m);
        break;

      case 1:
        h ^= str.charCodeAt(currentIndex);
        h = Umul32(h, m);
        break;
    }

    h ^= h >>> 13;
    h = Umul32(h, m);
    h ^= h >>> 15;

    return h >>> 0;
  }

  function UInt32(str, pos) {
    return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8) + (str.charCodeAt(pos++) << 16) + (str.charCodeAt(pos) << 24);
  }

  function UInt16(str, pos) {
    return str.charCodeAt(pos++) + (str.charCodeAt(pos++) << 8);
  }

  function Umul32(n, m) {
    n = n | 0;
    m = m | 0;
    var nlo = n & 0xffff;
    var nhi = n >>> 16;
    var res = nlo * m + ((nhi * m & 0xffff) << 16) | 0;
    return res;
  }
  });

  unwrapExports(hash$1);

  var lib = createCommonjsModule(function (module, exports) {

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.compose = exports.merge = exports.$ = exports.style = exports.presets = exports.keyframes = exports.fontFace = exports.insertGlobal = exports.insertRule = exports.plugins = exports.styleSheet = undefined;
  exports.speedy = speedy;
  exports.simulations = simulations;
  exports.simulate = simulate;
  exports.cssLabels = cssLabels;
  exports.isLikeRule = isLikeRule;
  exports.idFor = idFor;
  exports.css = css;
  exports.rehydrate = rehydrate;
  exports.flush = flush;
  exports.select = select;
  exports.parent = parent;
  exports.media = media;
  exports.pseudo = pseudo;
  exports.active = active;
  exports.any = any;
  exports.checked = checked;
  exports.disabled = disabled;
  exports.empty = empty;
  exports.enabled = enabled;
  exports._default = _default;
  exports.first = first;
  exports.firstChild = firstChild;
  exports.firstOfType = firstOfType;
  exports.fullscreen = fullscreen;
  exports.focus = focus;
  exports.hover = hover;
  exports.indeterminate = indeterminate;
  exports.inRange = inRange;
  exports.invalid = invalid;
  exports.lastChild = lastChild;
  exports.lastOfType = lastOfType;
  exports.left = left;
  exports.link = link;
  exports.onlyChild = onlyChild;
  exports.onlyOfType = onlyOfType;
  exports.optional = optional;
  exports.outOfRange = outOfRange;
  exports.readOnly = readOnly;
  exports.readWrite = readWrite;
  exports.required = required;
  exports.right = right;
  exports.root = root;
  exports.scope = scope;
  exports.target = target;
  exports.valid = valid;
  exports.visited = visited;
  exports.dir = dir;
  exports.lang = lang;
  exports.not = not;
  exports.nthChild = nthChild;
  exports.nthLastChild = nthLastChild;
  exports.nthLastOfType = nthLastOfType;
  exports.nthOfType = nthOfType;
  exports.after = after;
  exports.before = before;
  exports.firstLetter = firstLetter;
  exports.firstLine = firstLine;
  exports.selection = selection;
  exports.backdrop = backdrop;
  exports.placeholder = placeholder;
  exports.cssFor = cssFor;
  exports.attribsFor = attribsFor;



  var _objectAssign2 = _interopRequireDefault(objectAssign);







  var _clean2 = _interopRequireDefault(clean_1);





  var _hash2 = _interopRequireDefault(hash$1);

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

  function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
  /* stylesheet */


  var styleSheet = exports.styleSheet = new sheet.StyleSheet();
  // an isomorphic StyleSheet shim. hides all the nitty gritty.

  // /**************** LIFTOFF IN 3... 2... 1... ****************/
  styleSheet.inject(); //eslint-disable-line indent
  // /****************      TO THE MOOOOOOON     ****************/

  // convenience function to toggle speedy
  function speedy(bool) {
    return styleSheet.speedy(bool);
  }

  // plugins
  // we include these by default
  var plugins$$1 = exports.plugins = styleSheet.plugins = new plugins.PluginSet([plugins.prefixes, plugins.contentWrap, plugins.fallbacks]);
  plugins$$1.media = new plugins.PluginSet(); // neat! media, font-face, keyframes
  plugins$$1.fontFace = new plugins.PluginSet();
  plugins$$1.keyframes = new plugins.PluginSet([plugins.prefixes, plugins.fallbacks]);

  // define some constants

  var isDev = "production" === 'development' || !"production";
  var isTest = "production" === 'test';
  var isBrowser = typeof window !== 'undefined';

  /**** simulations  ****/

  // a flag to enable simulation meta tags on dom nodes
  // defaults to true in dev mode. recommend *not* to
  // toggle often.
  var canSimulate = isDev;

  // we use these flags for issuing warnings when simulate is called
  // in prod / in incorrect order
  var warned1 = false,
      warned2 = false;

  // toggles simulation activity. shouldn't be needed in most cases
  function simulations() {
    var bool = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

    canSimulate = !!bool;
  }

  // use this on dom nodes to 'simulate' pseudoclasses
  // <div {...hover({ color: 'red' })} {...simulate('hover', 'visited')}>...</div>
  // you can even send in some weird ones, as long as it's in simple format
  // and matches an existing rule on the element
  // eg simulate('nthChild2', ':hover:active') etc
  function simulate() {
    for (var _len = arguments.length, pseudos = Array(_len), _key = 0; _key < _len; _key++) {
      pseudos[_key] = arguments[_key];
    }

    pseudos = (0, _clean2.default)(pseudos);
    if (!pseudos) return {};
    if (!canSimulate) {
      if (!warned1) {
        console.warn('can\'t simulate without once calling simulations(true)'); //eslint-disable-line no-console
        warned1 = true;
      }
      if (!isDev && !isTest && !warned2) {
        console.warn('don\'t use simulation outside dev'); //eslint-disable-line no-console
        warned2 = true;
      }
      return {};
    }
    return pseudos.reduce(function (o, p) {
      return o['data-simulate-' + simple(p)] = '', o;
    }, {});
  }

  /**** labels ****/
  // toggle for debug labels.
  // *shouldn't* have to mess with this manually
  var hasLabels = isDev;

  function cssLabels(bool) {
    hasLabels = !!bool;
  }

  // takes a string, converts to lowercase, strips out nonalphanumeric.
  function simple(str) {
    var char = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

    return str.toLowerCase().replace(/[^a-z0-9]/g, char);
  }

  // hashes a string to something 'unique'
  // we use this to generate ids for styles


  function hashify(obj) {
    var str = JSON.stringify(obj);
    var toRet = (0, _hash2.default)(str).toString(36);
    if (obj.label && obj.label.length > 0 && isDev) {
      return simple(obj.label.join('.'), '-') + '-' + toRet;
    }
    return toRet;
  }

  // of shape { 'data-css-<id>': '' }
  function isLikeRule(rule) {
    var keys = Object.keys(rule).filter(function (x) {
      return x !== 'toString';
    });
    if (keys.length !== 1) {
      return false;
    }
    return !!/data\-css\-([a-zA-Z0-9\-_]+)/.exec(keys[0]);
  }

  // extracts id from a { 'data-css-<id>': ''} like object
  function idFor(rule) {
    var keys = Object.keys(rule).filter(function (x) {
      return x !== 'toString';
    });
    if (keys.length !== 1) throw new Error('not a rule');
    var regex = /data\-css\-([a-zA-Z0-9\-_]+)/;
    var match = regex.exec(keys[0]);
    if (!match) throw new Error('not a rule');
    return match[1];
  }

  // from https://github.com/j2css/j2c/blob/5d381c2d721d04b54fabe6a165d587247c3087cb/src/helpers.js#L28-L61

  // "Tokenizes" the selectors into parts relevant for the next function.
  // Strings and comments are matched, but ignored afterwards.
  // This is not a full tokenizers. It only recognizes comas, parentheses,
  // strings and comments.
  // regexp generated by scripts/regexps.js then trimmed by hand
  var selectorTokenizer = /[(),]|"(?:\\.|[^"\n])*"|'(?:\\.|[^'\n])*'|\/\*[\s\S]*?\*\//g;

  /**
   * This will split a coma-separated selector list into individual selectors,
   * ignoring comas in strings, comments and in :pseudo-selectors(parameter, lists).
   *
   * @param {string} selector
   * @return {string[]}
   */

  function splitSelector(selector) {
    if (selector.indexOf(',') === -1) {
      return [selector];
    }

    var indices = [],
        res = [],
        inParen = 0,
        o;
    /*eslint-disable no-cond-assign*/
    while (o = selectorTokenizer.exec(selector)) {
      /*eslint-enable no-cond-assign*/
      switch (o[0]) {
        case '(':
          inParen++;break;
        case ')':
          inParen--;break;
        case ',':
          if (inParen) break;indices.push(o.index);
      }
    }
    for (o = indices.length; o--;) {
      res.unshift(selector.slice(indices[o] + 1));
      selector = selector.slice(0, indices[o]);
    }
    res.unshift(selector);
    return res;
  }

  function selector(id, path) {
    if (!id) {
      return path.replace(/\&/g, '');
    }
    if (!path) return '.css-' + id + ',[data-css-' + id + ']';

    var x = splitSelector(path).map(function (x) {
      return x.indexOf('&') >= 0 ? [x.replace(/\&/mg, '.css-' + id), x.replace(/\&/mg, '[data-css-' + id + ']')].join(',') // todo - make sure each sub selector has an &
      : '.css-' + id + x + ',[data-css-' + id + ']' + x;
    }).join(',');

    if (canSimulate && /^\&\:/.exec(path) && !/\s/.exec(path)) {
      x += ',.css-' + id + '[data-simulate-' + simple(path) + '],[data-css-' + id + '][data-simulate-' + simple(path) + ']';
    }
    return x;
  }

  // end https://github.com/j2css/j2c/blob/5d381c2d721d04b54fabe6a165d587247c3087cb/src/helpers.js#L28-L61


  function toCSS(_ref) {
    var selector = _ref.selector,
        style = _ref.style;

    var result = plugins$$1.transform({ selector: selector, style: style });
    return result.selector + '{' + (0, CSSPropertyOperations.createMarkupForStyles)(result.style) + '}';
  }

  function deconstruct(style) {
    // we can be sure it's not infinitely nested here
    var plain = void 0,
        selects = void 0,
        medias = void 0,
        supports = void 0;
    Object.keys(style).forEach(function (key) {
      if (key.indexOf('&') >= 0) {
        selects = selects || {};
        selects[key] = style[key];
      } else if (key.indexOf('@media') === 0) {
        medias = medias || {};
        medias[key] = deconstruct(style[key]);
      } else if (key.indexOf('@supports') === 0) {
        supports = supports || {};
        supports[key] = deconstruct(style[key]);
      } else if (key === 'label') {
        if (style.label.length > 0) {
          plain = plain || {};
          plain.label = hasLabels ? style.label.join('.') : '';
        }
      } else {
        plain = plain || {};
        plain[key] = style[key];
      }
    });
    return { plain: plain, selects: selects, medias: medias, supports: supports };
  }

  function deconstructedStyleToCSS(id, style) {
    var css = [];

    // plugins here
    var plain = style.plain,
        selects = style.selects,
        medias = style.medias,
        supports = style.supports;

    if (plain) {
      css.push(toCSS({ style: plain, selector: selector(id) }));
    }
    if (selects) {
      Object.keys(selects).forEach(function (key) {
        return css.push(toCSS({ style: selects[key], selector: selector(id, key) }));
      });
    }
    if (medias) {
      Object.keys(medias).forEach(function (key) {
        return css.push(key + '{' + deconstructedStyleToCSS(id, medias[key]).join('') + '}');
      });
    }
    if (supports) {
      Object.keys(supports).forEach(function (key) {
        return css.push(key + '{' + deconstructedStyleToCSS(id, supports[key]).join('') + '}');
      });
    }
    return css;
  }

  // this cache to track which rules have
  // been inserted into the stylesheet
  var inserted = styleSheet.inserted = {};

  // and helpers to insert rules into said styleSheet
  function insert(spec) {
    if (!inserted[spec.id]) {
      inserted[spec.id] = true;
      var deconstructed = deconstruct(spec.style);
      var rules = deconstructedStyleToCSS(spec.id, deconstructed);
      inserted[spec.id] = isBrowser ? true : rules;
      rules.forEach(function (cssRule) {
        return styleSheet.insert(cssRule);
      });
    }
  }

  // a simple cache to store generated rules
  var registered = styleSheet.registered = {};
  function register(spec) {
    if (!registered[spec.id]) {
      registered[spec.id] = spec;
    }
  }

  function _getRegistered(rule) {
    if (isLikeRule(rule)) {
      var ret = registered[idFor(rule)];
      if (ret == null) {
        throw new Error('[glamor] an unexpected rule cache miss occurred. This is probably a sign of multiple glamor instances in your app. See https://github.com/threepointone/glamor/issues/79');
      }
      return ret;
    }
    return rule;
  }

  // todo - perf
  var ruleCache = {};
  function toRule(spec) {
    register(spec);
    insert(spec);

    if (ruleCache[spec.id]) {
      return ruleCache[spec.id];
    }

    var ret = _defineProperty({}, 'data-css-' + spec.id, hasLabels ? spec.label || '' : '');
    Object.defineProperty(ret, 'toString', {
      enumerable: false, value: function value() {
        return 'css-' + spec.id;
      }
    });
    ruleCache[spec.id] = ret;
    return ret;
  }

  function isSelector(key) {
    var possibles = [':', '.', '[', '>', ' '],
        found = false,
        ch = key.charAt(0);
    for (var i = 0; i < possibles.length; i++) {
      if (ch === possibles[i]) {
        found = true;
        break;
      }
    }
    return found || key.indexOf('&') >= 0;
  }

  function joinSelectors(a, b) {
    var as = splitSelector(a).map(function (a) {
      return !(a.indexOf('&') >= 0) ? '&' + a : a;
    });
    var bs = splitSelector(b).map(function (b) {
      return !(b.indexOf('&') >= 0) ? '&' + b : b;
    });

    return bs.reduce(function (arr, b) {
      return arr.concat(as.map(function (a) {
        return b.replace(/\&/g, a);
      }));
    }, []).join(',');
  }

  function joinMediaQueries(a, b) {
    return a ? '@media ' + a.substring(6) + ' and ' + b.substring(6) : b;
  }

  function isMediaQuery(key) {
    return key.indexOf('@media') === 0;
  }

  function isSupports(key) {
    return key.indexOf('@supports') === 0;
  }

  function joinSupports(a, b) {
    return a ? '@supports ' + a.substring(9) + ' and ' + b.substring(9) : b;
  }

  // flatten a nested array
  function flatten(inArr) {
    var arr = [];
    for (var i = 0; i < inArr.length; i++) {
      if (Array.isArray(inArr[i])) arr = arr.concat(flatten(inArr[i]));else arr = arr.concat(inArr[i]);
    }
    return arr;
  }

  var prefixedPseudoSelectors = {
    '::placeholder': ['::-webkit-input-placeholder', '::-moz-placeholder', '::-ms-input-placeholder'],
    ':fullscreen': [':-webkit-full-screen', ':-moz-full-screen', ':-ms-fullscreen']

    // mutable! modifies dest.
  };function build(dest, _ref2) {
    var _ref2$selector = _ref2.selector,
        selector = _ref2$selector === undefined ? '' : _ref2$selector,
        _ref2$mq = _ref2.mq,
        mq = _ref2$mq === undefined ? '' : _ref2$mq,
        _ref2$supp = _ref2.supp,
        supp = _ref2$supp === undefined ? '' : _ref2$supp,
        _ref2$src = _ref2.src,
        src = _ref2$src === undefined ? {} : _ref2$src;


    if (!Array.isArray(src)) {
      src = [src];
    }
    src = flatten(src);

    src.forEach(function (_src) {
      if (isLikeRule(_src)) {
        var reg = _getRegistered(_src);
        if (reg.type !== 'css') {
          throw new Error('cannot merge this rule');
        }
        _src = reg.style;
      }
      _src = (0, _clean2.default)(_src);
      if (_src && _src.composes) {
        build(dest, { selector: selector, mq: mq, supp: supp, src: _src.composes });
      }
      Object.keys(_src || {}).forEach(function (key) {
        if (isSelector(key)) {

          if (prefixedPseudoSelectors[key]) {
            prefixedPseudoSelectors[key].forEach(function (p) {
              return build(dest, { selector: joinSelectors(selector, p), mq: mq, supp: supp, src: _src[key] });
            });
          }

          build(dest, { selector: joinSelectors(selector, key), mq: mq, supp: supp, src: _src[key] });
        } else if (isMediaQuery(key)) {
          build(dest, { selector: selector, mq: joinMediaQueries(mq, key), supp: supp, src: _src[key] });
        } else if (isSupports(key)) {
          build(dest, { selector: selector, mq: mq, supp: joinSupports(supp, key), src: _src[key] });
        } else if (key === 'composes') {
          // ignore, we already dealth with it
        } else {
          var _dest = dest;
          if (supp) {
            _dest[supp] = _dest[supp] || {};
            _dest = _dest[supp];
          }
          if (mq) {
            _dest[mq] = _dest[mq] || {};
            _dest = _dest[mq];
          }
          if (selector) {
            _dest[selector] = _dest[selector] || {};
            _dest = _dest[selector];
          }

          if (key === 'label') {
            if (hasLabels) {
              dest.label = dest.label.concat(_src.label);
            }
          } else {
            _dest[key] = _src[key];
          }
        }
      });
    });
  }

  function _css(rules) {
    var style = { label: [] };
    build(style, { src: rules }); // mutative! but worth it.

    var spec = {
      id: hashify(style),
      style: style, label: hasLabels ? style.label.join('.') : '',
      type: 'css'
    };
    return toRule(spec);
  }

  var nullrule = {
    // 'data-css-nil': ''
  };
  Object.defineProperty(nullrule, 'toString', {
    enumerable: false, value: function value() {
      return 'css-nil';
    }
  });

  var inputCaches = typeof WeakMap !== 'undefined' ? [nullrule, new WeakMap(), new WeakMap(), new WeakMap()] : [nullrule];

  var warnedWeakMapError = false;
  function multiIndexCache(fn) {
    return function (args) {
      if (inputCaches[args.length]) {
        var coi = inputCaches[args.length];
        var ctr = 0;
        while (ctr < args.length - 1) {
          if (!coi.has(args[ctr])) {
            coi.set(args[ctr], new WeakMap());
          }
          coi = coi.get(args[ctr]);
          ctr++;
        }
        if (coi.has(args[args.length - 1])) {
          var ret = coi.get(args[ctr]);

          if (registered[ret.toString().substring(4)]) {
            // make sure it hasn't been flushed
            return ret;
          }
        }
      }
      var value = fn(args);
      if (inputCaches[args.length]) {
        var _ctr = 0,
            _coi = inputCaches[args.length];
        while (_ctr < args.length - 1) {
          _coi = _coi.get(args[_ctr]);
          _ctr++;
        }
        try {
          _coi.set(args[_ctr], value);
        } catch (err) {
          if (isDev && !warnedWeakMapError) {
            var _console;

            warnedWeakMapError = true;
            (_console = console).warn.apply(_console, ['failed setting the WeakMap cache for args:'].concat(_toConsumableArray(args))); // eslint-disable-line no-console
            console.warn('this should NOT happen, please file a bug on the github repo.'); // eslint-disable-line no-console
          }
        }
      }
      return value;
    };
  }

  var cachedCss = typeof WeakMap !== 'undefined' ? multiIndexCache(_css) : _css;

  function css() {
    for (var _len2 = arguments.length, rules = Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      rules[_key2] = arguments[_key2];
    }

    if (rules[0] && rules[0].length && rules[0].raw) {
      throw new Error('you forgot to include glamor/babel in your babel plugins.');
    }

    rules = (0, _clean2.default)(rules);
    if (!rules) {
      return nullrule;
    }

    return cachedCss(rules);
  }

  css.insert = function (css) {
    var spec = {
      id: hashify(css),
      css: css,
      type: 'raw'
    };
    register(spec);
    if (!inserted[spec.id]) {
      styleSheet.insert(spec.css);
      inserted[spec.id] = isBrowser ? true : [spec.css];
    }
  };

  var insertRule = exports.insertRule = css.insert;

  css.global = function (selector, style) {
    style = (0, _clean2.default)(style);
    if (style) {
      return css.insert(toCSS({ selector: selector, style: style }));
    }
  };

  var insertGlobal = exports.insertGlobal = css.global;

  function insertKeyframe(spec) {
    if (!inserted[spec.id]) {
      var inner = Object.keys(spec.keyframes).map(function (kf) {
        var result = plugins$$1.keyframes.transform({ id: spec.id, name: kf, style: spec.keyframes[kf] });
        return result.name + '{' + (0, CSSPropertyOperations.createMarkupForStyles)(result.style) + '}';
      }).join('');

      var rules = ['-webkit-', '-moz-', '-o-', ''].map(function (prefix) {
        return '@' + prefix + 'keyframes ' + (spec.name + '_' + spec.id) + '{' + inner + '}';
      });
      rules.forEach(function (rule) {
        return styleSheet.insert(rule);
      });

      inserted[spec.id] = isBrowser ? true : rules;
    }
  }
  css.keyframes = function (name, kfs) {
    if (!kfs) {
      kfs = name, name = 'animation';
    }

    // do not ignore empty keyframe definitions for now.
    kfs = (0, _clean2.default)(kfs) || {};
    var spec = {
      id: hashify({ name: name, kfs: kfs }),
      type: 'keyframes',
      name: name,
      keyframes: kfs
    };
    register(spec);
    insertKeyframe(spec);
    return name + '_' + spec.id;
  };

  // we don't go all out for fonts as much, giving a simple font loading strategy
  // use a fancier lib if you need moar power
  css.fontFace = function (font) {
    font = (0, _clean2.default)(font);
    var spec = {
      id: hashify(font),
      type: 'font-face',
      font: font
    };
    register(spec);
    insertFontFace(spec);

    return font.fontFamily;
  };

  var fontFace = exports.fontFace = css.fontFace;
  var keyframes = exports.keyframes = css.keyframes;

  function insertFontFace(spec) {
    if (!inserted[spec.id]) {
      var rule = '@font-face{' + (0, CSSPropertyOperations.createMarkupForStyles)(spec.font) + '}';
      styleSheet.insert(rule);
      inserted[spec.id] = isBrowser ? true : [rule];
    }
  }

  // rehydrate the insertion cache with ids sent from
  // renderStatic / renderStaticOptimized
  function rehydrate(ids) {
    // load up ids
    (0, _objectAssign2.default)(inserted, ids.reduce(function (o, i) {
      return o[i] = true, o;
    }, {}));
    // assume css loaded separately
  }

  // clears out the cache and empties the stylesheet
  // best for tests, though there might be some value for SSR.

  function flush() {
    inserted = styleSheet.inserted = {};
    registered = styleSheet.registered = {};
    ruleCache = {};
    styleSheet.flush();
    styleSheet.inject();
  }

  var presets = exports.presets = {
    mobile: '(min-width: 400px)',
    Mobile: '@media (min-width: 400px)',
    phablet: '(min-width: 550px)',
    Phablet: '@media (min-width: 550px)',
    tablet: '(min-width: 750px)',
    Tablet: '@media (min-width: 750px)',
    desktop: '(min-width: 1000px)',
    Desktop: '@media (min-width: 1000px)',
    hd: '(min-width: 1200px)',
    Hd: '@media (min-width: 1200px)'
  };

  var style = exports.style = css;

  function select(selector) {
    for (var _len3 = arguments.length, styles = Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {
      styles[_key3 - 1] = arguments[_key3];
    }

    if (!selector) {
      return style(styles);
    }
    return css(_defineProperty({}, selector, styles));
  }
  var $ = exports.$ = select;

  function parent(selector) {
    for (var _len4 = arguments.length, styles = Array(_len4 > 1 ? _len4 - 1 : 0), _key4 = 1; _key4 < _len4; _key4++) {
      styles[_key4 - 1] = arguments[_key4];
    }

    return css(_defineProperty({}, selector + ' &', styles));
  }

  var merge = exports.merge = css;
  var compose = exports.compose = css;

  function media(query) {
    for (var _len5 = arguments.length, rules = Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {
      rules[_key5 - 1] = arguments[_key5];
    }

    return css(_defineProperty({}, '@media ' + query, rules));
  }

  function pseudo(selector) {
    for (var _len6 = arguments.length, styles = Array(_len6 > 1 ? _len6 - 1 : 0), _key6 = 1; _key6 < _len6; _key6++) {
      styles[_key6 - 1] = arguments[_key6];
    }

    return css(_defineProperty({}, selector, styles));
  }

  // allllll the pseudoclasses

  function active(x) {
    return pseudo(':active', x);
  }

  function any(x) {
    return pseudo(':any', x);
  }

  function checked(x) {
    return pseudo(':checked', x);
  }

  function disabled(x) {
    return pseudo(':disabled', x);
  }

  function empty(x) {
    return pseudo(':empty', x);
  }

  function enabled(x) {
    return pseudo(':enabled', x);
  }

  function _default(x) {
    return pseudo(':default', x); // note '_default' name
  }

  function first(x) {
    return pseudo(':first', x);
  }

  function firstChild(x) {
    return pseudo(':first-child', x);
  }

  function firstOfType(x) {
    return pseudo(':first-of-type', x);
  }

  function fullscreen(x) {
    return pseudo(':fullscreen', x);
  }

  function focus(x) {
    return pseudo(':focus', x);
  }

  function hover(x) {
    return pseudo(':hover', x);
  }

  function indeterminate(x) {
    return pseudo(':indeterminate', x);
  }

  function inRange(x) {
    return pseudo(':in-range', x);
  }

  function invalid(x) {
    return pseudo(':invalid', x);
  }

  function lastChild(x) {
    return pseudo(':last-child', x);
  }

  function lastOfType(x) {
    return pseudo(':last-of-type', x);
  }

  function left(x) {
    return pseudo(':left', x);
  }

  function link(x) {
    return pseudo(':link', x);
  }

  function onlyChild(x) {
    return pseudo(':only-child', x);
  }

  function onlyOfType(x) {
    return pseudo(':only-of-type', x);
  }

  function optional(x) {
    return pseudo(':optional', x);
  }

  function outOfRange(x) {
    return pseudo(':out-of-range', x);
  }

  function readOnly(x) {
    return pseudo(':read-only', x);
  }

  function readWrite(x) {
    return pseudo(':read-write', x);
  }

  function required(x) {
    return pseudo(':required', x);
  }

  function right(x) {
    return pseudo(':right', x);
  }

  function root(x) {
    return pseudo(':root', x);
  }

  function scope(x) {
    return pseudo(':scope', x);
  }

  function target(x) {
    return pseudo(':target', x);
  }

  function valid(x) {
    return pseudo(':valid', x);
  }

  function visited(x) {
    return pseudo(':visited', x);
  }

  // parameterized pseudoclasses
  function dir(p, x) {
    return pseudo(':dir(' + p + ')', x);
  }
  function lang(p, x) {
    return pseudo(':lang(' + p + ')', x);
  }
  function not(p, x) {
    // should this be a plugin?
    var selector = p.split(',').map(function (x) {
      return x.trim();
    }).map(function (x) {
      return ':not(' + x + ')';
    });
    if (selector.length === 1) {
      return pseudo(':not(' + p + ')', x);
    }
    return select(selector.join(''), x);
  }
  function nthChild(p, x) {
    return pseudo(':nth-child(' + p + ')', x);
  }
  function nthLastChild(p, x) {
    return pseudo(':nth-last-child(' + p + ')', x);
  }
  function nthLastOfType(p, x) {
    return pseudo(':nth-last-of-type(' + p + ')', x);
  }
  function nthOfType(p, x) {
    return pseudo(':nth-of-type(' + p + ')', x);
  }

  // pseudoelements
  function after(x) {
    return pseudo('::after', x);
  }
  function before(x) {
    return pseudo('::before', x);
  }
  function firstLetter(x) {
    return pseudo('::first-letter', x);
  }
  function firstLine(x) {
    return pseudo('::first-line', x);
  }
  function selection(x) {
    return pseudo('::selection', x);
  }
  function backdrop(x) {
    return pseudo('::backdrop', x);
  }
  function placeholder(x) {
    // https://github.com/threepointone/glamor/issues/14
    return css({ '::placeholder': x });
  }

  /*** helpers for web components ***/
  // https://github.com/threepointone/glamor/issues/16

  function cssFor() {
    for (var _len7 = arguments.length, rules = Array(_len7), _key7 = 0; _key7 < _len7; _key7++) {
      rules[_key7] = arguments[_key7];
    }

    rules = (0, _clean2.default)(rules);
    return rules ? rules.map(function (r) {
      var style = { label: [] };
      build(style, { src: r }); // mutative! but worth it.
      return deconstructedStyleToCSS(hashify(style), deconstruct(style)).join('');
    }).join('') : '';
  }

  function attribsFor() {
    for (var _len8 = arguments.length, rules = Array(_len8), _key8 = 0; _key8 < _len8; _key8++) {
      rules[_key8] = arguments[_key8];
    }

    rules = (0, _clean2.default)(rules);
    var htmlAttributes = rules ? rules.map(function (rule) {
      idFor(rule); // throwaway check for rule
      var key = Object.keys(rule)[0],
          value = rule[key];
      return key + '="' + (value || '') + '"';
    }).join(' ') : '';

    return htmlAttributes;
  }
  });

  unwrapExports(lib);
  var lib_1 = lib.compose;
  var lib_2 = lib.merge;
  var lib_3 = lib.$;
  var lib_4 = lib.style;
  var lib_5 = lib.presets;
  var lib_6 = lib.keyframes;
  var lib_7 = lib.fontFace;
  var lib_8 = lib.insertGlobal;
  var lib_9 = lib.insertRule;
  var lib_10 = lib.plugins;
  var lib_11 = lib.styleSheet;
  var lib_12 = lib.speedy;
  var lib_13 = lib.simulations;
  var lib_14 = lib.simulate;
  var lib_15 = lib.cssLabels;
  var lib_16 = lib.isLikeRule;
  var lib_17 = lib.idFor;
  var lib_18 = lib.css;
  var lib_19 = lib.rehydrate;
  var lib_20 = lib.flush;
  var lib_21 = lib.select;
  var lib_22 = lib.parent;
  var lib_23 = lib.media;
  var lib_24 = lib.pseudo;
  var lib_25 = lib.active;
  var lib_26 = lib.any;
  var lib_27 = lib.checked;
  var lib_28 = lib.disabled;
  var lib_29 = lib.empty;
  var lib_30 = lib.enabled;
  var lib_31 = lib._default;
  var lib_32 = lib.first;
  var lib_33 = lib.firstChild;
  var lib_34 = lib.firstOfType;
  var lib_35 = lib.fullscreen;
  var lib_36 = lib.focus;
  var lib_37 = lib.hover;
  var lib_38 = lib.indeterminate;
  var lib_39 = lib.inRange;
  var lib_40 = lib.invalid;
  var lib_41 = lib.lastChild;
  var lib_42 = lib.lastOfType;
  var lib_43 = lib.left;
  var lib_44 = lib.link;
  var lib_45 = lib.onlyChild;
  var lib_46 = lib.onlyOfType;
  var lib_47 = lib.optional;
  var lib_48 = lib.outOfRange;
  var lib_49 = lib.readOnly;
  var lib_50 = lib.readWrite;
  var lib_51 = lib.required;
  var lib_52 = lib.right;
  var lib_53 = lib.root;
  var lib_54 = lib.scope;
  var lib_55 = lib.target;
  var lib_56 = lib.valid;
  var lib_57 = lib.visited;
  var lib_58 = lib.dir;
  var lib_59 = lib.lang;
  var lib_60 = lib.not;
  var lib_61 = lib.nthChild;
  var lib_62 = lib.nthLastChild;
  var lib_63 = lib.nthLastOfType;
  var lib_64 = lib.nthOfType;
  var lib_65 = lib.after;
  var lib_66 = lib.before;
  var lib_67 = lib.firstLetter;
  var lib_68 = lib.firstLine;
  var lib_69 = lib.selection;
  var lib_70 = lib.backdrop;
  var lib_71 = lib.placeholder;
  var lib_72 = lib.cssFor;
  var lib_73 = lib.attribsFor;

  function entries(dict) {
    var keys = Object.keys(dict);
    var l = keys.length;
    var values = new Array(l);
    for(var i = 0 ,i_finish = l - 1 | 0; i <= i_finish; ++i){
      var key = keys[i];
      values[i] = /* tuple */[
        key,
        dict[key]
      ];
    }
    return values;
  }

  function fromList(entries) {
    var dict = { };
    var _param = entries;
    while(true) {
      var param = _param;
      if (param) {
        var match = param[0];
        dict[match[0]] = match[1];
        _param = param[1];
        continue ;
      } else {
        return dict;
      }
    }}
  /* unsafeDeleteKey Not a pure module */

  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function join$1(separator, strings) {
    var _acc = "";
    var _strings = strings;
    while(true) {
      var strings$1 = _strings;
      var acc = _acc;
      if (strings$1) {
        var xs = strings$1[1];
        var x = strings$1[0];
        if (xs) {
          _strings = xs;
          _acc = acc + (x + separator);
          continue ;
        } else {
          return acc + x;
        }
      } else {
        return acc;
      }
    }}

  function makeDict(ruleset) {
    var toJs = function (rule) {
      var variant = rule[0];
      if (variant !== -659583595) {
        if (variant >= 488687584) {
          if (variant >= 829240095) {
            var match = rule[1];
            return /* tuple */[
                    match[0],
                    makeDict(match[1])
                  ];
          } else {
            return /* tuple */[
                    "boxShadow",
                    rule[1]
                  ];
          }
        } else if (variant >= -434952966) {
          var match$1 = rule[1];
          return /* tuple */[
                  match$1[0],
                  match$1[1]
                ];
        } else {
          return /* tuple */[
                  "animation",
                  rule[1]
                ];
        }
      } else {
        return /* tuple */[
                "transition",
                rule[1]
              ];
      }
    };
    return fromList(map(toJs, ruleset));
  }

  function $$global(selector, rules) {
    lib_18.global(selector, makeDict(rules));
    return /* () */0;
  }

  function style(rules) {
    return lib_18(makeDict(rev(rules))).toString();
  }

  function d(property, value) {
    return /* `declaration */[
            -434952966,
            /* tuple */[
              property,
              value
            ]
          ];
  }

  function string_of_float$1(f) {
    return "" + (String(f) + "");
  }

  function string_of_angle(param) {
    var variant = param[0];
    if (variant >= 4995526) {
      if (variant >= 5690837) {
        return string_of_float$1(param[1]) + "rad";
      } else {
        return String(param[1]) + "deg";
      }
    } else if (variant >= -855250051) {
      return string_of_float$1(param[1]) + "turn";
    } else {
      return string_of_float$1(param[1]) + "grad";
    }
  }

  function string_of_color(param) {
    if (typeof param === "number") {
      if (param >= 582626130) {
        return "transparent";
      } else {
        return "currentColor";
      }
    } else {
      var variant = param[0];
      if (variant !== -878128972) {
        if (variant >= 5197569) {
          if (variant >= 5692173) {
            var match = param[1];
            return "rgb(" + (join$1(", ", /* :: */[
                          String(match[0]),
                          /* :: */[
                            String(match[1]),
                            /* :: */[
                              String(match[2]),
                              /* [] */0
                            ]
                          ]
                        ]) + ")");
          } else {
            var match$1 = param[1];
            return "hsl(" + (join$1(", ", /* :: */[
                          String(match$1[0]),
                          /* :: */[
                            String(match$1[1]) + "%",
                            /* :: */[
                              String(match$1[2]) + "%",
                              /* [] */0
                            ]
                          ]
                        ]) + ")");
          }
        } else if (variant >= 5194459) {
          return "#" + param[1];
        } else {
          var match$2 = param[1];
          return "hsla(" + (join$1(", ", /* :: */[
                        String(match$2[0]),
                        /* :: */[
                          String(match$2[1]) + "%",
                          /* :: */[
                            String(match$2[2]) + "%",
                            /* :: */[
                              string_of_float$1(match$2[3]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]) + ")");
        }
      } else {
        var match$3 = param[1];
        return "rgba(" + (join$1(", ", /* :: */[
                      String(match$3[0]),
                      /* :: */[
                        String(match$3[1]),
                        /* :: */[
                          String(match$3[2]),
                          /* :: */[
                            string_of_float$1(match$3[3]),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]) + ")");
      }
    }
  }

  function hex(x) {
    return /* `hex */[
            5194459,
            x
          ];
  }

  function string_of_stops(stops) {
    return join$1(", ", map((function (param) {
                      return join$1(" ", /* :: */[
                                  string_of_color(param[1]),
                                  /* :: */[
                                    String(param[0]) + "%",
                                    /* [] */0
                                  ]
                                ]);
                    }), stops));
  }

  function string_of_length(param) {
    if (typeof param === "number") {
      return "0";
    } else {
      var variant = param[0];
      if (variant >= 22643) {
        if (variant >= 25096) {
          if (variant >= 26433) {
            if (variant >= 5691738) {
              return string_of_float$1(param[1]) + "rem";
            } else {
              return string_of_float$1(param[1]) + "vw";
            }
          } else if (variant >= 26418) {
            return string_of_float$1(param[1]) + "vh";
          } else {
            return String(param[1]) + "px";
          }
        } else if (variant !== 24416) {
          if (variant >= 25092) {
            return String(param[1]) + "pt";
          } else {
            return string_of_float$1(param[1]) + "ex";
          }
        } else {
          return string_of_float$1(param[1]) + "mm";
        }
      } else if (variant >= -119887163) {
        if (variant >= 22186) {
          if (variant >= 22632) {
            return string_of_float$1(param[1]) + "em";
          } else {
            return string_of_float$1(param[1]) + "cm";
          }
        } else if (variant >= 22181) {
          return string_of_float$1(param[1]) + "ch";
        } else {
          return string_of_float$1(param[1]) + "%";
        }
      } else if (variant !== -833472530) {
        if (variant >= -833470756) {
          return string_of_float$1(param[1]) + "vmin";
        } else {
          var match = param[1];
          if (match[0] >= 5745024) {
            return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
          } else {
            return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
          }
        }
      } else {
        return string_of_float$1(param[1]) + "vmax";
      }
    }
  }

  function string_of_length_cascading(param) {
    if (typeof param === "number") {
      if (param !== -601204732) {
        if (param >= 653193961) {
          return "unset";
        } else {
          return "0";
        }
      } else {
        return "inherit";
      }
    } else {
      var variant = param[0];
      if (variant >= 22643) {
        if (variant >= 25096) {
          if (variant >= 26433) {
            if (variant >= 5691738) {
              return string_of_float$1(param[1]) + "rem";
            } else {
              return string_of_float$1(param[1]) + "vw";
            }
          } else if (variant >= 26418) {
            return string_of_float$1(param[1]) + "vh";
          } else {
            return String(param[1]) + "px";
          }
        } else if (variant !== 24416) {
          if (variant >= 25092) {
            return String(param[1]) + "pt";
          } else {
            return string_of_float$1(param[1]) + "ex";
          }
        } else {
          return string_of_float$1(param[1]) + "mm";
        }
      } else if (variant >= -119887163) {
        if (variant >= 22186) {
          if (variant >= 22632) {
            return string_of_float$1(param[1]) + "em";
          } else {
            return string_of_float$1(param[1]) + "cm";
          }
        } else if (variant >= 22181) {
          return string_of_float$1(param[1]) + "ch";
        } else {
          return string_of_float$1(param[1]) + "%";
        }
      } else if (variant !== -833472530) {
        if (variant >= -833470756) {
          return string_of_float$1(param[1]) + "vmin";
        } else {
          var match = param[1];
          if (match[0] >= 5745024) {
            return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
          } else {
            return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
          }
        }
      } else {
        return string_of_float$1(param[1]) + "vmax";
      }
    }
  }

  function em(x) {
    return /* `em */[
            22632,
            x
          ];
  }

  function pct(x) {
    return /* `percent */[
            -119887163,
            x
          ];
  }

  function px(x) {
    return /* `px */[
            25096,
            x
          ];
  }

  function rem(x) {
    return /* `rem */[
            5691738,
            x
          ];
  }

  function url(x) {
    return /* `url */[
            5843823,
            x
          ];
  }

  function display(x) {
    return d("display", x >= 53323314 ? (
                  x !== 64712127 ? (
                      x >= 653193961 ? (
                          x >= 888960333 ? "block" : "unset"
                        ) : (
                          x >= 423610969 ? "inline" : "inline-flex"
                        )
                    ) : "inline-grid"
                ) : (
                  x !== -999565626 ? (
                      x >= -601204732 ? (
                          x >= -147785676 ? "inline-block" : "inherited"
                        ) : (
                          x >= -922086728 ? "none" : "flex"
                        )
                    ) : "grid"
                ));
  }

  function position$1(x) {
    return d("position", x >= 100392110 ? (
                  x >= 653193961 ? (
                      x >= 903134412 ? "relative" : "unset"
                    ) : (
                      x >= 188263721 ? "sticky" : "static"
                    )
                ) : (
                  x !== -601204732 ? (
                      x >= 10615156 ? "fixed" : "absolute"
                    ) : "inherited"
                ));
  }

  function top(x) {
    return d("top", string_of_length(x));
  }

  function right(x) {
    return d("right", string_of_length(x));
  }

  function string_of_margin(param) {
    if (typeof param === "number") {
      if (param >= -789508312) {
        return "0";
      } else {
        return "auto";
      }
    } else {
      var variant = param[0];
      if (variant >= 22643) {
        if (variant >= 25096) {
          if (variant >= 26433) {
            if (variant >= 5691738) {
              return string_of_float$1(param[1]) + "rem";
            } else {
              return string_of_float$1(param[1]) + "vw";
            }
          } else if (variant >= 26418) {
            return string_of_float$1(param[1]) + "vh";
          } else {
            return String(param[1]) + "px";
          }
        } else if (variant !== 24416) {
          if (variant >= 25092) {
            return String(param[1]) + "pt";
          } else {
            return string_of_float$1(param[1]) + "ex";
          }
        } else {
          return string_of_float$1(param[1]) + "mm";
        }
      } else if (variant >= -119887163) {
        if (variant >= 22186) {
          if (variant >= 22632) {
            return string_of_float$1(param[1]) + "em";
          } else {
            return string_of_float$1(param[1]) + "cm";
          }
        } else if (variant >= 22181) {
          return string_of_float$1(param[1]) + "ch";
        } else {
          return string_of_float$1(param[1]) + "%";
        }
      } else if (variant !== -833472530) {
        if (variant >= -833470756) {
          return string_of_float$1(param[1]) + "vmin";
        } else {
          var match = param[1];
          if (match[0] >= 5745024) {
            return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
          } else {
            return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
          }
        }
      } else {
        return string_of_float$1(param[1]) + "vmax";
      }
    }
  }

  function margin(x) {
    return d("margin", string_of_margin(x));
  }

  function margin2(v, h) {
    return d("margin", join$1(" ", map(string_of_margin, /* :: */[
                        v,
                        /* :: */[
                          h,
                          /* [] */0
                        ]
                      ])));
  }

  function marginLeft(x) {
    return d("marginLeft", string_of_margin(x));
  }

  function marginRight(x) {
    return d("marginRight", string_of_margin(x));
  }

  function marginTop(x) {
    return d("marginTop", string_of_margin(x));
  }

  function marginBottom(x) {
    return d("marginBottom", string_of_margin(x));
  }

  function padding(x) {
    return d("padding", string_of_length(x));
  }

  function padding2(v, h) {
    return d("padding", join$1(" ", map(string_of_length, /* :: */[
                        v,
                        /* :: */[
                          h,
                          /* [] */0
                        ]
                      ])));
  }

  function paddingLeft(x) {
    return d("paddingLeft", string_of_length(x));
  }

  function paddingTop(x) {
    return d("paddingTop", string_of_length(x));
  }

  function string_of_dimension(param) {
    if (typeof param === "number") {
      if (param >= -550577721) {
        if (param >= 60557045) {
          return "max-content";
        } else {
          return "min-content";
        }
      } else if (param >= -789508312) {
        return "0";
      } else {
        return "auto";
      }
    } else {
      var variant = param[0];
      if (variant >= 22643) {
        if (variant >= 25096) {
          if (variant >= 26433) {
            if (variant >= 5691738) {
              return string_of_float$1(param[1]) + "rem";
            } else {
              return string_of_float$1(param[1]) + "vw";
            }
          } else if (variant >= 26418) {
            return string_of_float$1(param[1]) + "vh";
          } else {
            return String(param[1]) + "px";
          }
        } else if (variant >= 24416) {
          if (variant >= 25092) {
            return String(param[1]) + "pt";
          } else {
            return string_of_float$1(param[1]) + "mm";
          }
        } else if (variant >= 22860) {
          return string_of_float$1(param[1]) + "fr";
        } else {
          return string_of_float$1(param[1]) + "ex";
        }
      } else if (variant >= -119887163) {
        if (variant >= 22186) {
          if (variant >= 22632) {
            return string_of_float$1(param[1]) + "em";
          } else {
            return string_of_float$1(param[1]) + "cm";
          }
        } else if (variant >= 22181) {
          return string_of_float$1(param[1]) + "ch";
        } else {
          return string_of_float$1(param[1]) + "%";
        }
      } else if (variant !== -833472530) {
        if (variant >= -833470756) {
          return string_of_float$1(param[1]) + "vmin";
        } else {
          var match = param[1];
          if (match[0] >= 5745024) {
            return "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")")));
          } else {
            return "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
          }
        }
      } else {
        return string_of_float$1(param[1]) + "vmax";
      }
    }
  }

  function width(x) {
    return d("width", string_of_dimension(x));
  }

  function maxWidth(x) {
    return d("maxWidth", string_of_dimension(x));
  }

  function minWidth(x) {
    return d("minWidth", string_of_dimension(x));
  }

  function height$1(x) {
    return d("height", string_of_dimension(x));
  }

  function minHeight(x) {
    return d("minHeight", string_of_dimension(x));
  }

  function boxSizing(x) {
    return d("boxSizing", x >= 9307263 ? "border-box" : "content-box");
  }

  function $$float$3(x) {
    return d("float", x !== -922086728 ? (
                  x >= -379319332 ? "right" : "left"
                ) : "none");
  }

  function string_of_overflow(param) {
    if (param >= -862584982) {
      if (param >= 589592690) {
        return "visible";
      } else {
        return "hidden";
      }
    } else if (param >= -949692403) {
      return "scroll";
    } else {
      return "auto";
    }
  }

  function overflow(x) {
    return d("overflow", string_of_overflow(x));
  }

  function overflowY(x) {
    return d("overflowY", string_of_overflow(x));
  }

  function contentRule(s) {
    return d("content", s);
  }

  function string_of_borderstyle(param) {
    if (param >= 568403505) {
      if (param >= 841979626) {
        return "dotted";
      } else {
        return "dashed";
      }
    } else if (param >= 12956715) {
      return "solid";
    } else {
      return "none";
    }
  }

  function border(px, style, color) {
    return d("border", join$1(" ", /* :: */[
                    string_of_length(px),
                    /* :: */[
                      string_of_borderstyle(style),
                      /* :: */[
                        string_of_color(color),
                        /* [] */0
                      ]
                    ]
                  ]));
  }

  function borderWidth(x) {
    return d("borderWidth", string_of_length(x));
  }

  function borderColor(x) {
    return d("borderColor", string_of_color(x));
  }

  function borderLeft(px, style, color) {
    return d("borderLeft", join$1(" ", /* :: */[
                    string_of_length(px),
                    /* :: */[
                      string_of_borderstyle(style),
                      /* :: */[
                        string_of_color(color),
                        /* [] */0
                      ]
                    ]
                  ]));
  }

  function borderTop(px, style, color) {
    return d("borderTop", join$1(" ", /* :: */[
                    string_of_length(px),
                    /* :: */[
                      string_of_borderstyle(style),
                      /* :: */[
                        string_of_color(color),
                        /* [] */0
                      ]
                    ]
                  ]));
  }

  function borderBottom(px, style, color) {
    return d("borderBottom", join$1(" ", /* :: */[
                    string_of_length(px),
                    /* :: */[
                      string_of_borderstyle(style),
                      /* :: */[
                        string_of_color(color),
                        /* [] */0
                      ]
                    ]
                  ]));
  }

  function borderRadius(i) {
    return d("borderRadius", string_of_length(i));
  }

  function backgroundColor(x) {
    return d("backgroundColor", string_of_color(x));
  }

  function backgroundImage(x) {
    var tmp;
    if (typeof x === "number") {
      tmp = "none";
    } else {
      var variant = x[0];
      if (variant !== -160280644) {
        if (variant >= 119548911) {
          if (variant >= 616379637) {
            var match = x[1];
            tmp = "linear-gradient(" + (string_of_angle(match[0]) + (", " + (string_of_stops(match[1]) + ")")));
          } else {
            tmp = "radial-gradient(" + (string_of_stops(x[1]) + ")");
          }
        } else {
          tmp = variant >= 5843823 ? "url(" + (x[1] + ")") : "repeating-radial-gradient(" + (string_of_stops(x[1]) + ")");
        }
      } else {
        var match$1 = x[1];
        tmp = "repeating-linear-gradient(" + (string_of_angle(match$1[0]) + (", " + (string_of_stops(match$1[1]) + ")")));
      }
    }
    return d("backgroundImage", tmp);
  }

  function backgroundRepeat(x) {
    return d("backgroundRepeat", x >= 646437021 ? (
                  x >= 646437022 ? "repeat-y" : "repeat-x"
                ) : (
                  x >= 108828507 ? "repeat" : "no-repeat"
                ));
  }

  function cursor$1(x) {
    return d("cursor", x >= -459627717 ? (
                  x >= 365450254 ? (
                      x !== 465819841 ? (
                          x >= 626862894 ? (
                              x >= 939907157 ? "not-allowed" : "context-menu"
                            ) : (
                              x >= 563171728 ? "alias" : "all-scroll"
                            )
                        ) : "default"
                    ) : (
                      x !== -88732200 ? (
                          x >= 103479213 ? (
                              x >= 180897442 ? "crosshair" : "progress"
                            ) : (
                              x >= -19620980 ? "grabbing" : "zoom-out"
                            )
                        ) : "zoom-in"
                    )
                ) : (
                  x >= -933174511 ? (
                      x !== -922086728 ? (
                          x >= -822977931 ? (
                              x >= -786317123 ? "pointer" : "wait"
                            ) : (
                              x >= -856044371 ? "text" : "move"
                            )
                        ) : "none"
                    ) : (
                      x !== -1044569694 ? (
                          x >= -999567412 ? (
                              x >= -989121855 ? "help" : "grab"
                            ) : (
                              x >= -1044071499 ? "copy" : "auto"
                            )
                        ) : "cell"
                    )
                ));
  }

  function string_of_listStyleType(param) {
    if (param >= -484197732) {
      if (param >= 700345660) {
        if (param >= 787279419) {
          if (param >= 826920258) {
            return "upper-latin";
          } else {
            return "upper-roman";
          }
        } else if (param >= 739986499) {
          return "lower-latin";
        } else {
          return "lower-roman";
        }
      } else if (param >= -422333295) {
        return "decimal";
      } else {
        return "upper-alpha";
      }
    } else if (param >= -703761904) {
      if (param >= -655228771) {
        if (param >= -571131491) {
          return "lower-alpha";
        } else {
          return "square";
        }
      } else if (param >= -699686657) {
        return "lower-greek";
      } else {
        return "circle";
      }
    } else if (param >= -922086728) {
      return "none";
    } else {
      return "disc";
    }
  }

  function listStyleType(x) {
    return d("listStyleType", string_of_listStyleType(x));
  }

  function opacity(x) {
    return d("opacity", string_of_float$1(x));
  }

  function fontStyleToJs(param) {
    if (param !== 107228912) {
      if (param >= 734792881) {
        if (param >= 812216871) {
          return "normal";
        } else {
          return "oblique";
        }
      } else if (param >= 653193961) {
        return "unset";
      } else {
        return "inherit";
      }
    } else {
      return "italic";
    }
  }

  function color(x) {
    return d("color", string_of_color(x));
  }

  function fontFamily(x) {
    return d("fontFamily", x);
  }

  function fontSize(x) {
    return d("fontSize", string_of_length_cascading(x));
  }

  function fontStyle(x) {
    return d("fontStyle", fontStyleToJs(x));
  }

  function fontWeight(x) {
    return d("fontWeight", String(x));
  }

  function lineHeight(x) {
    var tmp;
    if (typeof x === "number") {
      tmp = x !== -789508312 ? (
          x >= 653193961 ? (
              x >= 812216871 ? "normal" : "unset"
            ) : (
              x >= -601204732 ? "inherit" : "auto"
            )
        ) : "0";
    } else {
      var variant = x[0];
      if (variant >= 22643) {
        tmp = variant >= 26418 ? (
            variant >= 4845682 ? (
                variant >= 5691738 ? string_of_float$1(x[1]) + "rem" : string_of_float$1(x[1])
              ) : (
                variant >= 26433 ? string_of_float$1(x[1]) + "vw" : string_of_float$1(x[1]) + "vh"
              )
          ) : (
            variant >= 25092 ? (
                variant >= 25096 ? String(x[1]) + "px" : String(x[1]) + "pt"
              ) : (
                variant >= 24416 ? string_of_float$1(x[1]) + "mm" : string_of_float$1(x[1]) + "ex"
              )
          );
      } else if (variant >= -119887163) {
        tmp = variant >= 22186 ? (
            variant >= 22632 ? string_of_float$1(x[1]) + "em" : string_of_float$1(x[1]) + "cm"
          ) : (
            variant >= 22181 ? string_of_float$1(x[1]) + "ch" : string_of_float$1(x[1]) + "%"
          );
      } else if (variant !== -833472530) {
        if (variant >= -833470756) {
          tmp = string_of_float$1(x[1]) + "vmin";
        } else {
          var match = x[1];
          tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
        }
      } else {
        tmp = string_of_float$1(x[1]) + "vmax";
      }
    }
    return d("lineHeight", tmp);
  }

  function textAlign(x) {
    return d("textAlign", x >= 62250832 ? (
                  x >= 98248149 ? "center" : "justify"
                ) : (
                  x >= -379319332 ? "right" : "left"
                ));
  }

  function textDecoration(x) {
    return d("textDecoration", x >= 131142924 ? (
                  x >= 412155569 ? "line-through" : "underline"
                ) : (
                  x >= -922086728 ? "none" : "overline"
                ));
  }

  function textOverflow(x) {
    return d("textOverflow", typeof x === "number" ? (
                  x >= 166888785 ? "ellipsis" : "clip"
                ) : x[1]);
  }

  function verticalAlign(x) {
    var tmp;
    if (typeof x === "number") {
      tmp = x >= 5793429 ? (
          x !== 79692155 ? (
              x >= 476669816 ? (
                  x >= 516406248 ? "text-top" : "text-bottom"
                ) : (
                  x >= 287825029 ? "baseline" : "top"
                )
            ) : "super"
        ) : (
          x !== -866200747 ? (
              x >= -445061397 ? (
                  x >= 5745024 ? "sub" : "bottom"
                ) : (
                  x >= -789508312 ? "0" : "auto"
                )
            ) : "middle"
        );
    } else {
      var variant = x[0];
      if (variant >= 22643) {
        tmp = variant >= 25096 ? (
            variant >= 26433 ? (
                variant >= 5691738 ? string_of_float$1(x[1]) + "rem" : string_of_float$1(x[1]) + "vw"
              ) : (
                variant >= 26418 ? string_of_float$1(x[1]) + "vh" : String(x[1]) + "px"
              )
          ) : (
            variant !== 24416 ? (
                variant >= 25092 ? String(x[1]) + "pt" : string_of_float$1(x[1]) + "ex"
              ) : string_of_float$1(x[1]) + "mm"
          );
      } else if (variant >= -119887163) {
        tmp = variant >= 22186 ? (
            variant >= 22632 ? string_of_float$1(x[1]) + "em" : string_of_float$1(x[1]) + "cm"
          ) : (
            variant >= 22181 ? string_of_float$1(x[1]) + "ch" : string_of_float$1(x[1]) + "%"
          );
      } else if (variant !== -833472530) {
        if (variant >= -833470756) {
          tmp = string_of_float$1(x[1]) + "vmin";
        } else {
          var match = x[1];
          tmp = match[0] >= 5745024 ? "calc(" + (string_of_length(match[1]) + (" - " + (string_of_length(match[2]) + ")"))) : "calc(" + (string_of_length(match[1]) + (" + " + (string_of_length(match[2]) + ")")));
        }
      } else {
        tmp = string_of_float$1(x[1]) + "vmax";
      }
    }
    return d("verticalAlign", tmp);
  }

  function whiteSpace(x) {
    return d("whiteSpace", x !== 538440119 ? (
                  x >= 812216871 ? (
                      x >= 867913355 ? "nowrap" : "normal"
                    ) : (
                      x >= 660870029 ? "pre-wrap" : "pre"
                    )
                ) : "pre-line");
  }

  function wordBreak(x) {
    return d("wordBreak", x !== 812216871 ? (
                  x >= 892748188 ? "keep-all" : "break-all"
                ) : "normal");
  }

  function selector(selector$1, rules) {
    return /* `selector */[
            829240095,
            /* tuple */[
              selector$1,
              rules
            ]
          ];
  }

  function before(param) {
    return selector("::before", param);
  }

  function hover(param) {
    return selector(":hover", param);
  }

  function placeholder(param) {
    return selector("::placeholder", param);
  }

  var black = /* `hex */[
    5194459,
    "000000"
  ];

  var blue = /* `hex */[
    5194459,
    "0000FF"
  ];

  var red = /* `hex */[
    5194459,
    "FF0000"
  ];

  var white = /* `hex */[
    5194459,
    "FFFFFF"
  ];

  var yellow = /* `hex */[
    5194459,
    "FFFF00"
  ];

  var solid = /* solid */12956715;

  var auto = /* auto */-1065951377;

  var borderBox = /* borderBox */9307263;
  /*  Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function setStyle(n, key, value) {
    n.style[key] = value;
    return /* () */0;
  }

  function setStyleProperty(n, $staropt$star, key, value) {
    var priority = $staropt$star !== undefined ? $staropt$star : false;
    var style = n.style;
    var match = style.setProperty;
    if (match !== undefined) {
      return style.setProperty(key, value, priority ? "important" : null);
    } else {
      return setStyle(n, key, value);
    }
  }

  function insertBefore(n, child, refNode) {
    return n.insertBefore(child, refNode);
  }

  function setAttribute(n, key, value) {
    return n.setAttribute(key, value);
  }

  function setAttributeNsOptional(n, namespace, key, value) {
    if (namespace === "") {
      return n.setAttribute(key, value);
    } else {
      return n.setAttributeNS(namespace, key, value);
    }
  }

  function removeAttribute(n, key) {
    return n.removeAttribute(key);
  }

  function removeAttributeNsOptional(n, namespace, key) {
    if (namespace === "") {
      return n.removeAttribute(key);
    } else {
      return n.removeAttributeNS(namespace, key);
    }
  }

  function addEventListener$2(n, typ, listener, options) {
    return n.addEventListener(typ, listener, options);
  }

  function removeEventListener$1(n, typ, listener, options) {
    return n.removeEventListener(typ, listener, options);
  }

  function remove_polyfill() {
    return (
    // remove polyfill
    (function() {
      if (!('remove' in Element.prototype)) {
        Element.prototype.remove = function() {
          if (this.parentNode) {
            this.parentNode.removeChild(this);
          }
        };
      }  }())
    );
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  var basePadding = em(1.0);

  var greyLight = hex("dae1e7");

  var greyLighter = hex("f1f5f8");

  var btnBackground = hex("d6d6d6");

  $$global("body", /* :: */[
        margin(px(0)),
        /* [] */0
      ]);

  $$global("html", /* :: */[
        display(/* block */888960333),
        /* :: */[
          fontFamily("sans-serif"),
          /* :: */[
            color(black),
            /* [] */0
          ]
        ]
      ]);

  $$global("h1, h2, h3", /* :: */[
        color(black),
        /* [] */0
      ]);

  $$global("h1, h2, h3, p", /* :: */[
        margin2(em(0.2), px(0)),
        /* :: */[
          lineHeight(em(1.2)),
          /* [] */0
        ]
      ]);

  $$global("a", /* :: */[
        textDecoration(/* none */-922086728),
        /* [] */0
      ]);

  $$global("h1", /* :: */[
        fontWeight(400),
        /* :: */[
          fontSize(em(1.4)),
          /* [] */0
        ]
      ]);

  $$global("h2", /* :: */[
        fontWeight(400),
        /* :: */[
          fontSize(em(1.3)),
          /* [] */0
        ]
      ]);

  $$global("h3", /* :: */[
        fontWeight(300),
        /* :: */[
          fontSize(em(1.2)),
          /* [] */0
        ]
      ]);

  $$global("p", /* :: */[
        fontWeight(300),
        /* :: */[
          fontSize(em(1.0)),
          /* [] */0
        ]
      ]);

  $$global("a", /* :: */[
        color(hex("005999")),
        /* [] */0
      ]);

  $$global("ul, li", /* :: */[
        padding(px(0)),
        /* :: */[
          margin(px(0)),
          /* :: */[
            listStyleType(/* none */-922086728),
            /* [] */0
          ]
        ]
      ]);

  $$global("img", /* :: */[
        maxWidth(pct(100.0)),
        /* :: */[
          height$1(auto),
          /* [] */0
        ]
      ]);

  var init$3 = $$global("input", /* :: */[
        boxSizing(borderBox),
        /* :: */[
          maxWidth(pct(100.0)),
          /* :: */[
            minWidth(pct(100.0)),
            /* :: */[
              width(pct(100.0)),
              /* :: */[
                padding(rem(0.5)),
                /* :: */[
                  fontSize(pct(100.0)),
                  /* :: */[
                    borderRadius(em(0.2)),
                    /* :: */[
                      borderWidth(px(1)),
                      /* :: */[
                        borderColor(hex("d8d8d8")),
                        /* :: */[
                          placeholder(/* :: */[
                                opacity(50.0),
                                /* [] */0
                              ]),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);

  function loadingIndicator(show) {
    var base_000 = position$1(/* absolute */-1013592457);
    var base_001 = /* :: */[
      backgroundColor(yellow),
      /* :: */[
        padding(px(3)),
        /* [] */0
      ]
    ];
    var base = /* :: */[
      base_000,
      base_001
    ];
    var display$$1 = show ? /* :: */[
        opacity(1.0),
        /* [] */0
      ] : /* :: */[
        opacity(0.0),
        /* [] */0
      ];
    return style(append(base, display$$1));
  }

  var spinnerIcon = style(/* :: */[
        cursor$1(/* pointer */-786317123),
        /* :: */[
          width(px(40)),
          /* :: */[
            height$1(px(40)),
            /* :: */[
              backgroundImage(url("icons/spinner-solid.svg")),
              /* :: */[
                display(/* inlineBlock */-147785676),
                /* :: */[
                  verticalAlign(/* middle */-866200747),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]);

  function pageYScroll(allow) {
    var body$$1 = body(/* () */0);
    if (allow) {
      return removeAttribute(body$$1, "class");
    } else {
      return setAttribute(body$$1, "class", "preventYScroll");
    }
  }

  function statusStyle(error) {
    var bkgColor = error ? red : white;
    return style(/* :: */[
                padding(basePadding),
                /* :: */[
                  margin(basePadding),
                  /* :: */[
                    backgroundColor(bkgColor),
                    /* [] */0
                  ]
                ]
              ]);
  }

  var info = statusStyle(false);

  var error$1 = statusStyle(true);

  var searchBox = style(/* :: */[
        fontSize(em(1.5)),
        /* :: */[
          backgroundColor(white),
          /* :: */[
            borderRadius(px(4)),
            /* [] */0
          ]
        ]
      ]);

  var searchBoxWrapper = style(/* :: */[
        padding(basePadding),
        /* :: */[
          borderBottom(px(2), /* solid */12956715, black),
          /* [] */0
        ]
      ]);

  function searchBoxSubmit(active$$1) {
    return style(append(/* :: */[
                    border(px(2), /* solid */12956715, black),
                    /* :: */[
                      padding(em(0.8)),
                      /* :: */[
                        margin2(em(1.0), px(0)),
                        /* :: */[
                          fontSize(em(1.3)),
                          /* :: */[
                            backgroundColor(btnBackground),
                            /* [] */0
                          ]
                        ]
                      ]
                    ]
                  ], active$$1 === true ? /* :: */[
                      cursor$1(/* pointer */-786317123),
                      /* [] */0
                    ] : /* [] */0));
  }

  var facetModal = style(/* :: */[
        position$1(/* fixed */10615156),
        /* :: */[
          top(px(0)),
          /* :: */[
            width(/* `percent */[
                  -119887163,
                  100.0
                ]),
            /* :: */[
              height$1(/* `percent */[
                    -119887163,
                    100.0
                  ]),
              /* :: */[
                backgroundColor(white),
                /* :: */[
                  overflowY(/* scroll */-949692403),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]);

  var facetHeader = style(/* :: */[
        overflow(/* hidden */-862584982),
        /* :: */[
          padding2(em(1.0), basePadding),
          /* :: */[
            borderBottom(px(1), /* solid */12956715, hex("d6d6d6")),
            /* :: */[
              backgroundColor(greyLighter),
              /* [] */0
            ]
          ]
        ]
      ]);

  var facetHeading = style(/* :: */[
        display(/* inlineBlock */-147785676),
        /* [] */0
      ]);

  var facets = style(/* :: */[
        backgroundColor(greyLighter),
        /* :: */[
          borderBottom(px(1), solid, greyLight),
          /* [] */0
        ]
      ]);

  var facetMenu = style(/* :: */[
        padding2(em(0.2), px(0)),
        /* [] */0
      ]);

  var facetItemsContainer = style(/* :: */[
        padding2(px(0), basePadding),
        /* :: */[
          paddingLeft(em(1.5)),
          /* :: */[
            backgroundColor(hex("ffffb1")),
            /* [] */0
          ]
        ]
      ]);

  var facetTitleContainer = style(/* :: */[
        padding(basePadding),
        /* [] */0
      ]);

  function facetTitle(active$$1) {
    return style(/* :: */[
                display(/* inlineBlock */-147785676),
                /* :: */[
                  marginLeft(em(0.5)),
                  /* :: */[
                    fontWeight(active$$1 ? 700 : 500),
                    /* :: */[
                      fontStyle(active$$1 ? /* italic */107228912 : /* normal */812216871),
                      /* [] */0
                    ]
                  ]
                ]
              ]);
  }

  var facetTitleCount = style(/* :: */[
        position$1(/* absolute */-1013592457),
        /* :: */[
          right(em(0.5)),
          /* [] */0
        ]
      ]);

  function facetItem() {
    return style(/* :: */[
                padding2(em(1.0), px(0)),
                /* :: */[
                  cursor$1(/* pointer */-786317123),
                  /* [] */0
                ]
              ]);
  }

  function facetLabel(active$$1) {
    if (active$$1) {
      return style(/* :: */[
                  fontWeight(700),
                  /* :: */[
                    fontStyle(/* italic */107228912),
                    /* [] */0
                  ]
                ]);
    } else {
      return style(/* [] */0);
    }
  }

  var facetItemLabelCount = style(/* :: */[
        position$1(/* absolute */-1013592457),
        /* :: */[
          right(em(0.5)),
          /* [] */0
        ]
      ]);

  function facet(opened, _) {
    var col = opened === true ? yellow : white;
    return style(/* :: */[
                backgroundColor(col),
                /* :: */[
                  borderBottom(px(1), /* solid */12956715, black),
                  /* :: */[
                    cursor$1(/* pointer */-786317123),
                    /* [] */0
                  ]
                ]
              ]);
  }

  var facetLink = style(/* :: */[
        display(/* inlineBlock */-147785676),
        /* :: */[
          fontSize(em(0.9)),
          /* :: */[
            padding2(em(0.1), em(0.5)),
            /* :: */[
              backgroundColor(greyLight),
              /* [] */0
            ]
          ]
        ]
      ]);

  var searchResults = style(/* [] */0);

  var searchResultsInfo = style(/* :: */[
        padding(basePadding),
        /* :: */[
          fontWeight(800),
          /* [] */0
        ]
      ]);

  var container = style(/* [] */0);

  var pad = style(/* :: */[
        padding(basePadding),
        /* [] */0
      ]);

  function recordListBkg(visited$$1, lastVisited) {
    var borderCol = lastVisited ? yellow : (
        visited$$1 ? hex("a7abc5") : white
      );
    return style(/* :: */[
                borderBottom(px(1), solid, greyLight),
                /* :: */[
                  borderLeft(px(4), solid, borderCol),
                  /* :: */[
                    padding2(em(0.5), em(1.0)),
                    /* :: */[
                      color(black),
                      /* :: */[
                        hover(/* :: */[
                              backgroundColor(greyLighter),
                              /* [] */0
                            ]),
                        /* :: */[
                          cursor$1(/* pointer */-786317123),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  }

  var recordRowPadding = em(0.5);

  var recordRow = style(/* :: */[
        marginTop(recordRowPadding),
        /* [] */0
      ]);

  var recordFieldRow = style(/* :: */[
        marginTop(em(1.0)),
        /* [] */0
      ]);

  var recordFormat = style(/* :: */[
        display(/* inlineBlock */-147785676),
        /* :: */[
          padding2(em(0.1), em(0.5)),
          /* :: */[
            backgroundColor(greyLight),
            /* :: */[
              marginRight(em(0.5)),
              /* [] */0
            ]
          ]
        ]
      ]);

  var recordListFacetLinks = style(/* :: */[
        marginBottom(em(0.5)),
        /* [] */0
      ]);

  var recordContent = style(/* :: */[
        padding(basePadding),
        /* [] */0
      ]);

  var recordLinks = style(/* :: */[
        marginTop(em(1.0)),
        /* :: */[
          backgroundColor(hex("dadada")),
          /* :: */[
            padding(em(0.5)),
            /* :: */[
              lineHeight(em(1.4)),
              /* [] */0
            ]
          ]
        ]
      ]);

  var recordLink = style(/* :: */[
        wordBreak(/* breakAll */-323760734),
        /* :: */[
          whiteSpace(/* nowrap */867913355),
          /* :: */[
            overflow(/* hidden */-862584982),
            /* :: */[
              textOverflow(/* ellipsis */166888785),
              /* [] */0
            ]
          ]
        ]
      ]);

  var recordImages = style(/* :: */[
        marginTop(em(1.0)),
        /* [] */0
      ]);

  var recordImageContainer = style(/* [] */0);

  var recordImageSpinner = style(/* :: */[
        width(px(40)),
        /* :: */[
          height$1(px(40)),
          /* :: */[
            backgroundImage(url("icons/spinner-solid.svg")),
            /* :: */[
              marginLeft(/* `calc */[
                    -1044768619,
                    /* tuple */[
                      /* sub */5745024,
                      pct(50.0),
                      px(40)
                    ]
                  ]),
              /* :: */[
                marginBottom(/* `calc */[
                      -1044768619,
                      /* tuple */[
                        /* sub */5745024,
                        px(0),
                        px(55)
                      ]
                    ]),
                /* :: */[
                  paddingTop(px(20)),
                  /* :: */[
                    backgroundRepeat(/* noRepeat */-695430532),
                    /* :: */[
                      height$1(px(50)),
                      /* [] */0
                    ]
                  ]
                ]
              ]
            ]
          ]
        ]
      ]);

  function recordImage(loading) {
    return style(append(/* :: */[
                    width(pct(100.0)),
                    /* :: */[
                      minHeight(px(200)),
                      /* [] */0
                    ]
                  ], loading === true ? /* :: */[
                      border(px(1), /* solid */12956715, greyLight),
                      /* [] */0
                    ] : /* [] */0));
  }

  var recordAuthors = style(/* :: */[
        fontWeight(400),
        /* :: */[
          marginRight(em(0.5)),
          /* :: */[
            marginTop(recordRowPadding),
            /* [] */0
          ]
        ]
      ]);

  var recordFieldHeader = style(/* :: */[
        fontWeight(700),
        /* [] */0
      ]);

  var recordFieldText = style(/* [] */0);

  var recordSearchLinksContainer = style(/* :: */[
        margin2(em(1.0), px(0)),
        /* [] */0
      ]);

  var recordSearchLinkList = style(/* :: */[
        lineHeight(em(1.4)),
        /* [] */0
      ]);

  var recordSearchLink = style(/* :: */[
        cursor$1(/* pointer */-786317123),
        /* [] */0
      ]);

  var recordPublisher = style(/* :: */[
        marginRight(em(0.3)),
        /* :: */[
          fontSize(em(1.0)),
          /* [] */0
        ]
      ]);

  var recordIsbn = style(/* :: */[
        marginRight(em(0.3)),
        /* :: */[
          fontSize(em(1.0)),
          /* [] */0
        ]
      ]);

  var recordYear = style(/* :: */[
        fontSize(em(1.0)),
        /* [] */0
      ]);

  var recordPublished = style(/* :: */[
        marginRight(em(0.5)),
        /* [] */0
      ]);

  var recordSummary = style(/* [] */0);

  var recordFinnaLink = style(/* :: */[
        color(blue),
        /* :: */[
          marginTop(em(1.0)),
          /* [] */0
        ]
      ]);

  var languageMenuContainer = style(/* :: */[
        padding2(em(1.0), basePadding),
        /* :: */[
          borderTop(px(1), /* solid */12956715, hex("d6d6d6")),
          /* [] */0
        ]
      ]);

  var languageMenu = style(/* :: */[
        overflow(/* hidden */-862584982),
        /* [] */0
      ]);

  function language(active$$1) {
    return style(/* :: */[
                fontSize(em(0.9)),
                /* :: */[
                  cursor$1(/* pointer */-786317123),
                  /* :: */[
                    padding2(em(0.0), em(0.5)),
                    /* :: */[
                      $$float$3(/* left */-944764921),
                      /* :: */[
                        marginRight(em(0.5)),
                        /* :: */[
                          fontWeight(active$$1 ? 800 : 300),
                          /* [] */0
                        ]
                      ]
                    ]
                  ]
                ]
              ]);
  }

  var paginationContainer = style(/* :: */[
        overflow(/* hidden */-862584982),
        /* :: */[
          padding2(em(0.5), basePadding),
          /* :: */[
            borderBottom(px(1), /* solid */12956715, hex("d6d6d6")),
            /* :: */[
              padding2(em(0.5), px(0)),
              /* [] */0
            ]
          ]
        ]
      ]);

  var paginateInfo = style(/* :: */[
        display(/* inlineBlock */-147785676),
        /* :: */[
          fontSize(em(1.2)),
          /* :: */[
            marginLeft(em(1.0)),
            /* :: */[
              marginRight(em(1.0)),
              /* :: */[
                verticalAlign(/* middle */-866200747),
                /* :: */[
                  padding2(px(0), em(0.5)),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]);

  var closeIcon_000 = cursor$1(/* pointer */-786317123);

  var closeIcon_001 = /* :: */[
    width(px(40)),
    /* :: */[
      height$1(px(40)),
      /* :: */[
        backgroundRepeat(/* noRepeat */-695430532),
        /* :: */[
          backgroundImage(url("icons/times-circle-regular.svg")),
          /* [] */0
        ]
      ]
    ]
  ];

  var closeIcon = /* :: */[
    closeIcon_000,
    closeIcon_001
  ];

  var searchIcon_001 = /* :: */[
    width(px(40)),
    /* :: */[
      height$1(px(40)),
      /* :: */[
        backgroundRepeat(/* noRepeat */-695430532),
        /* :: */[
          backgroundImage(url("icons/search-solid.svg")),
          /* [] */0
        ]
      ]
    ]
  ];

  var closeFacetsIcon = style(append(closeIcon, /* :: */[
            $$float$3(/* right */-379319332),
            /* [] */0
          ]));

  var filterTools = style(/* :: */[
        overflow(/* hidden */-862584982),
        /* [] */0
      ]);

  var filterContainer = style(/* :: */[
        $$float$3(/* left */-944764921),
        /* [] */0
      ]);

  var filterType = style(/* :: */[
        fontWeight(700),
        /* [] */0
      ]);

  var filterLabel = style(/* [] */0);

  var removeFilter = style(/* :: */[
        cursor$1(/* pointer */-786317123),
        /* [] */0
      ]);

  var removeFilterIcon = style(append(closeIcon, /* :: */[
            display(/* inlineBlock */-147785676),
            /* [] */0
          ]));

  var removeFilterLabel = style(/* :: */[
        display(/* inlineBlock */-147785676),
        /* :: */[
          marginLeft(px(10)),
          /* [] */0
        ]
      ]);

  function openFacets(active$$1) {
    return style(append(/* :: */[
                    $$float$3(/* left */-944764921),
                    /* :: */[
                      marginRight(em(1.0)),
                      /* :: */[
                        marginBottom(em(0.5)),
                        /* [] */0
                      ]
                    ]
                  ], active$$1 ? /* :: */[
                      cursor$1(/* pointer */-786317123),
                      /* [] */0
                    ] : /* :: */[
                      opacity(0.6),
                      /* [] */0
                    ]));
  }

  var facetsIcon = style(/* :: */[
        height$1(px(40)),
        /* :: */[
          color(black),
          /* :: */[
            backgroundImage(url("icons/cog-solid.svg")),
            /* :: */[
              display(/* inlineBlock */-147785676),
              /* :: */[
                verticalAlign(/* middle */-866200747),
                /* :: */[
                  backgroundRepeat(/* noRepeat */-695430532),
                  /* [] */0
                ]
              ]
            ]
          ]
        ]
      ]);

  var facetsIconLabel = style(/* :: */[
        display(/* inlineBlock */-147785676),
        /* :: */[
          fontSize(em(1.2)),
          /* :: */[
            marginLeft(px(55)),
            /* :: */[
              marginTop(px(8)),
              /* :: */[
                verticalAlign(/* middle */-866200747),
                /* [] */0
              ]
            ]
          ]
        ]
      ]);

  function arrowIcon(dir) {
    var file;
    switch (dir) {
      case 0 : 
          file = "up";
          break;
      case 1 : 
          file = "right";
          break;
      case 2 : 
          file = "down";
          break;
      case 3 : 
          file = "left";
          break;
      
    }
    var file$1 = "icons/arrow-alt-circle-" + (file + "-regular.svg");
    return style(/* :: */[
                width(px(40)),
                /* :: */[
                  height$1(px(40)),
                  /* :: */[
                    backgroundImage(url(file$1)),
                    /* :: */[
                      display(/* inlineBlock */-147785676),
                      /* :: */[
                        verticalAlign(/* middle */-866200747),
                        /* [] */0
                      ]
                    ]
                  ]
                ]
              ]);
  }

  function nextPage(loading) {
    return style(append(/* :: */[
                    fontSize(em(1.5)),
                    /* :: */[
                      textAlign(/* center */98248149),
                      /* :: */[
                        padding(em(0.5)),
                        /* :: */[
                          margin(em(1.3)),
                          /* :: */[
                            backgroundColor(btnBackground),
                            /* :: */[
                              border(px(2), /* solid */12956715, black),
                              /* :: */[
                                borderRadius(em(0.2)),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ], loading ? /* [] */0 : /* :: */[
                      cursor$1(/* pointer */-786317123),
                      /* [] */0
                    ]));
  }

  var nextPageLabel = style(/* :: */[
        marginRight(em(0.5)),
        /* [] */0
      ]);

  var textLink = style(/* :: */[
        before(/* :: */[
              contentRule("> "),
              /* [] */0
            ]),
        /* [] */0
      ]);

  var closeRecordIcon = closeFacetsIcon;
  /* basePadding Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function languageCode(lng) {
    if (lng) {
      return "en";
    } else {
      return "fi";
    }
  }

  function languageOfCode(code) {
    if (code === "en") {
      return /* LngEn */1;
    } else {
      return /* LngFi */0;
    }
  }

  function finnaLanguageCode(lng) {
    if (lng) {
      return "en-gb";
    } else {
      return "fi";
    }
  }

  function paginateRecordCmd(param_0) {
    return /* PaginateRecordCmd */__(0, [param_0]);
  }

  function paginatePrevCmd(param_0) {
    return /* PaginatePrevCmd */__(1, [param_0]);
  }

  function paginateNextCmd(param_0) {
    return /* PaginateNextCmd */__(2, [param_0]);
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  var noNode = /* CommentNode */__(0, [""]);

  function fullnode(namespace, tagName, key, unique, props, vdoms) {
    return /* Node */__(2, [
              namespace,
              tagName,
              key,
              unique,
              props,
              vdoms
            ]);
  }

  function prop(key, value) {
    return /* RawProp */__(0, [
              key,
              value
            ]);
  }

  function onCB(name, key, cb) {
    return /* Event */__(3, [
              name,
              /* EventHandlerCallback */__(0, [
                  key,
                  cb
                ]),
              /* record */[/* contents */undefined]
            ]);
  }

  function onMsg(name, msg) {
    return /* Event */__(3, [
              name,
              /* EventHandlerMsg */__(1, [msg]),
              /* record */[/* contents */undefined]
            ]);
  }

  function renderToHtmlString(_param) {
    while(true) {
      var param = _param;
      switch (param.tag | 0) {
        case 0 : 
            return "<!-- " + (param[0] + " -->");
        case 1 : 
            return param[0];
        case 2 : 
            var tagName = param[1];
            var namespace = param[0];
            return concat$3("", /* :: */[
                        "<",
                        /* :: */[
                          namespace,
                          /* :: */[
                            namespace === "" ? "" : ":",
                            /* :: */[
                              tagName,
                              /* :: */[
                                concat$3("", map((function (p) {
                                            var param = p;
                                            if (typeof param === "number") {
                                              return "";
                                            } else {
                                              switch (param.tag | 0) {
                                                case 0 : 
                                                    return concat$3("", /* :: */[
                                                                " ",
                                                                /* :: */[
                                                                  param[0],
                                                                  /* :: */[
                                                                    "=\"",
                                                                    /* :: */[
                                                                      param[1],
                                                                      /* :: */[
                                                                        "\"",
                                                                        /* [] */0
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]);
                                                case 1 : 
                                                    return concat$3("", /* :: */[
                                                                " ",
                                                                /* :: */[
                                                                  param[1],
                                                                  /* :: */[
                                                                    "=\"",
                                                                    /* :: */[
                                                                      param[2],
                                                                      /* :: */[
                                                                        "\"",
                                                                        /* [] */0
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]);
                                                case 2 : 
                                                    return concat$3("", /* :: */[
                                                                " data-",
                                                                /* :: */[
                                                                  param[0],
                                                                  /* :: */[
                                                                    "=\"",
                                                                    /* :: */[
                                                                      param[1],
                                                                      /* :: */[
                                                                        "\"",
                                                                        /* [] */0
                                                                      ]
                                                                    ]
                                                                  ]
                                                                ]
                                                              ]);
                                                case 3 : 
                                                    return "";
                                                case 4 : 
                                                    return concat$3("", /* :: */[
                                                                " style=\"",
                                                                /* :: */[
                                                                  concat$3(";", map((function (param) {
                                                                              return concat$3("", /* :: */[
                                                                                          param[0],
                                                                                          /* :: */[
                                                                                            ":",
                                                                                            /* :: */[
                                                                                              param[1],
                                                                                              /* :: */[
                                                                                                ";",
                                                                                                /* [] */0
                                                                                              ]
                                                                                            ]
                                                                                          ]
                                                                                        ]);
                                                                            }), param[0])),
                                                                  /* :: */[
                                                                    "\"",
                                                                    /* [] */0
                                                                  ]
                                                                ]
                                                              ]);
                                                
                                              }
                                            }
                                          }), param[4])),
                                /* :: */[
                                  ">",
                                  /* :: */[
                                    concat$3("", map(renderToHtmlString, param[5])),
                                    /* :: */[
                                      "</",
                                      /* :: */[
                                        tagName,
                                        /* :: */[
                                          ">",
                                          /* [] */0
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]);
        case 3 : 
            _param = _1(param[1], /* () */0);
            continue ;
        case 4 : 
            _param = param[1];
            continue ;
        
      }
    }}

  function eventHandler(callbacks, cb) {
    return (function (ev) {
        var match = _1(cb[0], ev);
        if (match !== undefined) {
          return _1(callbacks[0][/* enqueue */0], valFromOption(match));
        } else {
          return /* () */0;
        }
      });
  }

  function eventHandler_GetCB(param) {
    if (param.tag) {
      var msg = param[0];
      return (function () {
          return some(msg);
        });
    } else {
      return param[1];
    }
  }

  function compareEventHandlerTypes(left, param) {
    if (param.tag) {
      if (!left.tag || !caml_equal(param[0], left[0])) {
        return false;
      } else {
        return true;
      }
    } else if (left.tag) {
      return false;
    } else {
      return param[0] === left[0];
    }
  }

  function eventHandler_Register(callbacks, elem, name, handlerType) {
    var cb = /* record */[/* contents */eventHandler_GetCB(handlerType)];
    var handler = eventHandler(callbacks, cb);
    addEventListener$2(elem, name, handler, false);
    return /* record */[
            /* handler */handler,
            /* cb */cb
          ];
  }

  function eventHandler_Unregister(elem, name, param) {
    if (param !== undefined) {
      removeEventListener$1(elem, name, param[/* handler */0], false);
      return undefined;
    }
    
  }

  function eventHandler_Mutate(callbacks, elem, oldName, newName, oldHandlerType, newHandlerType, oldCache, newCache) {
    var match = oldCache[0];
    if (match !== undefined) {
      if (oldName === newName) {
        newCache[0] = oldCache[0];
        if (compareEventHandlerTypes(oldHandlerType, newHandlerType)) {
          return /* () */0;
        } else {
          var cb = eventHandler_GetCB(newHandlerType);
          match[/* cb */1][0] = cb;
          return /* () */0;
        }
      } else {
        oldCache[0] = eventHandler_Unregister(elem, oldName, oldCache[0]);
        newCache[0] = eventHandler_Register(callbacks, elem, newName, newHandlerType);
        return /* () */0;
      }
    } else {
      newCache[0] = eventHandler_Register(callbacks, elem, newName, newHandlerType);
      return /* () */0;
    }
  }

  function patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, _, param) {
    if (typeof param === "number") {
      return /* () */0;
    } else {
      switch (param.tag | 0) {
        case 0 : 
            elem[param[0]] = param[1];
            return /* () */0;
        case 1 : 
            return setAttributeNsOptional(elem, param[0], param[1], param[2]);
        case 2 : 
            console.log(/* tuple */[
                  "TODO:  Add Data Unhandled",
                  param[0],
                  param[1]
                ]);
            throw [
                  failure,
                  "TODO:  Add Data Unhandled"
                ];
        case 3 : 
            param[2][0] = eventHandler_Register(callbacks, elem, param[0], param[1]);
            return /* () */0;
        case 4 : 
            return fold_left((function (_, param) {
                          return setStyleProperty(elem, undefined, param[0], param[1]);
                        }), /* () */0, param[0]);
        
      }
    }
  }

  function patchVNodesOnElems_PropertiesApply_Remove(_, elem, _$1, param) {
    if (typeof param === "number") {
      return /* () */0;
    } else {
      switch (param.tag | 0) {
        case 0 : 
            elem[param[0]] = undefined;
            return /* () */0;
        case 1 : 
            return removeAttributeNsOptional(elem, param[0], param[1]);
        case 2 : 
            console.log(/* tuple */[
                  "TODO:  Remove Data Unhandled",
                  param[0],
                  param[1]
                ]);
            throw [
                  failure,
                  "TODO:  Remove Data Unhandled"
                ];
        case 3 : 
            var cache = param[2];
            cache[0] = eventHandler_Unregister(elem, param[0], cache[0]);
            return /* () */0;
        case 4 : 
            return fold_left((function (_, param) {
                          return setStyleProperty(elem, undefined, param[0], null);
                        }), /* () */0, param[0]);
        
      }
    }
  }

  function patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, oldProp, newProp) {
    patchVNodesOnElems_PropertiesApply_Remove(callbacks, elem, idx, oldProp);
    patchVNodesOnElems_PropertiesApply_Add(callbacks, elem, idx, newProp);
    return /* () */0;
  }

  function patchVNodesOnElems_PropertiesApply_Mutate(_, elem, _$1, oldProp, _newProp) {
    if (typeof _newProp === "number") {
      throw [
            failure,
            "This should never be called as all entries through NoProp are gated."
          ];
    } else {
      switch (_newProp.tag | 0) {
        case 0 : 
            elem[_newProp[0]] = _newProp[1];
            return /* () */0;
        case 1 : 
            return setAttributeNsOptional(elem, _newProp[0], _newProp[1], _newProp[2]);
        case 2 : 
            console.log(/* tuple */[
                  "TODO:  Mutate Data Unhandled",
                  _newProp[0],
                  _newProp[1]
                ]);
            throw [
                  failure,
                  "TODO:  Mutate Data Unhandled"
                ];
        case 3 : 
            throw [
                  failure,
                  "This will never be called because it is gated"
                ];
        case 4 : 
            if (typeof oldProp === "number") {
              throw [
                    failure,
                    "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!"
                  ];
            } else if (oldProp.tag === 4) {
              return fold_left2((function (_, param, param$1) {
                            var nv = param$1[1];
                            var nk = param$1[0];
                            var ok = param[0];
                            if (ok === nk) {
                              if (param[1] === nv) {
                                return /* () */0;
                              } else {
                                return setStyleProperty(elem, undefined, nk, nv);
                              }
                            } else {
                              setStyleProperty(elem, undefined, ok, null);
                              return setStyleProperty(elem, undefined, nk, nv);
                            }
                          }), /* () */0, oldProp[0], _newProp[0]);
            } else {
              throw [
                    failure,
                    "Passed a non-Style to a new Style as a Mutations while the old Style is not actually a style!"
                  ];
            }
        
      }
    }
  }

  function patchVNodesOnElems_PropertiesApply(callbacks, elem, _idx, _oldProperties, _newProperties) {
    while(true) {
      var newProperties = _newProperties;
      var oldProperties = _oldProperties;
      var idx = _idx;
      if (oldProperties) {
        var _oldProp = oldProperties[0];
        var exit = 0;
        if (newProperties) {
          if (typeof _oldProp === "number") {
            if (typeof newProperties[0] === "number") {
              _newProperties = newProperties[1];
              _oldProperties = oldProperties[1];
              _idx = idx + 1 | 0;
              continue ;
            } else {
              exit = 1;
            }
          } else {
            switch (_oldProp.tag | 0) {
              case 0 : 
                  var newProp = newProperties[0];
                  if (typeof newProp === "number" || newProp.tag) {
                    exit = 1;
                  } else {
                    if (!(_oldProp[0] === newProp[0] && _oldProp[1] === newProp[1])) {
                      patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp);
                    }
                    _newProperties = newProperties[1];
                    _oldProperties = oldProperties[1];
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  break;
              case 1 : 
                  var newProp$1 = newProperties[0];
                  if (typeof newProp$1 === "number" || newProp$1.tag !== 1) {
                    exit = 1;
                  } else {
                    if (!(_oldProp[0] === newProp$1[0] && _oldProp[1] === newProp$1[1] && _oldProp[2] === newProp$1[2])) {
                      patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$1);
                    }
                    _newProperties = newProperties[1];
                    _oldProperties = oldProperties[1];
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  break;
              case 2 : 
                  var newProp$2 = newProperties[0];
                  if (typeof newProp$2 === "number" || newProp$2.tag !== 2) {
                    exit = 1;
                  } else {
                    if (!(_oldProp[0] === newProp$2[0] && _oldProp[1] === newProp$2[1])) {
                      patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$2);
                    }
                    _newProperties = newProperties[1];
                    _oldProperties = oldProperties[1];
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  break;
              case 3 : 
                  var _newProp = newProperties[0];
                  if (typeof _newProp === "number" || _newProp.tag !== 3) {
                    exit = 1;
                  } else {
                    eventHandler_Mutate(callbacks, elem, _oldProp[0], _newProp[0], _oldProp[1], _newProp[1], _oldProp[2], _newProp[2]);
                    _newProperties = newProperties[1];
                    _oldProperties = oldProperties[1];
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  break;
              case 4 : 
                  var newProp$3 = newProperties[0];
                  if (typeof newProp$3 === "number" || newProp$3.tag !== 4) {
                    exit = 1;
                  } else {
                    if (!caml_equal(_oldProp[0], newProp$3[0])) {
                      patchVNodesOnElems_PropertiesApply_Mutate(callbacks, elem, idx, _oldProp, newProp$3);
                    }
                    _newProperties = newProperties[1];
                    _oldProperties = oldProperties[1];
                    _idx = idx + 1 | 0;
                    continue ;
                  }
                  break;
              
            }
          }
        } else {
          return false;
        }
        if (exit === 1) {
          patchVNodesOnElems_PropertiesApply_RemoveAdd(callbacks, elem, idx, _oldProp, newProperties[0]);
          _newProperties = newProperties[1];
          _oldProperties = oldProperties[1];
          _idx = idx + 1 | 0;
          continue ;
        }
        
      } else if (newProperties) {
        return false;
      } else {
        return true;
      }
    }}

  function patchVNodesOnElems_Properties(callbacks, elem, oldProperties, newProperties) {
    return patchVNodesOnElems_PropertiesApply(callbacks, elem, 0, oldProperties, newProperties);
  }

  function patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, param) {
    if (param.tag === 2) {
      var newProperties = param[4];
      var oldChild = caml_array_get(elems, idx);
      var newChild = createElementNsOptional(param[0], param[1]);
      var match = patchVNodesOnElems_Properties(callbacks, newChild, map((function () {
                  return /* NoProp */0;
                }), newProperties), newProperties);
      if (match) {
        var childChildren = newChild.childNodes;
        patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, param[5]);
        insertBefore(elem, newChild, oldChild);
        elem.removeChild(oldChild);
        return /* () */0;
      } else {
        throw [
              match_failure,
              /* tuple */[
                "vdom.ml",
                319,
                30
              ]
            ];
      }
    } else {
      throw [
            failure,
            "Node replacement should never be passed anything but a node itself"
          ];
    }
  }

  function patchVNodesOnElems_CreateElement(_callbacks, _param) {
    while(true) {
      var param = _param;
      var callbacks = _callbacks;
      switch (param.tag | 0) {
        case 0 : 
            var text = param[0];
            return document.createComment(text);
        case 1 : 
            var text$1 = param[0];
            return document.createTextNode(text$1);
        case 2 : 
            var newProperties = param[4];
            var newChild = createElementNsOptional(param[0], param[1]);
            var match = patchVNodesOnElems_Properties(callbacks, newChild, map((function () {
                        return /* NoProp */0;
                      }), newProperties), newProperties);
            if (match) {
              var childChildren = newChild.childNodes;
              patchVNodesOnElems(callbacks, newChild, childChildren, 0, /* [] */0, param[5]);
              return newChild;
            } else {
              throw [
                    match_failure,
                    /* tuple */[
                      "vdom.ml",
                      333,
                      30
                    ]
                  ];
            }
        case 3 : 
            var vdom = _1(param[1], /* () */0);
            param[2][0] = vdom;
            _param = vdom;
            continue ;
        case 4 : 
            _param = param[1];
            _callbacks = _1(param[0], callbacks);
            continue ;
        
      }
    }}

  function patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode) {
    if (oldNode.tag === 2) {
      if (newNode.tag === 2) {
        if (oldNode[3] !== newNode[3] || oldNode[1] !== newNode[1]) {
          return patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
        } else {
          var child = caml_array_get(elems, idx);
          var childChildren = child.childNodes;
          if (!patchVNodesOnElems_Properties(callbacks, child, oldNode[4], newNode[4])) {
            console.log("VDom:  Failed swapping properties because the property list length changed, use `noProp` to swap properties instead, not by altering the list structure.  This is a massive inefficiency until this issue is resolved.");
            patchVNodesOnElems_ReplaceNode(callbacks, elem, elems, idx, newNode);
          }
          return patchVNodesOnElems(callbacks, child, childChildren, 0, oldNode[5], newNode[5]);
        }
      } else {
        throw [
              failure,
              "Non-node passed to patchVNodesOnElems_MutateNode"
            ];
      }
    } else {
      throw [
            failure,
            "Non-node passed to patchVNodesOnElems_MutateNode"
          ];
    }
  }

  function patchVNodesOnElems(callbacks, elem, elems, _idx, _oldVNodes, _newVNodes) {
    while(true) {
      var newVNodes = _newVNodes;
      var oldVNodes = _oldVNodes;
      var idx = _idx;
      if (oldVNodes) {
        var oldNode = oldVNodes[0];
        var exit = 0;
        switch (oldNode.tag | 0) {
          case 0 : 
              if (newVNodes) {
                var match = newVNodes[0];
                if (match.tag || oldNode[0] !== match[0]) {
                  exit = 1;
                } else {
                  _newVNodes = newVNodes[1];
                  _oldVNodes = oldVNodes[1];
                  _idx = idx + 1 | 0;
                  continue ;
                }
              } else {
                exit = 1;
              }
              break;
          case 1 : 
              if (newVNodes) {
                var match$1 = newVNodes[0];
                if (match$1.tag === 1) {
                  var newText = match$1[0];
                  if (oldNode[0] !== newText) {
                    var child = caml_array_get(elems, idx);
                    child.nodeValue = newText;
                  }
                  _newVNodes = newVNodes[1];
                  _oldVNodes = oldVNodes[1];
                  _idx = idx + 1 | 0;
                  continue ;
                } else {
                  exit = 1;
                }
              } else {
                exit = 1;
              }
              break;
          case 2 : 
              if (newVNodes) {
                var newNode = newVNodes[0];
                if (newNode.tag === 2) {
                  var newRest = newVNodes[1];
                  var newKey = newNode[2];
                  var newTagName = newNode[1];
                  var newNamespace = newNode[0];
                  var oldRest = oldVNodes[1];
                  var oldKey = oldNode[2];
                  var oldTagName = oldNode[1];
                  var oldNamespace = oldNode[0];
                  if (oldKey === newKey && oldKey !== "") {
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  } else if (oldKey === "" || newKey === "") {
                    patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                    _newVNodes = newRest;
                    _oldVNodes = oldRest;
                    _idx = idx + 1 | 0;
                    continue ;
                  } else {
                    var exit$1 = 0;
                    var exit$2 = 0;
                    if (oldRest) {
                      var match$2 = oldRest[0];
                      if (match$2.tag === 2) {
                        var olderRest = oldRest[1];
                        var olderKey = match$2[2];
                        var olderTagName = match$2[1];
                        var olderNamespace = match$2[0];
                        var exit$3 = 0;
                        if (newRest) {
                          var match$3 = newRest[0];
                          if (match$3.tag === 2 && olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey && oldNamespace === match$3[0] && oldTagName === match$3[1] && oldKey === match$3[2]) {
                            var firstChild = caml_array_get(elems, idx);
                            var secondChild = caml_array_get(elems, idx + 1 | 0);
                            elem.removeChild(secondChild);
                            insertBefore(elem, secondChild, firstChild);
                            _newVNodes = newRest[1];
                            _oldVNodes = olderRest;
                            _idx = idx + 2 | 0;
                            continue ;
                          } else {
                            exit$3 = 4;
                          }
                        } else {
                          exit$3 = 4;
                        }
                        if (exit$3 === 4) {
                          if (olderNamespace === newNamespace && olderTagName === newTagName && olderKey === newKey) {
                            var oldChild = caml_array_get(elems, idx);
                            elem.removeChild(oldChild);
                            _newVNodes = newRest;
                            _oldVNodes = olderRest;
                            _idx = idx + 1 | 0;
                            continue ;
                          } else {
                            exit$2 = 3;
                          }
                        }
                        
                      } else {
                        exit$2 = 3;
                      }
                    } else {
                      exit$2 = 3;
                    }
                    if (exit$2 === 3) {
                      if (newRest) {
                        var match$4 = newRest[0];
                        if (match$4.tag === 2 && oldNamespace === match$4[0] && oldTagName === match$4[1] && oldKey === match$4[2]) {
                          var oldChild$1 = caml_array_get(elems, idx);
                          var newChild = patchVNodesOnElems_CreateElement(callbacks, newNode);
                          insertBefore(elem, newChild, oldChild$1);
                          _newVNodes = newRest;
                          _idx = idx + 1 | 0;
                          continue ;
                        } else {
                          exit$1 = 2;
                        }
                      } else {
                        exit$1 = 2;
                      }
                    }
                    if (exit$1 === 2) {
                      patchVNodesOnElems_MutateNode(callbacks, elem, elems, idx, oldNode, newNode);
                      _newVNodes = newRest;
                      _oldVNodes = oldRest;
                      _idx = idx + 1 | 0;
                      continue ;
                    }
                    
                  }
                } else {
                  exit = 1;
                }
              } else {
                exit = 1;
              }
              break;
          case 3 : 
              if (newVNodes) {
                var match$5 = newVNodes[0];
                if (match$5.tag === 3) {
                  var newRest$1 = newVNodes[1];
                  var newCache = match$5[2];
                  var newGen = match$5[1];
                  var newKey$1 = match$5[0];
                  var oldRest$1 = oldVNodes[1];
                  var oldCache = oldNode[2];
                  var oldKey$1 = oldNode[0];
                  if (oldKey$1 === newKey$1) {
                    newCache[0] = oldCache[0];
                    _newVNodes = newRest$1;
                    _oldVNodes = oldRest$1;
                    _idx = idx + 1 | 0;
                    continue ;
                  } else {
                    var exit$4 = 0;
                    var exit$5 = 0;
                    if (oldRest$1) {
                      var match$6 = oldRest$1[0];
                      if (match$6.tag === 3) {
                        var olderRest$1 = oldRest$1[1];
                        var olderKey$1 = match$6[0];
                        var exit$6 = 0;
                        if (newRest$1) {
                          var match$7 = newRest$1[0];
                          if (match$7.tag === 3 && olderKey$1 === newKey$1 && oldKey$1 === match$7[0]) {
                            var firstChild$1$$1 = caml_array_get(elems, idx);
                            var secondChild$1 = caml_array_get(elems, idx + 1 | 0);
                            elem.removeChild(secondChild$1);
                            insertBefore(elem, secondChild$1, firstChild$1$$1);
                            _newVNodes = newRest$1[1];
                            _oldVNodes = olderRest$1;
                            _idx = idx + 2 | 0;
                            continue ;
                          } else {
                            exit$6 = 4;
                          }
                        } else {
                          exit$6 = 4;
                        }
                        if (exit$6 === 4) {
                          if (olderKey$1 === newKey$1) {
                            var oldChild$2 = caml_array_get(elems, idx);
                            elem.removeChild(oldChild$2);
                            var oldVdom = match$6[2][0];
                            newCache[0] = oldVdom;
                            _newVNodes = newRest$1;
                            _oldVNodes = olderRest$1;
                            _idx = idx + 1 | 0;
                            continue ;
                          } else {
                            exit$5 = 3;
                          }
                        }
                        
                      } else {
                        exit$5 = 3;
                      }
                    } else {
                      exit$5 = 3;
                    }
                    if (exit$5 === 3) {
                      if (newRest$1) {
                        var match$8 = newRest$1[0];
                        if (match$8.tag === 3 && match$8[0] === oldKey$1) {
                          var oldChild$3 = caml_array_get(elems, idx);
                          var newVdom = _1(newGen, /* () */0);
                          newCache[0] = newVdom;
                          var newChild$1 = patchVNodesOnElems_CreateElement(callbacks, newVdom);
                          insertBefore(elem, newChild$1, oldChild$3);
                          _newVNodes = newRest$1;
                          _idx = idx + 1 | 0;
                          continue ;
                        } else {
                          exit$4 = 2;
                        }
                      } else {
                        exit$4 = 2;
                      }
                    }
                    if (exit$4 === 2) {
                      var oldVdom$1 = oldCache[0];
                      var newVdom$1 = _1(newGen, /* () */0);
                      newCache[0] = newVdom$1;
                      _newVNodes = /* :: */[
                        newVdom$1,
                        newRest$1
                      ];
                      _oldVNodes = /* :: */[
                        oldVdom$1,
                        oldRest$1
                      ];
                      continue ;
                    }
                    
                  }
                } else {
                  exit = 1;
                }
              } else {
                exit = 1;
              }
              break;
          case 4 : 
              _oldVNodes = /* :: */[
                oldNode[1],
                oldVNodes[1]
              ];
              continue ;
          
        }
        if (exit === 1) {
          var oldRest$2 = oldVNodes[1];
          if (newVNodes) {
            var newNode$1 = newVNodes[0];
            if (newNode$1.tag === 4) {
              patchVNodesOnElems(_1(newNode$1[0], callbacks), elem, elems, idx, /* :: */[
                    oldNode,
                    /* [] */0
                  ], /* :: */[
                    newNode$1[1],
                    /* [] */0
                  ]);
              _newVNodes = newVNodes[1];
              _oldVNodes = oldRest$2;
              _idx = idx + 1 | 0;
              continue ;
            } else {
              var oldChild$4 = caml_array_get(elems, idx);
              var newChild$2 = patchVNodesOnElems_CreateElement(callbacks, newNode$1);
              insertBefore(elem, newChild$2, oldChild$4);
              elem.removeChild(oldChild$4);
              _newVNodes = newVNodes[1];
              _oldVNodes = oldRest$2;
              _idx = idx + 1 | 0;
              continue ;
            }
          } else {
            var child$1 = caml_array_get(elems, idx);
            elem.removeChild(child$1);
            _newVNodes = /* [] */0;
            _oldVNodes = oldRest$2;
            continue ;
          }
        }
        
      } else if (newVNodes) {
        var newChild$3 = patchVNodesOnElems_CreateElement(callbacks, newVNodes[0]);
        elem.appendChild(newChild$3);
        _newVNodes = newVNodes[1];
        _oldVNodes = /* [] */0;
        _idx = idx + 1 | 0;
        continue ;
      } else {
        return /* () */0;
      }
    }}

  function patchVNodesIntoElement(callbacks, elem, oldVNodes, newVNodes) {
    var elems = elem.childNodes;
    patchVNodesOnElems(callbacks, elem, elems, 0, oldVNodes, newVNodes);
    return newVNodes;
  }

  function wrapCallbacks(func, callbacks) {
    return /* record */[/* contents : record */[/* enqueue */(function (msg) {
                  return _1(callbacks[0][/* enqueue */0], _1(func, msg));
                })]];
  }

  function map$8(func, vdom) {
    var tagger = function (callbacks) {
      return /* record */[/* contents : record */[/* enqueue */(function (msg) {
                    return _1(callbacks[0][/* enqueue */0], _1(func, msg));
                  })]];
    };
    return /* Tagger */__(4, [
              tagger,
              vdom
            ]);
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function text$2(str) {
    return /* Text */__(1, [str]);
  }

  function div$2($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "div", key, unique, props, nodes);
  }

  function span($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "span", key, unique, props, nodes);
  }

  function p($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "p", key, unique, props, nodes);
  }

  function a($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "a", key, unique, props, nodes);
  }

  function h1($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "h1", key, unique, props, nodes);
  }

  function h2($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "h2", key, unique, props, nodes);
  }

  function h3($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "h3", key, unique, props, nodes);
  }

  function input$prime($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "input", key, unique, props, nodes);
  }

  function ul($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "ul", key, unique, props, nodes);
  }

  function li($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "li", key, unique, props, nodes);
  }

  function img($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "img", key, unique, props, nodes);
  }

  function form($staropt$star, $staropt$star$1, props, nodes) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    var unique = $staropt$star$1 !== undefined ? $staropt$star$1 : "";
    return fullnode("", "form", key, unique, props, nodes);
  }

  function id$1(str) {
    return /* RawProp */__(0, [
              "id",
              str
            ]);
  }

  function href(str) {
    return /* Attribute */__(1, [
              "",
              "href",
              str
            ]);
  }

  function src(str) {
    return /* Attribute */__(1, [
              "",
              "src",
              str
            ]);
  }

  function title(str) {
    return /* Attribute */__(1, [
              "",
              "title",
              str
            ]);
  }

  function class$prime(name) {
    return /* RawProp */__(0, [
              "className",
              name
            ]);
  }

  function type$prime(typ) {
    return /* RawProp */__(0, [
              "type",
              typ
            ]);
  }

  function value$1(str) {
    return /* RawProp */__(0, [
              "value",
              str
            ]);
  }

  function name(str) {
    return /* RawProp */__(0, [
              "name",
              str
            ]);
  }

  var onCB$1 = onCB;

  function onInputOpt($staropt$star, msg) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    return onCB("input", key, (function (ev) {
                  var match = ev.target;
                  if (match !== undefined) {
                    var match$1 = match.value;
                    if (match$1 !== undefined) {
                      return _1(msg, match$1);
                    } else {
                      return undefined;
                    }
                  }
                  
                }));
  }

  function onInput($staropt$star, msg) {
    var key = $staropt$star !== undefined ? $staropt$star : "";
    return onInputOpt(key, (function (ev) {
                  return some(_1(msg, ev));
                }));
  }

  function onClick(msg) {
    return onMsg("click", msg);
  }

  var targetValue = Decoder[/* at */12](/* :: */[
        "target",
        /* :: */[
          "value",
          /* [] */0
        ]
      ], Decoder[/* string */2]);

  var targetChecked = Decoder[/* at */12](/* :: */[
        "target",
        /* :: */[
          "checked",
          /* [] */0
        ]
      ], Decoder[/* bool */5]);

  var keyCode = Decoder[/* field */11]("keyCode", Decoder[/* int */3]);

  function max$1(value) {
    return /* Attribute */__(1, [
              "",
              "max",
              value
            ]);
  }

  function min$1(value) {
    return /* Attribute */__(1, [
              "",
              "min",
              value
            ]);
  }

  function step(value) {
    return /* Attribute */__(1, [
              "",
              "step",
              value
            ]);
  }

  function disabled$1(b) {
    if (b) {
      return /* Attribute */__(1, [
                "",
                "disabled",
                "true"
              ]);
    } else {
      return /* NoProp */0;
    }
  }

  function selected(b) {
    if (b) {
      return /* Attribute */__(1, [
                "",
                "selected",
                "true"
              ]);
    } else {
      return /* NoProp */0;
    }
  }

  function acceptCharset(c) {
    return /* Attribute */__(1, [
              "",
              "accept-charset",
              c
            ]);
  }

  function rel(value) {
    return /* Attribute */__(1, [
              "",
              "rel",
              value
            ]);
  }

  var Attributes = /* module */[
    /* max */max$1,
    /* min */min$1,
    /* step */step,
    /* disabled */disabled$1,
    /* selected */selected,
    /* acceptCharset */acceptCharset,
    /* rel */rel
  ];

  var noNode$1 = noNode;

  var noProp$1 = /* NoProp */0;
  /* targetValue Not a pure module */

  /**
  * - Registry -
  *
  * Maintain a list of elements, a subset which currently pass
  * a given criteria, and fire events when elements move in or out.
  */

  class inViewRegistry {

      constructor(elements, options) {
          this.options  = options;
          this.elements = elements;
          this.current  = [];
          this.handlers = { enter: [], exit: [] };
          this.singles  = { enter: [], exit: [] };
      }

      /**
      * Check each element in the registry, if an element
      * changes states, fire an event and operate on current.
      */
      check() {
          this.elements.forEach(el => {
              let passes  = this.options.test(el, this.options);
              let index   = this.current.indexOf(el);
              let current = index > -1;
              let entered = passes && !current;
              let exited  = !passes && current;

              if (entered) {
                  this.current.push(el);
                  this.emit('enter', el);
              }

              if (exited) {
                  this.current.splice(index, 1);
                  this.emit('exit', el);
              }

          });
          return this;
      }

      /**
      * Register a handler for event, to be fired
      * for every event.
      */
      on(event, handler) {
          this.handlers[event].push(handler);
          return this;
      }

      /**
      * Register a handler for event, to be fired
      * once and removed.
      */
      once(event, handler) {
          this.singles[event].unshift(handler);
          return this;
      }

      /**
      * Emit event on given element. Used mostly
      * internally, but could be useful for users.
      */
      emit(event, element) {
          while(this.singles[event].length) {
              this.singles[event].pop()(element);
          }
          let length = this.handlers[event].length;
          while (--length > -1) {
              this.handlers[event][length](element);
          }
          return this;
      }

  }

  var Registry = (elements, options) => new inViewRegistry(elements, options);

  /**
  * Check whether an element is in the viewport by
  * more than offset px.
  */
  function inViewport (element, options) {

      const { top, right, bottom, left, width, height } = element.getBoundingClientRect();

      const intersection = {
          t: bottom,
          r: window.innerWidth - left,
          b: window.innerHeight - top,
          l: right
      };

      const threshold = {
          x: options.threshold * width,
          y: options.threshold * height
      };

      return intersection.t > (options.offset.top    + threshold.y)
          && intersection.r > (options.offset.right  + threshold.x)
          && intersection.b > (options.offset.bottom + threshold.y)
          && intersection.l > (options.offset.left   + threshold.x);

  }

  var lodash = createCommonjsModule(function (module, exports) {
  (function() {

    /** Used as a safe reference for `undefined` in pre-ES5 environments. */
    var undefined;

    /** Used as the semantic version number. */
    var VERSION = '4.17.11';

    /** Used as the size to enable large array optimizations. */
    var LARGE_ARRAY_SIZE = 200;

    /** Error message constants. */
    var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
        FUNC_ERROR_TEXT = 'Expected a function';

    /** Used to stand-in for `undefined` hash values. */
    var HASH_UNDEFINED = '__lodash_hash_undefined__';

    /** Used as the maximum memoize cache size. */
    var MAX_MEMOIZE_SIZE = 500;

    /** Used as the internal argument placeholder. */
    var PLACEHOLDER = '__lodash_placeholder__';

    /** Used to compose bitmasks for cloning. */
    var CLONE_DEEP_FLAG = 1,
        CLONE_FLAT_FLAG = 2,
        CLONE_SYMBOLS_FLAG = 4;

    /** Used to compose bitmasks for value comparisons. */
    var COMPARE_PARTIAL_FLAG = 1,
        COMPARE_UNORDERED_FLAG = 2;

    /** Used to compose bitmasks for function metadata. */
    var WRAP_BIND_FLAG = 1,
        WRAP_BIND_KEY_FLAG = 2,
        WRAP_CURRY_BOUND_FLAG = 4,
        WRAP_CURRY_FLAG = 8,
        WRAP_CURRY_RIGHT_FLAG = 16,
        WRAP_PARTIAL_FLAG = 32,
        WRAP_PARTIAL_RIGHT_FLAG = 64,
        WRAP_ARY_FLAG = 128,
        WRAP_REARG_FLAG = 256,
        WRAP_FLIP_FLAG = 512;

    /** Used as default options for `_.truncate`. */
    var DEFAULT_TRUNC_LENGTH = 30,
        DEFAULT_TRUNC_OMISSION = '...';

    /** Used to detect hot functions by number of calls within a span of milliseconds. */
    var HOT_COUNT = 800,
        HOT_SPAN = 16;

    /** Used to indicate the type of lazy iteratees. */
    var LAZY_FILTER_FLAG = 1,
        LAZY_MAP_FLAG = 2,
        LAZY_WHILE_FLAG = 3;

    /** Used as references for various `Number` constants. */
    var INFINITY = 1 / 0,
        MAX_SAFE_INTEGER = 9007199254740991,
        MAX_INTEGER = 1.7976931348623157e+308,
        NAN = 0 / 0;

    /** Used as references for the maximum length and index of an array. */
    var MAX_ARRAY_LENGTH = 4294967295,
        MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
        HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

    /** Used to associate wrap methods with their bit flags. */
    var wrapFlags = [
      ['ary', WRAP_ARY_FLAG],
      ['bind', WRAP_BIND_FLAG],
      ['bindKey', WRAP_BIND_KEY_FLAG],
      ['curry', WRAP_CURRY_FLAG],
      ['curryRight', WRAP_CURRY_RIGHT_FLAG],
      ['flip', WRAP_FLIP_FLAG],
      ['partial', WRAP_PARTIAL_FLAG],
      ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
      ['rearg', WRAP_REARG_FLAG]
    ];

    /** `Object#toString` result references. */
    var argsTag = '[object Arguments]',
        arrayTag = '[object Array]',
        asyncTag = '[object AsyncFunction]',
        boolTag = '[object Boolean]',
        dateTag = '[object Date]',
        domExcTag = '[object DOMException]',
        errorTag = '[object Error]',
        funcTag = '[object Function]',
        genTag = '[object GeneratorFunction]',
        mapTag = '[object Map]',
        numberTag = '[object Number]',
        nullTag = '[object Null]',
        objectTag = '[object Object]',
        promiseTag = '[object Promise]',
        proxyTag = '[object Proxy]',
        regexpTag = '[object RegExp]',
        setTag = '[object Set]',
        stringTag = '[object String]',
        symbolTag = '[object Symbol]',
        undefinedTag = '[object Undefined]',
        weakMapTag = '[object WeakMap]',
        weakSetTag = '[object WeakSet]';

    var arrayBufferTag = '[object ArrayBuffer]',
        dataViewTag = '[object DataView]',
        float32Tag = '[object Float32Array]',
        float64Tag = '[object Float64Array]',
        int8Tag = '[object Int8Array]',
        int16Tag = '[object Int16Array]',
        int32Tag = '[object Int32Array]',
        uint8Tag = '[object Uint8Array]',
        uint8ClampedTag = '[object Uint8ClampedArray]',
        uint16Tag = '[object Uint16Array]',
        uint32Tag = '[object Uint32Array]';

    /** Used to match empty string literals in compiled template source. */
    var reEmptyStringLeading = /\b__p \+= '';/g,
        reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
        reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

    /** Used to match HTML entities and HTML characters. */
    var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
        reUnescapedHtml = /[&<>"']/g,
        reHasEscapedHtml = RegExp(reEscapedHtml.source),
        reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

    /** Used to match template delimiters. */
    var reEscape = /<%-([\s\S]+?)%>/g,
        reEvaluate = /<%([\s\S]+?)%>/g,
        reInterpolate = /<%=([\s\S]+?)%>/g;

    /** Used to match property names within property paths. */
    var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
        reIsPlainProp = /^\w*$/,
        rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

    /**
     * Used to match `RegExp`
     * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
     */
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
        reHasRegExpChar = RegExp(reRegExpChar.source);

    /** Used to match leading and trailing whitespace. */
    var reTrim = /^\s+|\s+$/g,
        reTrimStart = /^\s+/,
        reTrimEnd = /\s+$/;

    /** Used to match wrap detail comments. */
    var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
        reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
        reSplitDetails = /,? & /;

    /** Used to match words composed of alphanumeric characters. */
    var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

    /** Used to match backslashes in property paths. */
    var reEscapeChar = /\\(\\)?/g;

    /**
     * Used to match
     * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
     */
    var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

    /** Used to match `RegExp` flags from their coerced string values. */
    var reFlags = /\w*$/;

    /** Used to detect bad signed hexadecimal string values. */
    var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

    /** Used to detect binary string values. */
    var reIsBinary = /^0b[01]+$/i;

    /** Used to detect host constructors (Safari). */
    var reIsHostCtor = /^\[object .+?Constructor\]$/;

    /** Used to detect octal string values. */
    var reIsOctal = /^0o[0-7]+$/i;

    /** Used to detect unsigned integer values. */
    var reIsUint = /^(?:0|[1-9]\d*)$/;

    /** Used to match Latin Unicode letters (excluding mathematical operators). */
    var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

    /** Used to ensure capturing order of template delimiters. */
    var reNoMatch = /($^)/;

    /** Used to match unescaped characters in compiled string literals. */
    var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

    /** Used to compose unicode character classes. */
    var rsAstralRange = '\\ud800-\\udfff',
        rsComboMarksRange = '\\u0300-\\u036f',
        reComboHalfMarksRange = '\\ufe20-\\ufe2f',
        rsComboSymbolsRange = '\\u20d0-\\u20ff',
        rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
        rsDingbatRange = '\\u2700-\\u27bf',
        rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
        rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
        rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
        rsPunctuationRange = '\\u2000-\\u206f',
        rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
        rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
        rsVarRange = '\\ufe0e\\ufe0f',
        rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

    /** Used to compose unicode capture groups. */
    var rsApos = "['\u2019]",
        rsAstral = '[' + rsAstralRange + ']',
        rsBreak = '[' + rsBreakRange + ']',
        rsCombo = '[' + rsComboRange + ']',
        rsDigits = '\\d+',
        rsDingbat = '[' + rsDingbatRange + ']',
        rsLower = '[' + rsLowerRange + ']',
        rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
        rsFitz = '\\ud83c[\\udffb-\\udfff]',
        rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
        rsNonAstral = '[^' + rsAstralRange + ']',
        rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
        rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
        rsUpper = '[' + rsUpperRange + ']',
        rsZWJ = '\\u200d';

    /** Used to compose unicode regexes. */
    var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
        rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
        rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
        rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
        reOptMod = rsModifier + '?',
        rsOptVar = '[' + rsVarRange + ']?',
        rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
        rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
        rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
        rsSeq = rsOptVar + reOptMod + rsOptJoin,
        rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
        rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

    /** Used to match apostrophes. */
    var reApos = RegExp(rsApos, 'g');

    /**
     * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
     * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
     */
    var reComboMark = RegExp(rsCombo, 'g');

    /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
    var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

    /** Used to match complex or compound words. */
    var reUnicodeWord = RegExp([
      rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
      rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
      rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
      rsUpper + '+' + rsOptContrUpper,
      rsOrdUpper,
      rsOrdLower,
      rsDigits,
      rsEmoji
    ].join('|'), 'g');

    /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
    var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

    /** Used to detect strings that need a more robust regexp to match words. */
    var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

    /** Used to assign default `context` object properties. */
    var contextProps = [
      'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
      'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
      'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
      'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
      '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
    ];

    /** Used to make template sourceURLs easier to identify. */
    var templateCounter = -1;

    /** Used to identify `toStringTag` values of typed arrays. */
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
    typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
    typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
    typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
    typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
    typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
    typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
    typedArrayTags[errorTag] = typedArrayTags[funcTag] =
    typedArrayTags[mapTag] = typedArrayTags[numberTag] =
    typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
    typedArrayTags[setTag] = typedArrayTags[stringTag] =
    typedArrayTags[weakMapTag] = false;

    /** Used to identify `toStringTag` values supported by `_.clone`. */
    var cloneableTags = {};
    cloneableTags[argsTag] = cloneableTags[arrayTag] =
    cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
    cloneableTags[boolTag] = cloneableTags[dateTag] =
    cloneableTags[float32Tag] = cloneableTags[float64Tag] =
    cloneableTags[int8Tag] = cloneableTags[int16Tag] =
    cloneableTags[int32Tag] = cloneableTags[mapTag] =
    cloneableTags[numberTag] = cloneableTags[objectTag] =
    cloneableTags[regexpTag] = cloneableTags[setTag] =
    cloneableTags[stringTag] = cloneableTags[symbolTag] =
    cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
    cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
    cloneableTags[errorTag] = cloneableTags[funcTag] =
    cloneableTags[weakMapTag] = false;

    /** Used to map Latin Unicode letters to basic Latin letters. */
    var deburredLetters = {
      // Latin-1 Supplement block.
      '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
      '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
      '\xc7': 'C',  '\xe7': 'c',
      '\xd0': 'D',  '\xf0': 'd',
      '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
      '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
      '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
      '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
      '\xd1': 'N',  '\xf1': 'n',
      '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
      '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
      '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
      '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
      '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
      '\xc6': 'Ae', '\xe6': 'ae',
      '\xde': 'Th', '\xfe': 'th',
      '\xdf': 'ss',
      // Latin Extended-A block.
      '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
      '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
      '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
      '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
      '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
      '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
      '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
      '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
      '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
      '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
      '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
      '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
      '\u0134': 'J',  '\u0135': 'j',
      '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
      '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
      '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
      '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
      '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
      '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
      '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
      '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
      '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
      '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
      '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
      '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
      '\u0163': 't',  '\u0165': 't', '\u0167': 't',
      '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
      '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
      '\u0174': 'W',  '\u0175': 'w',
      '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
      '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
      '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
      '\u0132': 'IJ', '\u0133': 'ij',
      '\u0152': 'Oe', '\u0153': 'oe',
      '\u0149': "'n", '\u017f': 's'
    };

    /** Used to map characters to HTML entities. */
    var htmlEscapes = {
      '&': '&amp;',
      '<': '&lt;',
      '>': '&gt;',
      '"': '&quot;',
      "'": '&#39;'
    };

    /** Used to map HTML entities to characters. */
    var htmlUnescapes = {
      '&amp;': '&',
      '&lt;': '<',
      '&gt;': '>',
      '&quot;': '"',
      '&#39;': "'"
    };

    /** Used to escape characters for inclusion in compiled string literals. */
    var stringEscapes = {
      '\\': '\\',
      "'": "'",
      '\n': 'n',
      '\r': 'r',
      '\u2028': 'u2028',
      '\u2029': 'u2029'
    };

    /** Built-in method references without a dependency on `root`. */
    var freeParseFloat = parseFloat,
        freeParseInt = parseInt;

    /** Detect free variable `global` from Node.js. */
    var freeGlobal = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;

    /** Detect free variable `self`. */
    var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

    /** Used as a reference to the global object. */
    var root = freeGlobal || freeSelf || Function('return this')();

    /** Detect free variable `exports`. */
    var freeExports = 'object' == 'object' && exports && !exports.nodeType && exports;

    /** Detect free variable `module`. */
    var freeModule = freeExports && 'object' == 'object' && module && !module.nodeType && module;

    /** Detect the popular CommonJS extension `module.exports`. */
    var moduleExports = freeModule && freeModule.exports === freeExports;

    /** Detect free variable `process` from Node.js. */
    var freeProcess = moduleExports && freeGlobal.process;

    /** Used to access faster Node.js helpers. */
    var nodeUtil = (function() {
      try {
        // Use `util.types` for Node.js 10+.
        var types = freeModule && freeModule.require && freeModule.require('util').types;

        if (types) {
          return types;
        }

        // Legacy `process.binding('util')` for Node.js < 10.
        return freeProcess && freeProcess.binding && freeProcess.binding('util');
      } catch (e) {}
    }());

    /* Node.js helper references. */
    var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
        nodeIsDate = nodeUtil && nodeUtil.isDate,
        nodeIsMap = nodeUtil && nodeUtil.isMap,
        nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
        nodeIsSet = nodeUtil && nodeUtil.isSet,
        nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

    /*--------------------------------------------------------------------------*/

    /**
     * A faster alternative to `Function#apply`, this function invokes `func`
     * with the `this` binding of `thisArg` and the arguments of `args`.
     *
     * @private
     * @param {Function} func The function to invoke.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} args The arguments to invoke `func` with.
     * @returns {*} Returns the result of `func`.
     */
    function apply(func, thisArg, args) {
      switch (args.length) {
        case 0: return func.call(thisArg);
        case 1: return func.call(thisArg, args[0]);
        case 2: return func.call(thisArg, args[0], args[1]);
        case 3: return func.call(thisArg, args[0], args[1], args[2]);
      }
      return func.apply(thisArg, args);
    }

    /**
     * A specialized version of `baseAggregator` for arrays.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function arrayAggregator(array, setter, iteratee, accumulator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        var value = array[index];
        setter(accumulator, value, iteratee(value), array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.forEach` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEach(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (iteratee(array[index], index, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.forEachRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns `array`.
     */
    function arrayEachRight(array, iteratee) {
      var length = array == null ? 0 : array.length;

      while (length--) {
        if (iteratee(array[length], length, array) === false) {
          break;
        }
      }
      return array;
    }

    /**
     * A specialized version of `_.every` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     */
    function arrayEvery(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (!predicate(array[index], index, array)) {
          return false;
        }
      }
      return true;
    }

    /**
     * A specialized version of `_.filter` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function arrayFilter(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.includes` for arrays without support for
     * specifying an index to search from.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludes(array, value) {
      var length = array == null ? 0 : array.length;
      return !!length && baseIndexOf(array, value, 0) > -1;
    }

    /**
     * This function is like `arrayIncludes` except that it accepts a comparator.
     *
     * @private
     * @param {Array} [array] The array to inspect.
     * @param {*} target The value to search for.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {boolean} Returns `true` if `target` is found, else `false`.
     */
    function arrayIncludesWith(array, value, comparator) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (comparator(value, array[index])) {
          return true;
        }
      }
      return false;
    }

    /**
     * A specialized version of `_.map` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function arrayMap(array, iteratee) {
      var index = -1,
          length = array == null ? 0 : array.length,
          result = Array(length);

      while (++index < length) {
        result[index] = iteratee(array[index], index, array);
      }
      return result;
    }

    /**
     * Appends the elements of `values` to `array`.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to append.
     * @returns {Array} Returns `array`.
     */
    function arrayPush(array, values) {
      var index = -1,
          length = values.length,
          offset = array.length;

      while (++index < length) {
        array[offset + index] = values[index];
      }
      return array;
    }

    /**
     * A specialized version of `_.reduce` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the first element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduce(array, iteratee, accumulator, initAccum) {
      var index = -1,
          length = array == null ? 0 : array.length;

      if (initAccum && length) {
        accumulator = array[++index];
      }
      while (++index < length) {
        accumulator = iteratee(accumulator, array[index], index, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.reduceRight` for arrays without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @param {boolean} [initAccum] Specify using the last element of `array` as
     *  the initial value.
     * @returns {*} Returns the accumulated value.
     */
    function arrayReduceRight(array, iteratee, accumulator, initAccum) {
      var length = array == null ? 0 : array.length;
      if (initAccum && length) {
        accumulator = array[--length];
      }
      while (length--) {
        accumulator = iteratee(accumulator, array[length], length, array);
      }
      return accumulator;
    }

    /**
     * A specialized version of `_.some` for arrays without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} [array] The array to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function arraySome(array, predicate) {
      var index = -1,
          length = array == null ? 0 : array.length;

      while (++index < length) {
        if (predicate(array[index], index, array)) {
          return true;
        }
      }
      return false;
    }

    /**
     * Gets the size of an ASCII `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    var asciiSize = baseProperty('length');

    /**
     * Converts an ASCII `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function asciiToArray(string) {
      return string.split('');
    }

    /**
     * Splits an ASCII `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function asciiWords(string) {
      return string.match(reAsciiWord) || [];
    }

    /**
     * The base implementation of methods like `_.findKey` and `_.findLastKey`,
     * without support for iteratee shorthands, which iterates over `collection`
     * using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the found element or its key, else `undefined`.
     */
    function baseFindKey(collection, predicate, eachFunc) {
      var result;
      eachFunc(collection, function(value, key, collection) {
        if (predicate(value, key, collection)) {
          result = key;
          return false;
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.findIndex` and `_.findLastIndex` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} predicate The function invoked per iteration.
     * @param {number} fromIndex The index to search from.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseFindIndex(array, predicate, fromIndex, fromRight) {
      var length = array.length,
          index = fromIndex + (fromRight ? 1 : -1);

      while ((fromRight ? index-- : ++index < length)) {
        if (predicate(array[index], index, array)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOf(array, value, fromIndex) {
      return value === value
        ? strictIndexOf(array, value, fromIndex)
        : baseFindIndex(array, baseIsNaN, fromIndex);
    }

    /**
     * This function is like `baseIndexOf` except that it accepts a comparator.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @param {Function} comparator The comparator invoked per element.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function baseIndexOfWith(array, value, fromIndex, comparator) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (comparator(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * The base implementation of `_.isNaN` without support for number objects.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     */
    function baseIsNaN(value) {
      return value !== value;
    }

    /**
     * The base implementation of `_.mean` and `_.meanBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the mean.
     */
    function baseMean(array, iteratee) {
      var length = array == null ? 0 : array.length;
      return length ? (baseSum(array, iteratee) / length) : NAN;
    }

    /**
     * The base implementation of `_.property` without support for deep paths.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function baseProperty(key) {
      return function(object) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.propertyOf` without support for deep paths.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyOf(object) {
      return function(key) {
        return object == null ? undefined : object[key];
      };
    }

    /**
     * The base implementation of `_.reduce` and `_.reduceRight`, without support
     * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {*} accumulator The initial value.
     * @param {boolean} initAccum Specify using the first or last element of
     *  `collection` as the initial value.
     * @param {Function} eachFunc The function to iterate over `collection`.
     * @returns {*} Returns the accumulated value.
     */
    function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
      eachFunc(collection, function(value, index, collection) {
        accumulator = initAccum
          ? (initAccum = false, value)
          : iteratee(accumulator, value, index, collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.sortBy` which uses `comparer` to define the
     * sort order of `array` and replaces criteria objects with their corresponding
     * values.
     *
     * @private
     * @param {Array} array The array to sort.
     * @param {Function} comparer The function to define sort order.
     * @returns {Array} Returns `array`.
     */
    function baseSortBy(array, comparer) {
      var length = array.length;

      array.sort(comparer);
      while (length--) {
        array[length] = array[length].value;
      }
      return array;
    }

    /**
     * The base implementation of `_.sum` and `_.sumBy` without support for
     * iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {number} Returns the sum.
     */
    function baseSum(array, iteratee) {
      var result,
          index = -1,
          length = array.length;

      while (++index < length) {
        var current = iteratee(array[index]);
        if (current !== undefined) {
          result = result === undefined ? current : (result + current);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.times` without support for iteratee shorthands
     * or max array length checks.
     *
     * @private
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     */
    function baseTimes(n, iteratee) {
      var index = -1,
          result = Array(n);

      while (++index < n) {
        result[index] = iteratee(index);
      }
      return result;
    }

    /**
     * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
     * of key-value pairs for `object` corresponding to the property names of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the key-value pairs.
     */
    function baseToPairs(object, props) {
      return arrayMap(props, function(key) {
        return [key, object[key]];
      });
    }

    /**
     * The base implementation of `_.unary` without support for storing metadata.
     *
     * @private
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     */
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }

    /**
     * The base implementation of `_.values` and `_.valuesIn` which creates an
     * array of `object` property values corresponding to the property names
     * of `props`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} props The property names to get values for.
     * @returns {Object} Returns the array of property values.
     */
    function baseValues(object, props) {
      return arrayMap(props, function(key) {
        return object[key];
      });
    }

    /**
     * Checks if a `cache` value for `key` exists.
     *
     * @private
     * @param {Object} cache The cache to query.
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function cacheHas(cache, key) {
      return cache.has(key);
    }

    /**
     * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the first unmatched string symbol.
     */
    function charsStartIndex(strSymbols, chrSymbols) {
      var index = -1,
          length = strSymbols.length;

      while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
     * that is not found in the character symbols.
     *
     * @private
     * @param {Array} strSymbols The string symbols to inspect.
     * @param {Array} chrSymbols The character symbols to find.
     * @returns {number} Returns the index of the last unmatched string symbol.
     */
    function charsEndIndex(strSymbols, chrSymbols) {
      var index = strSymbols.length;

      while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
      return index;
    }

    /**
     * Gets the number of `placeholder` occurrences in `array`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} placeholder The placeholder to search for.
     * @returns {number} Returns the placeholder count.
     */
    function countHolders(array, placeholder) {
      var length = array.length,
          result = 0;

      while (length--) {
        if (array[length] === placeholder) {
          ++result;
        }
      }
      return result;
    }

    /**
     * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
     * letters to basic Latin letters.
     *
     * @private
     * @param {string} letter The matched letter to deburr.
     * @returns {string} Returns the deburred letter.
     */
    var deburrLetter = basePropertyOf(deburredLetters);

    /**
     * Used by `_.escape` to convert characters to HTML entities.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    var escapeHtmlChar = basePropertyOf(htmlEscapes);

    /**
     * Used by `_.template` to escape characters for inclusion in compiled string literals.
     *
     * @private
     * @param {string} chr The matched character to escape.
     * @returns {string} Returns the escaped character.
     */
    function escapeStringChar(chr) {
      return '\\' + stringEscapes[chr];
    }

    /**
     * Gets the value at `key` of `object`.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function getValue(object, key) {
      return object == null ? undefined : object[key];
    }

    /**
     * Checks if `string` contains Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a symbol is found, else `false`.
     */
    function hasUnicode(string) {
      return reHasUnicode.test(string);
    }

    /**
     * Checks if `string` contains a word composed of Unicode symbols.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {boolean} Returns `true` if a word is found, else `false`.
     */
    function hasUnicodeWord(string) {
      return reHasUnicodeWord.test(string);
    }

    /**
     * Converts `iterator` to an array.
     *
     * @private
     * @param {Object} iterator The iterator to convert.
     * @returns {Array} Returns the converted array.
     */
    function iteratorToArray(iterator) {
      var data,
          result = [];

      while (!(data = iterator.next()).done) {
        result.push(data.value);
      }
      return result;
    }

    /**
     * Converts `map` to its key-value pairs.
     *
     * @private
     * @param {Object} map The map to convert.
     * @returns {Array} Returns the key-value pairs.
     */
    function mapToArray(map) {
      var index = -1,
          result = Array(map.size);

      map.forEach(function(value, key) {
        result[++index] = [key, value];
      });
      return result;
    }

    /**
     * Creates a unary function that invokes `func` with its argument transformed.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {Function} transform The argument transform.
     * @returns {Function} Returns the new function.
     */
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }

    /**
     * Replaces all `placeholder` elements in `array` with an internal placeholder
     * and returns an array of their indexes.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {*} placeholder The placeholder to replace.
     * @returns {Array} Returns the new array of placeholder indexes.
     */
    function replaceHolders(array, placeholder) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value === placeholder || value === PLACEHOLDER) {
          array[index] = PLACEHOLDER;
          result[resIndex++] = index;
        }
      }
      return result;
    }

    /**
     * Converts `set` to an array of its values.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the values.
     */
    function setToArray(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = value;
      });
      return result;
    }

    /**
     * Converts `set` to its value-value pairs.
     *
     * @private
     * @param {Object} set The set to convert.
     * @returns {Array} Returns the value-value pairs.
     */
    function setToPairs(set) {
      var index = -1,
          result = Array(set.size);

      set.forEach(function(value) {
        result[++index] = [value, value];
      });
      return result;
    }

    /**
     * A specialized version of `_.indexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictIndexOf(array, value, fromIndex) {
      var index = fromIndex - 1,
          length = array.length;

      while (++index < length) {
        if (array[index] === value) {
          return index;
        }
      }
      return -1;
    }

    /**
     * A specialized version of `_.lastIndexOf` which performs strict equality
     * comparisons of values, i.e. `===`.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} fromIndex The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function strictLastIndexOf(array, value, fromIndex) {
      var index = fromIndex + 1;
      while (index--) {
        if (array[index] === value) {
          return index;
        }
      }
      return index;
    }

    /**
     * Gets the number of symbols in `string`.
     *
     * @private
     * @param {string} string The string to inspect.
     * @returns {number} Returns the string size.
     */
    function stringSize(string) {
      return hasUnicode(string)
        ? unicodeSize(string)
        : asciiSize(string);
    }

    /**
     * Converts `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function stringToArray(string) {
      return hasUnicode(string)
        ? unicodeToArray(string)
        : asciiToArray(string);
    }

    /**
     * Used by `_.unescape` to convert HTML entities to characters.
     *
     * @private
     * @param {string} chr The matched character to unescape.
     * @returns {string} Returns the unescaped character.
     */
    var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

    /**
     * Gets the size of a Unicode `string`.
     *
     * @private
     * @param {string} string The string inspect.
     * @returns {number} Returns the string size.
     */
    function unicodeSize(string) {
      var result = reUnicode.lastIndex = 0;
      while (reUnicode.test(string)) {
        ++result;
      }
      return result;
    }

    /**
     * Converts a Unicode `string` to an array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the converted array.
     */
    function unicodeToArray(string) {
      return string.match(reUnicode) || [];
    }

    /**
     * Splits a Unicode `string` into an array of its words.
     *
     * @private
     * @param {string} The string to inspect.
     * @returns {Array} Returns the words of `string`.
     */
    function unicodeWords(string) {
      return string.match(reUnicodeWord) || [];
    }

    /*--------------------------------------------------------------------------*/

    /**
     * Create a new pristine `lodash` function using the `context` object.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Util
     * @param {Object} [context=root] The context object.
     * @returns {Function} Returns a new `lodash` function.
     * @example
     *
     * _.mixin({ 'foo': _.constant('foo') });
     *
     * var lodash = _.runInContext();
     * lodash.mixin({ 'bar': lodash.constant('bar') });
     *
     * _.isFunction(_.foo);
     * // => true
     * _.isFunction(_.bar);
     * // => false
     *
     * lodash.isFunction(lodash.foo);
     * // => false
     * lodash.isFunction(lodash.bar);
     * // => true
     *
     * // Create a suped-up `defer` in Node.js.
     * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
     */
    var runInContext = (function runInContext(context) {
      context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

      /** Built-in constructor references. */
      var Array = context.Array,
          Date = context.Date,
          Error = context.Error,
          Function = context.Function,
          Math = context.Math,
          Object = context.Object,
          RegExp = context.RegExp,
          String = context.String,
          TypeError = context.TypeError;

      /** Used for built-in method references. */
      var arrayProto = Array.prototype,
          funcProto = Function.prototype,
          objectProto = Object.prototype;

      /** Used to detect overreaching core-js shims. */
      var coreJsData = context['__core-js_shared__'];

      /** Used to resolve the decompiled source of functions. */
      var funcToString = funcProto.toString;

      /** Used to check objects for own properties. */
      var hasOwnProperty = objectProto.hasOwnProperty;

      /** Used to generate unique IDs. */
      var idCounter = 0;

      /** Used to detect methods masquerading as native. */
      var maskSrcKey = (function() {
        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
        return uid ? ('Symbol(src)_1.' + uid) : '';
      }());

      /**
       * Used to resolve the
       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
       * of values.
       */
      var nativeObjectToString = objectProto.toString;

      /** Used to infer the `Object` constructor. */
      var objectCtorString = funcToString.call(Object);

      /** Used to restore the original `_` reference in `_.noConflict`. */
      var oldDash = root._;

      /** Used to detect if a method is native. */
      var reIsNative = RegExp('^' +
        funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
        .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
      );

      /** Built-in value references. */
      var Buffer = moduleExports ? context.Buffer : undefined,
          Symbol = context.Symbol,
          Uint8Array = context.Uint8Array,
          allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
          getPrototype = overArg(Object.getPrototypeOf, Object),
          objectCreate = Object.create,
          propertyIsEnumerable = objectProto.propertyIsEnumerable,
          splice = arrayProto.splice,
          spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
          symIterator = Symbol ? Symbol.iterator : undefined,
          symToStringTag = Symbol ? Symbol.toStringTag : undefined;

      var defineProperty = (function() {
        try {
          var func = getNative(Object, 'defineProperty');
          func({}, '', {});
          return func;
        } catch (e) {}
      }());

      /** Mocked built-ins. */
      var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
          ctxNow = Date && Date.now !== root.Date.now && Date.now,
          ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

      /* Built-in method references for those with the same name as other `lodash` methods. */
      var nativeCeil = Math.ceil,
          nativeFloor = Math.floor,
          nativeGetSymbols = Object.getOwnPropertySymbols,
          nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
          nativeIsFinite = context.isFinite,
          nativeJoin = arrayProto.join,
          nativeKeys = overArg(Object.keys, Object),
          nativeMax = Math.max,
          nativeMin = Math.min,
          nativeNow = Date.now,
          nativeParseInt = context.parseInt,
          nativeRandom = Math.random,
          nativeReverse = arrayProto.reverse;

      /* Built-in method references that are verified to be native. */
      var DataView = getNative(context, 'DataView'),
          Map = getNative(context, 'Map'),
          Promise = getNative(context, 'Promise'),
          Set = getNative(context, 'Set'),
          WeakMap = getNative(context, 'WeakMap'),
          nativeCreate = getNative(Object, 'create');

      /** Used to store function metadata. */
      var metaMap = WeakMap && new WeakMap;

      /** Used to lookup unminified function names. */
      var realNames = {};

      /** Used to detect maps, sets, and weakmaps. */
      var dataViewCtorString = toSource(DataView),
          mapCtorString = toSource(Map),
          promiseCtorString = toSource(Promise),
          setCtorString = toSource(Set),
          weakMapCtorString = toSource(WeakMap);

      /** Used to convert symbols to primitives and strings. */
      var symbolProto = Symbol ? Symbol.prototype : undefined,
          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
          symbolToString = symbolProto ? symbolProto.toString : undefined;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` object which wraps `value` to enable implicit method
       * chain sequences. Methods that operate on and return arrays, collections,
       * and functions can be chained together. Methods that retrieve a single value
       * or may return a primitive value will automatically end the chain sequence
       * and return the unwrapped value. Otherwise, the value must be unwrapped
       * with `_#value`.
       *
       * Explicit chain sequences, which must be unwrapped with `_#value`, may be
       * enabled using `_.chain`.
       *
       * The execution of chained methods is lazy, that is, it's deferred until
       * `_#value` is implicitly or explicitly called.
       *
       * Lazy evaluation allows several methods to support shortcut fusion.
       * Shortcut fusion is an optimization to merge iteratee calls; this avoids
       * the creation of intermediate arrays and can greatly reduce the number of
       * iteratee executions. Sections of a chain sequence qualify for shortcut
       * fusion if the section is applied to an array and iteratees accept only
       * one argument. The heuristic for whether a section qualifies for shortcut
       * fusion is subject to change.
       *
       * Chaining is supported in custom builds as long as the `_#value` method is
       * directly or indirectly included in the build.
       *
       * In addition to lodash methods, wrappers have `Array` and `String` methods.
       *
       * The wrapper `Array` methods are:
       * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
       *
       * The wrapper `String` methods are:
       * `replace` and `split`
       *
       * The wrapper methods that support shortcut fusion are:
       * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
       * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
       * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
       *
       * The chainable wrapper methods are:
       * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
       * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
       * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
       * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
       * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
       * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
       * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
       * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
       * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
       * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
       * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
       * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
       * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
       * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
       * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
       * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
       * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
       * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
       * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
       * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
       * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
       * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
       * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
       * `zipObject`, `zipObjectDeep`, and `zipWith`
       *
       * The wrapper methods that are **not** chainable by default are:
       * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
       * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
       * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
       * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
       * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
       * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
       * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
       * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
       * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
       * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
       * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
       * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
       * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
       * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
       * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
       * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
       * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
       * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
       * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
       * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
       * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
       * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
       * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
       * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
       * `upperFirst`, `value`, and `words`
       *
       * @name _
       * @constructor
       * @category Seq
       * @param {*} value The value to wrap in a `lodash` instance.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2, 3]);
       *
       * // Returns an unwrapped value.
       * wrapped.reduce(_.add);
       * // => 6
       *
       * // Returns a wrapped value.
       * var squares = wrapped.map(square);
       *
       * _.isArray(squares);
       * // => false
       *
       * _.isArray(squares.value());
       * // => true
       */
      function lodash(value) {
        if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
          if (value instanceof LodashWrapper) {
            return value;
          }
          if (hasOwnProperty.call(value, '__wrapped__')) {
            return wrapperClone(value);
          }
        }
        return new LodashWrapper(value);
      }

      /**
       * The base implementation of `_.create` without support for assigning
       * properties to the created object.
       *
       * @private
       * @param {Object} proto The object to inherit from.
       * @returns {Object} Returns the new object.
       */
      var baseCreate = (function() {
        function object() {}
        return function(proto) {
          if (!isObject(proto)) {
            return {};
          }
          if (objectCreate) {
            return objectCreate(proto);
          }
          object.prototype = proto;
          var result = new object;
          object.prototype = undefined;
          return result;
        };
      }());

      /**
       * The function whose prototype chain sequence wrappers inherit from.
       *
       * @private
       */
      function baseLodash() {
        // No operation performed.
      }

      /**
       * The base constructor for creating `lodash` wrapper objects.
       *
       * @private
       * @param {*} value The value to wrap.
       * @param {boolean} [chainAll] Enable explicit method chain sequences.
       */
      function LodashWrapper(value, chainAll) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__chain__ = !!chainAll;
        this.__index__ = 0;
        this.__values__ = undefined;
      }

      /**
       * By default, the template delimiters used by lodash are like those in
       * embedded Ruby (ERB) as well as ES2015 template strings. Change the
       * following template settings to use alternative delimiters.
       *
       * @static
       * @memberOf _
       * @type {Object}
       */
      lodash.templateSettings = {

        /**
         * Used to detect `data` property values to be HTML-escaped.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'escape': reEscape,

        /**
         * Used to detect code to be evaluated.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'evaluate': reEvaluate,

        /**
         * Used to detect `data` property values to inject.
         *
         * @memberOf _.templateSettings
         * @type {RegExp}
         */
        'interpolate': reInterpolate,

        /**
         * Used to reference the data object in the template text.
         *
         * @memberOf _.templateSettings
         * @type {string}
         */
        'variable': '',

        /**
         * Used to import variables into the compiled template.
         *
         * @memberOf _.templateSettings
         * @type {Object}
         */
        'imports': {

          /**
           * A reference to the `lodash` function.
           *
           * @memberOf _.templateSettings.imports
           * @type {Function}
           */
          '_': lodash
        }
      };

      // Ensure wrappers are instances of `baseLodash`.
      lodash.prototype = baseLodash.prototype;
      lodash.prototype.constructor = lodash;

      LodashWrapper.prototype = baseCreate(baseLodash.prototype);
      LodashWrapper.prototype.constructor = LodashWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
       *
       * @private
       * @constructor
       * @param {*} value The value to wrap.
       */
      function LazyWrapper(value) {
        this.__wrapped__ = value;
        this.__actions__ = [];
        this.__dir__ = 1;
        this.__filtered__ = false;
        this.__iteratees__ = [];
        this.__takeCount__ = MAX_ARRAY_LENGTH;
        this.__views__ = [];
      }

      /**
       * Creates a clone of the lazy wrapper object.
       *
       * @private
       * @name clone
       * @memberOf LazyWrapper
       * @returns {Object} Returns the cloned `LazyWrapper` object.
       */
      function lazyClone() {
        var result = new LazyWrapper(this.__wrapped__);
        result.__actions__ = copyArray(this.__actions__);
        result.__dir__ = this.__dir__;
        result.__filtered__ = this.__filtered__;
        result.__iteratees__ = copyArray(this.__iteratees__);
        result.__takeCount__ = this.__takeCount__;
        result.__views__ = copyArray(this.__views__);
        return result;
      }

      /**
       * Reverses the direction of lazy iteration.
       *
       * @private
       * @name reverse
       * @memberOf LazyWrapper
       * @returns {Object} Returns the new reversed `LazyWrapper` object.
       */
      function lazyReverse() {
        if (this.__filtered__) {
          var result = new LazyWrapper(this);
          result.__dir__ = -1;
          result.__filtered__ = true;
        } else {
          result = this.clone();
          result.__dir__ *= -1;
        }
        return result;
      }

      /**
       * Extracts the unwrapped value from its lazy wrapper.
       *
       * @private
       * @name value
       * @memberOf LazyWrapper
       * @returns {*} Returns the unwrapped value.
       */
      function lazyValue() {
        var array = this.__wrapped__.value(),
            dir = this.__dir__,
            isArr = isArray(array),
            isRight = dir < 0,
            arrLength = isArr ? array.length : 0,
            view = getView(0, arrLength, this.__views__),
            start = view.start,
            end = view.end,
            length = end - start,
            index = isRight ? end : (start - 1),
            iteratees = this.__iteratees__,
            iterLength = iteratees.length,
            resIndex = 0,
            takeCount = nativeMin(length, this.__takeCount__);

        if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
          return baseWrapperValue(array, this.__actions__);
        }
        var result = [];

        outer:
        while (length-- && resIndex < takeCount) {
          index += dir;

          var iterIndex = -1,
              value = array[index];

          while (++iterIndex < iterLength) {
            var data = iteratees[iterIndex],
                iteratee = data.iteratee,
                type = data.type,
                computed = iteratee(value);

            if (type == LAZY_MAP_FLAG) {
              value = computed;
            } else if (!computed) {
              if (type == LAZY_FILTER_FLAG) {
                continue outer;
              } else {
                break outer;
              }
            }
          }
          result[resIndex++] = value;
        }
        return result;
      }

      // Ensure `LazyWrapper` is an instance of `baseLodash`.
      LazyWrapper.prototype = baseCreate(baseLodash.prototype);
      LazyWrapper.prototype.constructor = LazyWrapper;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a hash object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Hash(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the hash.
       *
       * @private
       * @name clear
       * @memberOf Hash
       */
      function hashClear() {
        this.__data__ = nativeCreate ? nativeCreate(null) : {};
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the hash.
       *
       * @private
       * @name delete
       * @memberOf Hash
       * @param {Object} hash The hash to modify.
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function hashDelete(key) {
        var result = this.has(key) && delete this.__data__[key];
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the hash value for `key`.
       *
       * @private
       * @name get
       * @memberOf Hash
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function hashGet(key) {
        var data = this.__data__;
        if (nativeCreate) {
          var result = data[key];
          return result === HASH_UNDEFINED ? undefined : result;
        }
        return hasOwnProperty.call(data, key) ? data[key] : undefined;
      }

      /**
       * Checks if a hash value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Hash
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function hashHas(key) {
        var data = this.__data__;
        return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
      }

      /**
       * Sets the hash `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Hash
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the hash instance.
       */
      function hashSet(key, value) {
        var data = this.__data__;
        this.size += this.has(key) ? 0 : 1;
        data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
        return this;
      }

      // Add methods to `Hash`.
      Hash.prototype.clear = hashClear;
      Hash.prototype['delete'] = hashDelete;
      Hash.prototype.get = hashGet;
      Hash.prototype.has = hashHas;
      Hash.prototype.set = hashSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an list cache object.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function ListCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the list cache.
       *
       * @private
       * @name clear
       * @memberOf ListCache
       */
      function listCacheClear() {
        this.__data__ = [];
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the list cache.
       *
       * @private
       * @name delete
       * @memberOf ListCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function listCacheDelete(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          return false;
        }
        var lastIndex = data.length - 1;
        if (index == lastIndex) {
          data.pop();
        } else {
          splice.call(data, index, 1);
        }
        --this.size;
        return true;
      }

      /**
       * Gets the list cache value for `key`.
       *
       * @private
       * @name get
       * @memberOf ListCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function listCacheGet(key) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        return index < 0 ? undefined : data[index][1];
      }

      /**
       * Checks if a list cache value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf ListCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function listCacheHas(key) {
        return assocIndexOf(this.__data__, key) > -1;
      }

      /**
       * Sets the list cache `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf ListCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the list cache instance.
       */
      function listCacheSet(key, value) {
        var data = this.__data__,
            index = assocIndexOf(data, key);

        if (index < 0) {
          ++this.size;
          data.push([key, value]);
        } else {
          data[index][1] = value;
        }
        return this;
      }

      // Add methods to `ListCache`.
      ListCache.prototype.clear = listCacheClear;
      ListCache.prototype['delete'] = listCacheDelete;
      ListCache.prototype.get = listCacheGet;
      ListCache.prototype.has = listCacheHas;
      ListCache.prototype.set = listCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a map cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function MapCache(entries) {
        var index = -1,
            length = entries == null ? 0 : entries.length;

        this.clear();
        while (++index < length) {
          var entry = entries[index];
          this.set(entry[0], entry[1]);
        }
      }

      /**
       * Removes all key-value entries from the map.
       *
       * @private
       * @name clear
       * @memberOf MapCache
       */
      function mapCacheClear() {
        this.size = 0;
        this.__data__ = {
          'hash': new Hash,
          'map': new (Map || ListCache),
          'string': new Hash
        };
      }

      /**
       * Removes `key` and its value from the map.
       *
       * @private
       * @name delete
       * @memberOf MapCache
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function mapCacheDelete(key) {
        var result = getMapData(this, key)['delete'](key);
        this.size -= result ? 1 : 0;
        return result;
      }

      /**
       * Gets the map value for `key`.
       *
       * @private
       * @name get
       * @memberOf MapCache
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function mapCacheGet(key) {
        return getMapData(this, key).get(key);
      }

      /**
       * Checks if a map value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf MapCache
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function mapCacheHas(key) {
        return getMapData(this, key).has(key);
      }

      /**
       * Sets the map `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf MapCache
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the map cache instance.
       */
      function mapCacheSet(key, value) {
        var data = getMapData(this, key),
            size = data.size;

        data.set(key, value);
        this.size += data.size == size ? 0 : 1;
        return this;
      }

      // Add methods to `MapCache`.
      MapCache.prototype.clear = mapCacheClear;
      MapCache.prototype['delete'] = mapCacheDelete;
      MapCache.prototype.get = mapCacheGet;
      MapCache.prototype.has = mapCacheHas;
      MapCache.prototype.set = mapCacheSet;

      /*------------------------------------------------------------------------*/

      /**
       *
       * Creates an array cache object to store unique values.
       *
       * @private
       * @constructor
       * @param {Array} [values] The values to cache.
       */
      function SetCache(values) {
        var index = -1,
            length = values == null ? 0 : values.length;

        this.__data__ = new MapCache;
        while (++index < length) {
          this.add(values[index]);
        }
      }

      /**
       * Adds `value` to the array cache.
       *
       * @private
       * @name add
       * @memberOf SetCache
       * @alias push
       * @param {*} value The value to cache.
       * @returns {Object} Returns the cache instance.
       */
      function setCacheAdd(value) {
        this.__data__.set(value, HASH_UNDEFINED);
        return this;
      }

      /**
       * Checks if `value` is in the array cache.
       *
       * @private
       * @name has
       * @memberOf SetCache
       * @param {*} value The value to search for.
       * @returns {number} Returns `true` if `value` is found, else `false`.
       */
      function setCacheHas(value) {
        return this.__data__.has(value);
      }

      // Add methods to `SetCache`.
      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
      SetCache.prototype.has = setCacheHas;

      /*------------------------------------------------------------------------*/

      /**
       * Creates a stack cache object to store key-value pairs.
       *
       * @private
       * @constructor
       * @param {Array} [entries] The key-value pairs to cache.
       */
      function Stack(entries) {
        var data = this.__data__ = new ListCache(entries);
        this.size = data.size;
      }

      /**
       * Removes all key-value entries from the stack.
       *
       * @private
       * @name clear
       * @memberOf Stack
       */
      function stackClear() {
        this.__data__ = new ListCache;
        this.size = 0;
      }

      /**
       * Removes `key` and its value from the stack.
       *
       * @private
       * @name delete
       * @memberOf Stack
       * @param {string} key The key of the value to remove.
       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
       */
      function stackDelete(key) {
        var data = this.__data__,
            result = data['delete'](key);

        this.size = data.size;
        return result;
      }

      /**
       * Gets the stack value for `key`.
       *
       * @private
       * @name get
       * @memberOf Stack
       * @param {string} key The key of the value to get.
       * @returns {*} Returns the entry value.
       */
      function stackGet(key) {
        return this.__data__.get(key);
      }

      /**
       * Checks if a stack value for `key` exists.
       *
       * @private
       * @name has
       * @memberOf Stack
       * @param {string} key The key of the entry to check.
       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
       */
      function stackHas(key) {
        return this.__data__.has(key);
      }

      /**
       * Sets the stack `key` to `value`.
       *
       * @private
       * @name set
       * @memberOf Stack
       * @param {string} key The key of the value to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns the stack cache instance.
       */
      function stackSet(key, value) {
        var data = this.__data__;
        if (data instanceof ListCache) {
          var pairs = data.__data__;
          if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
            pairs.push([key, value]);
            this.size = ++data.size;
            return this;
          }
          data = this.__data__ = new MapCache(pairs);
        }
        data.set(key, value);
        this.size = data.size;
        return this;
      }

      // Add methods to `Stack`.
      Stack.prototype.clear = stackClear;
      Stack.prototype['delete'] = stackDelete;
      Stack.prototype.get = stackGet;
      Stack.prototype.has = stackHas;
      Stack.prototype.set = stackSet;

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of the enumerable property names of the array-like `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @param {boolean} inherited Specify returning inherited property names.
       * @returns {Array} Returns the array of property names.
       */
      function arrayLikeKeys(value, inherited) {
        var isArr = isArray(value),
            isArg = !isArr && isArguments(value),
            isBuff = !isArr && !isArg && isBuffer(value),
            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
            skipIndexes = isArr || isArg || isBuff || isType,
            result = skipIndexes ? baseTimes(value.length, String) : [],
            length = result.length;

        for (var key in value) {
          if ((inherited || hasOwnProperty.call(value, key)) &&
              !(skipIndexes && (
                 // Safari 9 has enumerable `arguments.length` in strict mode.
                 key == 'length' ||
                 // Node.js 0.10 has enumerable non-index properties on buffers.
                 (isBuff && (key == 'offset' || key == 'parent')) ||
                 // PhantomJS 2 has enumerable non-index properties on typed arrays.
                 (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
                 // Skip index properties.
                 isIndex(key, length)
              ))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * A specialized version of `_.sample` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @returns {*} Returns the random element.
       */
      function arraySample(array) {
        var length = array.length;
        return length ? array[baseRandom(0, length - 1)] : undefined;
      }

      /**
       * A specialized version of `_.sampleSize` for arrays.
       *
       * @private
       * @param {Array} array The array to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function arraySampleSize(array, n) {
        return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
      }

      /**
       * A specialized version of `_.shuffle` for arrays.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function arrayShuffle(array) {
        return shuffleSelf(copyArray(array));
      }

      /**
       * This function is like `assignValue` except that it doesn't assign
       * `undefined` values.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignMergeValue(object, key, value) {
        if ((value !== undefined && !eq(object[key], value)) ||
            (value === undefined && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Assigns `value` to `key` of `object` if the existing value is not equivalent
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function assignValue(object, key, value) {
        var objValue = object[key];
        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
            (value === undefined && !(key in object))) {
          baseAssignValue(object, key, value);
        }
      }

      /**
       * Gets the index at which the `key` is found in `array` of key-value pairs.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {*} key The key to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       */
      function assocIndexOf(array, key) {
        var length = array.length;
        while (length--) {
          if (eq(array[length][0], key)) {
            return length;
          }
        }
        return -1;
      }

      /**
       * Aggregates elements of `collection` on `accumulator` with keys transformed
       * by `iteratee` and values set by `setter`.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform keys.
       * @param {Object} accumulator The initial aggregated object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseAggregator(collection, setter, iteratee, accumulator) {
        baseEach(collection, function(value, key, collection) {
          setter(accumulator, value, iteratee(value), collection);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.assign` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssign(object, source) {
        return object && copyObject(source, keys(source), object);
      }

      /**
       * The base implementation of `_.assignIn` without support for multiple sources
       * or `customizer` functions.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @returns {Object} Returns `object`.
       */
      function baseAssignIn(object, source) {
        return object && copyObject(source, keysIn(source), object);
      }

      /**
       * The base implementation of `assignValue` and `assignMergeValue` without
       * value checks.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {string} key The key of the property to assign.
       * @param {*} value The value to assign.
       */
      function baseAssignValue(object, key, value) {
        if (key == '__proto__' && defineProperty) {
          defineProperty(object, key, {
            'configurable': true,
            'enumerable': true,
            'value': value,
            'writable': true
          });
        } else {
          object[key] = value;
        }
      }

      /**
       * The base implementation of `_.at` without support for individual paths.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {string[]} paths The property paths to pick.
       * @returns {Array} Returns the picked elements.
       */
      function baseAt(object, paths) {
        var index = -1,
            length = paths.length,
            result = Array(length),
            skip = object == null;

        while (++index < length) {
          result[index] = skip ? undefined : get(object, paths[index]);
        }
        return result;
      }

      /**
       * The base implementation of `_.clamp` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       */
      function baseClamp(number, lower, upper) {
        if (number === number) {
          if (upper !== undefined) {
            number = number <= upper ? number : upper;
          }
          if (lower !== undefined) {
            number = number >= lower ? number : lower;
          }
        }
        return number;
      }

      /**
       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
       * traversed objects.
       *
       * @private
       * @param {*} value The value to clone.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Deep clone
       *  2 - Flatten inherited properties
       *  4 - Clone symbols
       * @param {Function} [customizer] The function to customize cloning.
       * @param {string} [key] The key of `value`.
       * @param {Object} [object] The parent object of `value`.
       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
       * @returns {*} Returns the cloned value.
       */
      function baseClone(value, bitmask, customizer, key, object, stack) {
        var result,
            isDeep = bitmask & CLONE_DEEP_FLAG,
            isFlat = bitmask & CLONE_FLAT_FLAG,
            isFull = bitmask & CLONE_SYMBOLS_FLAG;

        if (customizer) {
          result = object ? customizer(value, key, object, stack) : customizer(value);
        }
        if (result !== undefined) {
          return result;
        }
        if (!isObject(value)) {
          return value;
        }
        var isArr = isArray(value);
        if (isArr) {
          result = initCloneArray(value);
          if (!isDeep) {
            return copyArray(value, result);
          }
        } else {
          var tag = getTag(value),
              isFunc = tag == funcTag || tag == genTag;

          if (isBuffer(value)) {
            return cloneBuffer(value, isDeep);
          }
          if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
            result = (isFlat || isFunc) ? {} : initCloneObject(value);
            if (!isDeep) {
              return isFlat
                ? copySymbolsIn(value, baseAssignIn(result, value))
                : copySymbols(value, baseAssign(result, value));
            }
          } else {
            if (!cloneableTags[tag]) {
              return object ? value : {};
            }
            result = initCloneByTag(value, tag, isDeep);
          }
        }
        // Check for circular references and return its corresponding clone.
        stack || (stack = new Stack);
        var stacked = stack.get(value);
        if (stacked) {
          return stacked;
        }
        stack.set(value, result);

        if (isSet(value)) {
          value.forEach(function(subValue) {
            result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
          });

          return result;
        }

        if (isMap(value)) {
          value.forEach(function(subValue, key) {
            result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
          });

          return result;
        }

        var keysFunc = isFull
          ? (isFlat ? getAllKeysIn : getAllKeys)
          : (isFlat ? keysIn : keys);

        var props = isArr ? undefined : keysFunc(value);
        arrayEach(props || value, function(subValue, key) {
          if (props) {
            key = subValue;
            subValue = value[key];
          }
          // Recursively populate clone (susceptible to call stack limits).
          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
        return result;
      }

      /**
       * The base implementation of `_.conforms` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       */
      function baseConforms(source) {
        var props = keys(source);
        return function(object) {
          return baseConformsTo(object, source, props);
        };
      }

      /**
       * The base implementation of `_.conformsTo` which accepts `props` to check.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       */
      function baseConformsTo(object, source, props) {
        var length = props.length;
        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (length--) {
          var key = props[length],
              predicate = source[key],
              value = object[key];

          if ((value === undefined && !(key in object)) || !predicate(value)) {
            return false;
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.delay` and `_.defer` which accepts `args`
       * to provide to `func`.
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {Array} args The arguments to provide to `func`.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      function baseDelay(func, wait, args) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return setTimeout(function() { func.apply(undefined, args); }, wait);
      }

      /**
       * The base implementation of methods like `_.difference` without support
       * for excluding multiple arrays or iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Array} values The values to exclude.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       */
      function baseDifference(array, values, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            isCommon = true,
            length = array.length,
            result = [],
            valuesLength = values.length;

        if (!length) {
          return result;
        }
        if (iteratee) {
          values = arrayMap(values, baseUnary(iteratee));
        }
        if (comparator) {
          includes = arrayIncludesWith;
          isCommon = false;
        }
        else if (values.length >= LARGE_ARRAY_SIZE) {
          includes = cacheHas;
          isCommon = false;
          values = new SetCache(values);
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee == null ? value : iteratee(value);

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var valuesIndex = valuesLength;
            while (valuesIndex--) {
              if (values[valuesIndex] === computed) {
                continue outer;
              }
            }
            result.push(value);
          }
          else if (!includes(values, computed, comparator)) {
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.forEach` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEach = createBaseEach(baseForOwn);

      /**
       * The base implementation of `_.forEachRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       */
      var baseEachRight = createBaseEach(baseForOwnRight, true);

      /**
       * The base implementation of `_.every` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`
       */
      function baseEvery(collection, predicate) {
        var result = true;
        baseEach(collection, function(value, index, collection) {
          result = !!predicate(value, index, collection);
          return result;
        });
        return result;
      }

      /**
       * The base implementation of methods like `_.max` and `_.min` which accepts a
       * `comparator` to determine the extremum value.
       *
       * @private
       * @param {Array} array The array to iterate over.
       * @param {Function} iteratee The iteratee invoked per iteration.
       * @param {Function} comparator The comparator used to compare values.
       * @returns {*} Returns the extremum value.
       */
      function baseExtremum(array, iteratee, comparator) {
        var index = -1,
            length = array.length;

        while (++index < length) {
          var value = array[index],
              current = iteratee(value);

          if (current != null && (computed === undefined
                ? (current === current && !isSymbol(current))
                : comparator(current, computed)
              )) {
            var computed = current,
                result = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.fill` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       */
      function baseFill(array, value, start, end) {
        var length = array.length;

        start = toInteger(start);
        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = (end === undefined || end > length) ? length : toInteger(end);
        if (end < 0) {
          end += length;
        }
        end = start > end ? 0 : toLength(end);
        while (start < end) {
          array[start++] = value;
        }
        return array;
      }

      /**
       * The base implementation of `_.filter` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       */
      function baseFilter(collection, predicate) {
        var result = [];
        baseEach(collection, function(value, index, collection) {
          if (predicate(value, index, collection)) {
            result.push(value);
          }
        });
        return result;
      }

      /**
       * The base implementation of `_.flatten` with support for restricting flattening.
       *
       * @private
       * @param {Array} array The array to flatten.
       * @param {number} depth The maximum recursion depth.
       * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
       * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
       * @param {Array} [result=[]] The initial result value.
       * @returns {Array} Returns the new flattened array.
       */
      function baseFlatten(array, depth, predicate, isStrict, result) {
        var index = -1,
            length = array.length;

        predicate || (predicate = isFlattenable);
        result || (result = []);

        while (++index < length) {
          var value = array[index];
          if (depth > 0 && predicate(value)) {
            if (depth > 1) {
              // Recursively flatten arrays (susceptible to call stack limits).
              baseFlatten(value, depth - 1, predicate, isStrict, result);
            } else {
              arrayPush(result, value);
            }
          } else if (!isStrict) {
            result[result.length] = value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `baseForOwn` which iterates over `object`
       * properties returned by `keysFunc` and invokes `iteratee` for each property.
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseFor = createBaseFor();

      /**
       * This function is like `baseFor` except that it iterates over properties
       * in the opposite order.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @returns {Object} Returns `object`.
       */
      var baseForRight = createBaseFor(true);

      /**
       * The base implementation of `_.forOwn` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwn(object, iteratee) {
        return object && baseFor(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Object} Returns `object`.
       */
      function baseForOwnRight(object, iteratee) {
        return object && baseForRight(object, iteratee, keys);
      }

      /**
       * The base implementation of `_.functions` which creates an array of
       * `object` function property names filtered from `props`.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Array} props The property names to filter.
       * @returns {Array} Returns the function names.
       */
      function baseFunctions(object, props) {
        return arrayFilter(props, function(key) {
          return isFunction(object[key]);
        });
      }

      /**
       * The base implementation of `_.get` without support for default values.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @returns {*} Returns the resolved value.
       */
      function baseGet(object, path) {
        path = castPath(path, object);

        var index = 0,
            length = path.length;

        while (object != null && index < length) {
          object = object[toKey(path[index++])];
        }
        return (index && index == length) ? object : undefined;
      }

      /**
       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Function} keysFunc The function to get the keys of `object`.
       * @param {Function} symbolsFunc The function to get the symbols of `object`.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
        var result = keysFunc(object);
        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
      }

      /**
       * The base implementation of `getTag` without fallbacks for buggy environments.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      function baseGetTag(value) {
        if (value == null) {
          return value === undefined ? undefinedTag : nullTag;
        }
        return (symToStringTag && symToStringTag in Object(value))
          ? getRawTag(value)
          : objectToString(value);
      }

      /**
       * The base implementation of `_.gt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       */
      function baseGt(value, other) {
        return value > other;
      }

      /**
       * The base implementation of `_.has` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHas(object, key) {
        return object != null && hasOwnProperty.call(object, key);
      }

      /**
       * The base implementation of `_.hasIn` without support for deep paths.
       *
       * @private
       * @param {Object} [object] The object to query.
       * @param {Array|string} key The key to check.
       * @returns {boolean} Returns `true` if `key` exists, else `false`.
       */
      function baseHasIn(object, key) {
        return object != null && key in Object(object);
      }

      /**
       * The base implementation of `_.inRange` which doesn't coerce arguments.
       *
       * @private
       * @param {number} number The number to check.
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       */
      function baseInRange(number, start, end) {
        return number >= nativeMin(start, end) && number < nativeMax(start, end);
      }

      /**
       * The base implementation of methods like `_.intersection`, without support
       * for iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of shared values.
       */
      function baseIntersection(arrays, iteratee, comparator) {
        var includes = comparator ? arrayIncludesWith : arrayIncludes,
            length = arrays[0].length,
            othLength = arrays.length,
            othIndex = othLength,
            caches = Array(othLength),
            maxLength = Infinity,
            result = [];

        while (othIndex--) {
          var array = arrays[othIndex];
          if (othIndex && iteratee) {
            array = arrayMap(array, baseUnary(iteratee));
          }
          maxLength = nativeMin(array.length, maxLength);
          caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
            ? new SetCache(othIndex && array)
            : undefined;
        }
        array = arrays[0];

        var index = -1,
            seen = caches[0];

        outer:
        while (++index < length && result.length < maxLength) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (!(seen
                ? cacheHas(seen, computed)
                : includes(result, computed, comparator)
              )) {
            othIndex = othLength;
            while (--othIndex) {
              var cache = caches[othIndex];
              if (!(cache
                    ? cacheHas(cache, computed)
                    : includes(arrays[othIndex], computed, comparator))
                  ) {
                continue outer;
              }
            }
            if (seen) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.invert` and `_.invertBy` which inverts
       * `object` with values transformed by `iteratee` and set by `setter`.
       *
       * @private
       * @param {Object} object The object to iterate over.
       * @param {Function} setter The function to set `accumulator` values.
       * @param {Function} iteratee The iteratee to transform values.
       * @param {Object} accumulator The initial inverted object.
       * @returns {Function} Returns `accumulator`.
       */
      function baseInverter(object, setter, iteratee, accumulator) {
        baseForOwn(object, function(value, key, object) {
          setter(accumulator, iteratee(value), key, object);
        });
        return accumulator;
      }

      /**
       * The base implementation of `_.invoke` without support for individual
       * method arguments.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {Array} args The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       */
      function baseInvoke(object, path, args) {
        path = castPath(path, object);
        object = parent(object, path);
        var func = object == null ? object : object[toKey(last(path))];
        return func == null ? undefined : apply(func, object, args);
      }

      /**
       * The base implementation of `_.isArguments`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       */
      function baseIsArguments(value) {
        return isObjectLike(value) && baseGetTag(value) == argsTag;
      }

      /**
       * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       */
      function baseIsArrayBuffer(value) {
        return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
      }

      /**
       * The base implementation of `_.isDate` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       */
      function baseIsDate(value) {
        return isObjectLike(value) && baseGetTag(value) == dateTag;
      }

      /**
       * The base implementation of `_.isEqual` which supports partial comparisons
       * and tracks traversed objects.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {boolean} bitmask The bitmask flags.
       *  1 - Unordered comparison
       *  2 - Partial comparison
       * @param {Function} [customizer] The function to customize comparisons.
       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       */
      function baseIsEqual(value, other, bitmask, customizer, stack) {
        if (value === other) {
          return true;
        }
        if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
          return value !== value && other !== other;
        }
        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
      }

      /**
       * A specialized version of `baseIsEqual` for arrays and objects which performs
       * deep comparisons and tracks traversed objects enabling objects with circular
       * references to be compared.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
        var objIsArr = isArray(object),
            othIsArr = isArray(other),
            objTag = objIsArr ? arrayTag : getTag(object),
            othTag = othIsArr ? arrayTag : getTag(other);

        objTag = objTag == argsTag ? objectTag : objTag;
        othTag = othTag == argsTag ? objectTag : othTag;

        var objIsObj = objTag == objectTag,
            othIsObj = othTag == objectTag,
            isSameTag = objTag == othTag;

        if (isSameTag && isBuffer(object)) {
          if (!isBuffer(other)) {
            return false;
          }
          objIsArr = true;
          objIsObj = false;
        }
        if (isSameTag && !objIsObj) {
          stack || (stack = new Stack);
          return (objIsArr || isTypedArray(object))
            ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
            : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
        }
        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

          if (objIsWrapped || othIsWrapped) {
            var objUnwrapped = objIsWrapped ? object.value() : object,
                othUnwrapped = othIsWrapped ? other.value() : other;

            stack || (stack = new Stack);
            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
          }
        }
        if (!isSameTag) {
          return false;
        }
        stack || (stack = new Stack);
        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
      }

      /**
       * The base implementation of `_.isMap` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       */
      function baseIsMap(value) {
        return isObjectLike(value) && getTag(value) == mapTag;
      }

      /**
       * The base implementation of `_.isMatch` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Array} matchData The property names, values, and compare flags to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       */
      function baseIsMatch(object, source, matchData, customizer) {
        var index = matchData.length,
            length = index,
            noCustomizer = !customizer;

        if (object == null) {
          return !length;
        }
        object = Object(object);
        while (index--) {
          var data = matchData[index];
          if ((noCustomizer && data[2])
                ? data[1] !== object[data[0]]
                : !(data[0] in object)
              ) {
            return false;
          }
        }
        while (++index < length) {
          data = matchData[index];
          var key = data[0],
              objValue = object[key],
              srcValue = data[1];

          if (noCustomizer && data[2]) {
            if (objValue === undefined && !(key in object)) {
              return false;
            }
          } else {
            var stack = new Stack;
            if (customizer) {
              var result = customizer(objValue, srcValue, key, object, source, stack);
            }
            if (!(result === undefined
                  ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                  : result
                )) {
              return false;
            }
          }
        }
        return true;
      }

      /**
       * The base implementation of `_.isNative` without bad shim checks.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       */
      function baseIsNative(value) {
        if (!isObject(value) || isMasked(value)) {
          return false;
        }
        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
        return pattern.test(toSource(value));
      }

      /**
       * The base implementation of `_.isRegExp` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       */
      function baseIsRegExp(value) {
        return isObjectLike(value) && baseGetTag(value) == regexpTag;
      }

      /**
       * The base implementation of `_.isSet` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       */
      function baseIsSet(value) {
        return isObjectLike(value) && getTag(value) == setTag;
      }

      /**
       * The base implementation of `_.isTypedArray` without Node.js optimizations.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       */
      function baseIsTypedArray(value) {
        return isObjectLike(value) &&
          isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
      }

      /**
       * The base implementation of `_.iteratee`.
       *
       * @private
       * @param {*} [value=_.identity] The value to convert to an iteratee.
       * @returns {Function} Returns the iteratee.
       */
      function baseIteratee(value) {
        // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
        // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
        if (typeof value == 'function') {
          return value;
        }
        if (value == null) {
          return identity;
        }
        if (typeof value == 'object') {
          return isArray(value)
            ? baseMatchesProperty(value[0], value[1])
            : baseMatches(value);
        }
        return property(value);
      }

      /**
       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeys(object) {
        if (!isPrototype(object)) {
          return nativeKeys(object);
        }
        var result = [];
        for (var key in Object(object)) {
          if (hasOwnProperty.call(object, key) && key != 'constructor') {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function baseKeysIn(object) {
        if (!isObject(object)) {
          return nativeKeysIn(object);
        }
        var isProto = isPrototype(object),
            result = [];

        for (var key in object) {
          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.lt` which doesn't coerce arguments.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       */
      function baseLt(value, other) {
        return value < other;
      }

      /**
       * The base implementation of `_.map` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} iteratee The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       */
      function baseMap(collection, iteratee) {
        var index = -1,
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value, key, collection) {
          result[++index] = iteratee(value, key, collection);
        });
        return result;
      }

      /**
       * The base implementation of `_.matches` which doesn't clone `source`.
       *
       * @private
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatches(source) {
        var matchData = getMatchData(source);
        if (matchData.length == 1 && matchData[0][2]) {
          return matchesStrictComparable(matchData[0][0], matchData[0][1]);
        }
        return function(object) {
          return object === source || baseIsMatch(object, source, matchData);
        };
      }

      /**
       * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
       *
       * @private
       * @param {string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function baseMatchesProperty(path, srcValue) {
        if (isKey(path) && isStrictComparable(srcValue)) {
          return matchesStrictComparable(toKey(path), srcValue);
        }
        return function(object) {
          var objValue = get(object, path);
          return (objValue === undefined && objValue === srcValue)
            ? hasIn(object, path)
            : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
        };
      }

      /**
       * The base implementation of `_.merge` without support for multiple sources.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} [customizer] The function to customize merged values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMerge(object, source, srcIndex, customizer, stack) {
        if (object === source) {
          return;
        }
        baseFor(source, function(srcValue, key) {
          if (isObject(srcValue)) {
            stack || (stack = new Stack);
            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
          }
          else {
            var newValue = customizer
              ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
              : undefined;

            if (newValue === undefined) {
              newValue = srcValue;
            }
            assignMergeValue(object, key, newValue);
          }
        }, keysIn);
      }

      /**
       * A specialized version of `baseMerge` for arrays and objects which performs
       * deep merges and tracks traversed objects enabling objects with circular
       * references to be merged.
       *
       * @private
       * @param {Object} object The destination object.
       * @param {Object} source The source object.
       * @param {string} key The key of the value to merge.
       * @param {number} srcIndex The index of `source`.
       * @param {Function} mergeFunc The function to merge values.
       * @param {Function} [customizer] The function to customize assigned values.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       */
      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
        var objValue = safeGet(object, key),
            srcValue = safeGet(source, key),
            stacked = stack.get(srcValue);

        if (stacked) {
          assignMergeValue(object, key, stacked);
          return;
        }
        var newValue = customizer
          ? customizer(objValue, srcValue, (key + ''), object, source, stack)
          : undefined;

        var isCommon = newValue === undefined;

        if (isCommon) {
          var isArr = isArray(srcValue),
              isBuff = !isArr && isBuffer(srcValue),
              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

          newValue = srcValue;
          if (isArr || isBuff || isTyped) {
            if (isArray(objValue)) {
              newValue = objValue;
            }
            else if (isArrayLikeObject(objValue)) {
              newValue = copyArray(objValue);
            }
            else if (isBuff) {
              isCommon = false;
              newValue = cloneBuffer(srcValue, true);
            }
            else if (isTyped) {
              isCommon = false;
              newValue = cloneTypedArray(srcValue, true);
            }
            else {
              newValue = [];
            }
          }
          else if (isPlainObject(srcValue) || isArguments(srcValue)) {
            newValue = objValue;
            if (isArguments(objValue)) {
              newValue = toPlainObject(objValue);
            }
            else if (!isObject(objValue) || isFunction(objValue)) {
              newValue = initCloneObject(srcValue);
            }
          }
          else {
            isCommon = false;
          }
        }
        if (isCommon) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, newValue);
          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
          stack['delete'](srcValue);
        }
        assignMergeValue(object, key, newValue);
      }

      /**
       * The base implementation of `_.nth` which doesn't coerce arguments.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {number} n The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       */
      function baseNth(array, n) {
        var length = array.length;
        if (!length) {
          return;
        }
        n += n < 0 ? length : 0;
        return isIndex(n, length) ? array[n] : undefined;
      }

      /**
       * The base implementation of `_.orderBy` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
       * @param {string[]} orders The sort orders of `iteratees`.
       * @returns {Array} Returns the new sorted array.
       */
      function baseOrderBy(collection, iteratees, orders) {
        var index = -1;
        iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

        var result = baseMap(collection, function(value, key, collection) {
          var criteria = arrayMap(iteratees, function(iteratee) {
            return iteratee(value);
          });
          return { 'criteria': criteria, 'index': ++index, 'value': value };
        });

        return baseSortBy(result, function(object, other) {
          return compareMultiple(object, other, orders);
        });
      }

      /**
       * The base implementation of `_.pick` without support for individual
       * property identifiers.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @returns {Object} Returns the new object.
       */
      function basePick(object, paths) {
        return basePickBy(object, paths, function(value, path) {
          return hasIn(object, path);
        });
      }

      /**
       * The base implementation of  `_.pickBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Object} object The source object.
       * @param {string[]} paths The property paths to pick.
       * @param {Function} predicate The function invoked per property.
       * @returns {Object} Returns the new object.
       */
      function basePickBy(object, paths, predicate) {
        var index = -1,
            length = paths.length,
            result = {};

        while (++index < length) {
          var path = paths[index],
              value = baseGet(object, path);

          if (predicate(value, path)) {
            baseSet(result, castPath(path, object), value);
          }
        }
        return result;
      }

      /**
       * A specialized version of `baseProperty` which supports deep paths.
       *
       * @private
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       */
      function basePropertyDeep(path) {
        return function(object) {
          return baseGet(object, path);
        };
      }

      /**
       * The base implementation of `_.pullAllBy` without support for iteratee
       * shorthands.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       */
      function basePullAll(array, values, iteratee, comparator) {
        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
            index = -1,
            length = values.length,
            seen = array;

        if (array === values) {
          values = copyArray(values);
        }
        if (iteratee) {
          seen = arrayMap(array, baseUnary(iteratee));
        }
        while (++index < length) {
          var fromIndex = 0,
              value = values[index],
              computed = iteratee ? iteratee(value) : value;

          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
            if (seen !== array) {
              splice.call(seen, fromIndex, 1);
            }
            splice.call(array, fromIndex, 1);
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.pullAt` without support for individual
       * indexes or capturing the removed elements.
       *
       * @private
       * @param {Array} array The array to modify.
       * @param {number[]} indexes The indexes of elements to remove.
       * @returns {Array} Returns `array`.
       */
      function basePullAt(array, indexes) {
        var length = array ? indexes.length : 0,
            lastIndex = length - 1;

        while (length--) {
          var index = indexes[length];
          if (length == lastIndex || index !== previous) {
            var previous = index;
            if (isIndex(index)) {
              splice.call(array, index, 1);
            } else {
              baseUnset(array, index);
            }
          }
        }
        return array;
      }

      /**
       * The base implementation of `_.random` without support for returning
       * floating-point numbers.
       *
       * @private
       * @param {number} lower The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the random number.
       */
      function baseRandom(lower, upper) {
        return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
      }

      /**
       * The base implementation of `_.range` and `_.rangeRight` which doesn't
       * coerce arguments.
       *
       * @private
       * @param {number} start The start of the range.
       * @param {number} end The end of the range.
       * @param {number} step The value to increment or decrement by.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the range of numbers.
       */
      function baseRange(start, end, step, fromRight) {
        var index = -1,
            length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
            result = Array(length);

        while (length--) {
          result[fromRight ? length : ++index] = start;
          start += step;
        }
        return result;
      }

      /**
       * The base implementation of `_.repeat` which doesn't coerce arguments.
       *
       * @private
       * @param {string} string The string to repeat.
       * @param {number} n The number of times to repeat the string.
       * @returns {string} Returns the repeated string.
       */
      function baseRepeat(string, n) {
        var result = '';
        if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
          return result;
        }
        // Leverage the exponentiation by squaring algorithm for a faster repeat.
        // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
        do {
          if (n % 2) {
            result += string;
          }
          n = nativeFloor(n / 2);
          if (n) {
            string += string;
          }
        } while (n);

        return result;
      }

      /**
       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       */
      function baseRest(func, start) {
        return setToString(overRest(func, start, identity), func + '');
      }

      /**
       * The base implementation of `_.sample`.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       */
      function baseSample(collection) {
        return arraySample(values(collection));
      }

      /**
       * The base implementation of `_.sampleSize` without param guards.
       *
       * @private
       * @param {Array|Object} collection The collection to sample.
       * @param {number} n The number of elements to sample.
       * @returns {Array} Returns the random elements.
       */
      function baseSampleSize(collection, n) {
        var array = values(collection);
        return shuffleSelf(array, baseClamp(n, 0, array.length));
      }

      /**
       * The base implementation of `_.set`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseSet(object, path, value, customizer) {
        if (!isObject(object)) {
          return object;
        }
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            lastIndex = length - 1,
            nested = object;

        while (nested != null && ++index < length) {
          var key = toKey(path[index]),
              newValue = value;

          if (index != lastIndex) {
            var objValue = nested[key];
            newValue = customizer ? customizer(objValue, key, nested) : undefined;
            if (newValue === undefined) {
              newValue = isObject(objValue)
                ? objValue
                : (isIndex(path[index + 1]) ? [] : {});
            }
          }
          assignValue(nested, key, newValue);
          nested = nested[key];
        }
        return object;
      }

      /**
       * The base implementation of `setData` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var baseSetData = !metaMap ? identity : function(func, data) {
        metaMap.set(func, data);
        return func;
      };

      /**
       * The base implementation of `setToString` without support for hot loop shorting.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var baseSetToString = !defineProperty ? identity : function(func, string) {
        return defineProperty(func, 'toString', {
          'configurable': true,
          'enumerable': false,
          'value': constant(string),
          'writable': true
        });
      };

      /**
       * The base implementation of `_.shuffle`.
       *
       * @private
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       */
      function baseShuffle(collection) {
        return shuffleSelf(values(collection));
      }

      /**
       * The base implementation of `_.slice` without an iteratee call guard.
       *
       * @private
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseSlice(array, start, end) {
        var index = -1,
            length = array.length;

        if (start < 0) {
          start = -start > length ? 0 : (length + start);
        }
        end = end > length ? length : end;
        if (end < 0) {
          end += length;
        }
        length = start > end ? 0 : ((end - start) >>> 0);
        start >>>= 0;

        var result = Array(length);
        while (++index < length) {
          result[index] = array[index + start];
        }
        return result;
      }

      /**
       * The base implementation of `_.some` without support for iteratee shorthands.
       *
       * @private
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} predicate The function invoked per iteration.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       */
      function baseSome(collection, predicate) {
        var result;

        baseEach(collection, function(value, index, collection) {
          result = predicate(value, index, collection);
          return !result;
        });
        return !!result;
      }

      /**
       * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
       * performs a binary search of `array` to determine the index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndex(array, value, retHighest) {
        var low = 0,
            high = array == null ? low : array.length;

        if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
          while (low < high) {
            var mid = (low + high) >>> 1,
                computed = array[mid];

            if (computed !== null && !isSymbol(computed) &&
                (retHighest ? (computed <= value) : (computed < value))) {
              low = mid + 1;
            } else {
              high = mid;
            }
          }
          return high;
        }
        return baseSortedIndexBy(array, value, identity, retHighest);
      }

      /**
       * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
       * which invokes `iteratee` for `value` and each element of `array` to compute
       * their sort ranking. The iteratee is invoked with one argument; (value).
       *
       * @private
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} iteratee The iteratee invoked per element.
       * @param {boolean} [retHighest] Specify returning the highest qualified index.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       */
      function baseSortedIndexBy(array, value, iteratee, retHighest) {
        value = iteratee(value);

        var low = 0,
            high = array == null ? 0 : array.length,
            valIsNaN = value !== value,
            valIsNull = value === null,
            valIsSymbol = isSymbol(value),
            valIsUndefined = value === undefined;

        while (low < high) {
          var mid = nativeFloor((low + high) / 2),
              computed = iteratee(array[mid]),
              othIsDefined = computed !== undefined,
              othIsNull = computed === null,
              othIsReflexive = computed === computed,
              othIsSymbol = isSymbol(computed);

          if (valIsNaN) {
            var setLow = retHighest || othIsReflexive;
          } else if (valIsUndefined) {
            setLow = othIsReflexive && (retHighest || othIsDefined);
          } else if (valIsNull) {
            setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
          } else if (valIsSymbol) {
            setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
          } else if (othIsNull || othIsSymbol) {
            setLow = false;
          } else {
            setLow = retHighest ? (computed <= value) : (computed < value);
          }
          if (setLow) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return nativeMin(high, MAX_ARRAY_INDEX);
      }

      /**
       * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
       * support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseSortedUniq(array, iteratee) {
        var index = -1,
            length = array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          if (!index || !eq(computed, seen)) {
            var seen = computed;
            result[resIndex++] = value === 0 ? 0 : value;
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.toNumber` which doesn't ensure correct
       * conversions of binary, hexadecimal, or octal string values.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       */
      function baseToNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        return +value;
      }

      /**
       * The base implementation of `_.toString` which doesn't convert nullish
       * values to empty strings.
       *
       * @private
       * @param {*} value The value to process.
       * @returns {string} Returns the string.
       */
      function baseToString(value) {
        // Exit early for strings to avoid a performance hit in some environments.
        if (typeof value == 'string') {
          return value;
        }
        if (isArray(value)) {
          // Recursively convert values (susceptible to call stack limits).
          return arrayMap(value, baseToString) + '';
        }
        if (isSymbol(value)) {
          return symbolToString ? symbolToString.call(value) : '';
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * The base implementation of `_.uniqBy` without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       */
      function baseUniq(array, iteratee, comparator) {
        var index = -1,
            includes = arrayIncludes,
            length = array.length,
            isCommon = true,
            result = [],
            seen = result;

        if (comparator) {
          isCommon = false;
          includes = arrayIncludesWith;
        }
        else if (length >= LARGE_ARRAY_SIZE) {
          var set = iteratee ? null : createSet(array);
          if (set) {
            return setToArray(set);
          }
          isCommon = false;
          includes = cacheHas;
          seen = new SetCache;
        }
        else {
          seen = iteratee ? [] : result;
        }
        outer:
        while (++index < length) {
          var value = array[index],
              computed = iteratee ? iteratee(value) : value;

          value = (comparator || value !== 0) ? value : 0;
          if (isCommon && computed === computed) {
            var seenIndex = seen.length;
            while (seenIndex--) {
              if (seen[seenIndex] === computed) {
                continue outer;
              }
            }
            if (iteratee) {
              seen.push(computed);
            }
            result.push(value);
          }
          else if (!includes(seen, computed, comparator)) {
            if (seen !== result) {
              seen.push(computed);
            }
            result.push(value);
          }
        }
        return result;
      }

      /**
       * The base implementation of `_.unset`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The property path to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       */
      function baseUnset(object, path) {
        path = castPath(path, object);
        object = parent(object, path);
        return object == null || delete object[toKey(last(path))];
      }

      /**
       * The base implementation of `_.update`.
       *
       * @private
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to update.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize path creation.
       * @returns {Object} Returns `object`.
       */
      function baseUpdate(object, path, updater, customizer) {
        return baseSet(object, path, updater(baseGet(object, path)), customizer);
      }

      /**
       * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
       * without support for iteratee shorthands.
       *
       * @private
       * @param {Array} array The array to query.
       * @param {Function} predicate The function invoked per iteration.
       * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Array} Returns the slice of `array`.
       */
      function baseWhile(array, predicate, isDrop, fromRight) {
        var length = array.length,
            index = fromRight ? length : -1;

        while ((fromRight ? index-- : ++index < length) &&
          predicate(array[index], index, array)) {}

        return isDrop
          ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
          : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
      }

      /**
       * The base implementation of `wrapperValue` which returns the result of
       * performing a sequence of actions on the unwrapped `value`, where each
       * successive action is supplied the return value of the previous.
       *
       * @private
       * @param {*} value The unwrapped value.
       * @param {Array} actions Actions to perform to resolve the unwrapped value.
       * @returns {*} Returns the resolved value.
       */
      function baseWrapperValue(value, actions) {
        var result = value;
        if (result instanceof LazyWrapper) {
          result = result.value();
        }
        return arrayReduce(actions, function(result, action) {
          return action.func.apply(action.thisArg, arrayPush([result], action.args));
        }, result);
      }

      /**
       * The base implementation of methods like `_.xor`, without support for
       * iteratee shorthands, that accepts an array of arrays to inspect.
       *
       * @private
       * @param {Array} arrays The arrays to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of values.
       */
      function baseXor(arrays, iteratee, comparator) {
        var length = arrays.length;
        if (length < 2) {
          return length ? baseUniq(arrays[0]) : [];
        }
        var index = -1,
            result = Array(length);

        while (++index < length) {
          var array = arrays[index],
              othIndex = -1;

          while (++othIndex < length) {
            if (othIndex != index) {
              result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
            }
          }
        }
        return baseUniq(baseFlatten(result, 1), iteratee, comparator);
      }

      /**
       * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
       *
       * @private
       * @param {Array} props The property identifiers.
       * @param {Array} values The property values.
       * @param {Function} assignFunc The function to assign values.
       * @returns {Object} Returns the new object.
       */
      function baseZipObject(props, values, assignFunc) {
        var index = -1,
            length = props.length,
            valsLength = values.length,
            result = {};

        while (++index < length) {
          var value = index < valsLength ? values[index] : undefined;
          assignFunc(result, props[index], value);
        }
        return result;
      }

      /**
       * Casts `value` to an empty array if it's not an array like object.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Array|Object} Returns the cast array-like object.
       */
      function castArrayLikeObject(value) {
        return isArrayLikeObject(value) ? value : [];
      }

      /**
       * Casts `value` to `identity` if it's not a function.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {Function} Returns cast function.
       */
      function castFunction(value) {
        return typeof value == 'function' ? value : identity;
      }

      /**
       * Casts `value` to a path array if it's not one.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {Object} [object] The object to query keys on.
       * @returns {Array} Returns the cast property path array.
       */
      function castPath(value, object) {
        if (isArray(value)) {
          return value;
        }
        return isKey(value, object) ? [value] : stringToPath(toString(value));
      }

      /**
       * A `baseRest` alias which can be replaced with `identity` by module
       * replacement plugins.
       *
       * @private
       * @type {Function}
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      var castRest = baseRest;

      /**
       * Casts `array` to a slice if it's needed.
       *
       * @private
       * @param {Array} array The array to inspect.
       * @param {number} start The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the cast slice.
       */
      function castSlice(array, start, end) {
        var length = array.length;
        end = end === undefined ? length : end;
        return (!start && end >= length) ? array : baseSlice(array, start, end);
      }

      /**
       * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
       *
       * @private
       * @param {number|Object} id The timer id or timeout object of the timer to clear.
       */
      var clearTimeout = ctxClearTimeout || function(id) {
        return root.clearTimeout(id);
      };

      /**
       * Creates a clone of  `buffer`.
       *
       * @private
       * @param {Buffer} buffer The buffer to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Buffer} Returns the cloned buffer.
       */
      function cloneBuffer(buffer, isDeep) {
        if (isDeep) {
          return buffer.slice();
        }
        var length = buffer.length,
            result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

        buffer.copy(result);
        return result;
      }

      /**
       * Creates a clone of `arrayBuffer`.
       *
       * @private
       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
       * @returns {ArrayBuffer} Returns the cloned array buffer.
       */
      function cloneArrayBuffer(arrayBuffer) {
        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
        return result;
      }

      /**
       * Creates a clone of `dataView`.
       *
       * @private
       * @param {Object} dataView The data view to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned data view.
       */
      function cloneDataView(dataView, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
      }

      /**
       * Creates a clone of `regexp`.
       *
       * @private
       * @param {Object} regexp The regexp to clone.
       * @returns {Object} Returns the cloned regexp.
       */
      function cloneRegExp(regexp) {
        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
        result.lastIndex = regexp.lastIndex;
        return result;
      }

      /**
       * Creates a clone of the `symbol` object.
       *
       * @private
       * @param {Object} symbol The symbol object to clone.
       * @returns {Object} Returns the cloned symbol object.
       */
      function cloneSymbol(symbol) {
        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
      }

      /**
       * Creates a clone of `typedArray`.
       *
       * @private
       * @param {Object} typedArray The typed array to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the cloned typed array.
       */
      function cloneTypedArray(typedArray, isDeep) {
        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
      }

      /**
       * Compares values to sort them in ascending order.
       *
       * @private
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {number} Returns the sort order indicator for `value`.
       */
      function compareAscending(value, other) {
        if (value !== other) {
          var valIsDefined = value !== undefined,
              valIsNull = value === null,
              valIsReflexive = value === value,
              valIsSymbol = isSymbol(value);

          var othIsDefined = other !== undefined,
              othIsNull = other === null,
              othIsReflexive = other === other,
              othIsSymbol = isSymbol(other);

          if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
              (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
              (valIsNull && othIsDefined && othIsReflexive) ||
              (!valIsDefined && othIsReflexive) ||
              !valIsReflexive) {
            return 1;
          }
          if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
              (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
              (othIsNull && valIsDefined && valIsReflexive) ||
              (!othIsDefined && valIsReflexive) ||
              !othIsReflexive) {
            return -1;
          }
        }
        return 0;
      }

      /**
       * Used by `_.orderBy` to compare multiple properties of a value to another
       * and stable sort them.
       *
       * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
       * specify an order of "desc" for descending or "asc" for ascending sort order
       * of corresponding values.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {boolean[]|string[]} orders The order to sort by for each property.
       * @returns {number} Returns the sort order indicator for `object`.
       */
      function compareMultiple(object, other, orders) {
        var index = -1,
            objCriteria = object.criteria,
            othCriteria = other.criteria,
            length = objCriteria.length,
            ordersLength = orders.length;

        while (++index < length) {
          var result = compareAscending(objCriteria[index], othCriteria[index]);
          if (result) {
            if (index >= ordersLength) {
              return result;
            }
            var order = orders[index];
            return result * (order == 'desc' ? -1 : 1);
          }
        }
        // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
        // that causes it, under certain circumstances, to provide the same value for
        // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
        // for more details.
        //
        // This also ensures a stable sort in V8 and other engines.
        // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
        return object.index - other.index;
      }

      /**
       * Creates an array that is the composition of partially applied arguments,
       * placeholders, and provided arguments into a single array of arguments.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to prepend to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgs(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersLength = holders.length,
            leftIndex = -1,
            leftLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(leftLength + rangeLength),
            isUncurried = !isCurried;

        while (++leftIndex < leftLength) {
          result[leftIndex] = partials[leftIndex];
        }
        while (++argsIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[holders[argsIndex]] = args[argsIndex];
          }
        }
        while (rangeLength--) {
          result[leftIndex++] = args[argsIndex++];
        }
        return result;
      }

      /**
       * This function is like `composeArgs` except that the arguments composition
       * is tailored for `_.partialRight`.
       *
       * @private
       * @param {Array} args The provided arguments.
       * @param {Array} partials The arguments to append to those provided.
       * @param {Array} holders The `partials` placeholder indexes.
       * @params {boolean} [isCurried] Specify composing for a curried function.
       * @returns {Array} Returns the new array of composed arguments.
       */
      function composeArgsRight(args, partials, holders, isCurried) {
        var argsIndex = -1,
            argsLength = args.length,
            holdersIndex = -1,
            holdersLength = holders.length,
            rightIndex = -1,
            rightLength = partials.length,
            rangeLength = nativeMax(argsLength - holdersLength, 0),
            result = Array(rangeLength + rightLength),
            isUncurried = !isCurried;

        while (++argsIndex < rangeLength) {
          result[argsIndex] = args[argsIndex];
        }
        var offset = argsIndex;
        while (++rightIndex < rightLength) {
          result[offset + rightIndex] = partials[rightIndex];
        }
        while (++holdersIndex < holdersLength) {
          if (isUncurried || argsIndex < argsLength) {
            result[offset + holders[holdersIndex]] = args[argsIndex++];
          }
        }
        return result;
      }

      /**
       * Copies the values of `source` to `array`.
       *
       * @private
       * @param {Array} source The array to copy values from.
       * @param {Array} [array=[]] The array to copy values to.
       * @returns {Array} Returns `array`.
       */
      function copyArray(source, array) {
        var index = -1,
            length = source.length;

        array || (array = Array(length));
        while (++index < length) {
          array[index] = source[index];
        }
        return array;
      }

      /**
       * Copies properties of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy properties from.
       * @param {Array} props The property identifiers to copy.
       * @param {Object} [object={}] The object to copy properties to.
       * @param {Function} [customizer] The function to customize copied values.
       * @returns {Object} Returns `object`.
       */
      function copyObject(source, props, object, customizer) {
        var isNew = !object;
        object || (object = {});

        var index = -1,
            length = props.length;

        while (++index < length) {
          var key = props[index];

          var newValue = customizer
            ? customizer(object[key], source[key], key, object, source)
            : undefined;

          if (newValue === undefined) {
            newValue = source[key];
          }
          if (isNew) {
            baseAssignValue(object, key, newValue);
          } else {
            assignValue(object, key, newValue);
          }
        }
        return object;
      }

      /**
       * Copies own symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbols(source, object) {
        return copyObject(source, getSymbols(source), object);
      }

      /**
       * Copies own and inherited symbols of `source` to `object`.
       *
       * @private
       * @param {Object} source The object to copy symbols from.
       * @param {Object} [object={}] The object to copy symbols to.
       * @returns {Object} Returns `object`.
       */
      function copySymbolsIn(source, object) {
        return copyObject(source, getSymbolsIn(source), object);
      }

      /**
       * Creates a function like `_.groupBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} [initializer] The accumulator object initializer.
       * @returns {Function} Returns the new aggregator function.
       */
      function createAggregator(setter, initializer) {
        return function(collection, iteratee) {
          var func = isArray(collection) ? arrayAggregator : baseAggregator,
              accumulator = initializer ? initializer() : {};

          return func(collection, setter, getIteratee(iteratee, 2), accumulator);
        };
      }

      /**
       * Creates a function like `_.assign`.
       *
       * @private
       * @param {Function} assigner The function to assign values.
       * @returns {Function} Returns the new assigner function.
       */
      function createAssigner(assigner) {
        return baseRest(function(object, sources) {
          var index = -1,
              length = sources.length,
              customizer = length > 1 ? sources[length - 1] : undefined,
              guard = length > 2 ? sources[2] : undefined;

          customizer = (assigner.length > 3 && typeof customizer == 'function')
            ? (length--, customizer)
            : undefined;

          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
            customizer = length < 3 ? undefined : customizer;
            length = 1;
          }
          object = Object(object);
          while (++index < length) {
            var source = sources[index];
            if (source) {
              assigner(object, source, index, customizer);
            }
          }
          return object;
        });
      }

      /**
       * Creates a `baseEach` or `baseEachRight` function.
       *
       * @private
       * @param {Function} eachFunc The function to iterate over a collection.
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseEach(eachFunc, fromRight) {
        return function(collection, iteratee) {
          if (collection == null) {
            return collection;
          }
          if (!isArrayLike(collection)) {
            return eachFunc(collection, iteratee);
          }
          var length = collection.length,
              index = fromRight ? length : -1,
              iterable = Object(collection);

          while ((fromRight ? index-- : ++index < length)) {
            if (iteratee(iterable[index], index, iterable) === false) {
              break;
            }
          }
          return collection;
        };
      }

      /**
       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new base function.
       */
      function createBaseFor(fromRight) {
        return function(object, iteratee, keysFunc) {
          var index = -1,
              iterable = Object(object),
              props = keysFunc(object),
              length = props.length;

          while (length--) {
            var key = props[fromRight ? length : ++index];
            if (iteratee(iterable[key], key, iterable) === false) {
              break;
            }
          }
          return object;
        };
      }

      /**
       * Creates a function that wraps `func` to invoke it with the optional `this`
       * binding of `thisArg`.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createBind(func, bitmask, thisArg) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return fn.apply(isBind ? thisArg : this, arguments);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.lowerFirst`.
       *
       * @private
       * @param {string} methodName The name of the `String` case method to use.
       * @returns {Function} Returns the new case function.
       */
      function createCaseFirst(methodName) {
        return function(string) {
          string = toString(string);

          var strSymbols = hasUnicode(string)
            ? stringToArray(string)
            : undefined;

          var chr = strSymbols
            ? strSymbols[0]
            : string.charAt(0);

          var trailing = strSymbols
            ? castSlice(strSymbols, 1).join('')
            : string.slice(1);

          return chr[methodName]() + trailing;
        };
      }

      /**
       * Creates a function like `_.camelCase`.
       *
       * @private
       * @param {Function} callback The function to combine each word.
       * @returns {Function} Returns the new compounder function.
       */
      function createCompounder(callback) {
        return function(string) {
          return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
        };
      }

      /**
       * Creates a function that produces an instance of `Ctor` regardless of
       * whether it was invoked as part of a `new` expression or by `call` or `apply`.
       *
       * @private
       * @param {Function} Ctor The constructor to wrap.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCtor(Ctor) {
        return function() {
          // Use a `switch` statement to work with class constructors. See
          // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
          // for more details.
          var args = arguments;
          switch (args.length) {
            case 0: return new Ctor;
            case 1: return new Ctor(args[0]);
            case 2: return new Ctor(args[0], args[1]);
            case 3: return new Ctor(args[0], args[1], args[2]);
            case 4: return new Ctor(args[0], args[1], args[2], args[3]);
            case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
            case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
            case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
          }
          var thisBinding = baseCreate(Ctor.prototype),
              result = Ctor.apply(thisBinding, args);

          // Mimic the constructor's `return` behavior.
          // See https://es5.github.io/#x13.2.2 for more details.
          return isObject(result) ? result : thisBinding;
        };
      }

      /**
       * Creates a function that wraps `func` to enable currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {number} arity The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createCurry(func, bitmask, arity) {
        var Ctor = createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length,
              placeholder = getHolder(wrapper);

          while (index--) {
            args[index] = arguments[index];
          }
          var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
            ? []
            : replaceHolders(args, placeholder);

          length -= holders.length;
          if (length < arity) {
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, undefined,
              args, holders, undefined, undefined, arity - length);
          }
          var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
          return apply(fn, this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.find` or `_.findLast` function.
       *
       * @private
       * @param {Function} findIndexFunc The function to find the collection index.
       * @returns {Function} Returns the new find function.
       */
      function createFind(findIndexFunc) {
        return function(collection, predicate, fromIndex) {
          var iterable = Object(collection);
          if (!isArrayLike(collection)) {
            var iteratee = getIteratee(predicate, 3);
            collection = keys(collection);
            predicate = function(key) { return iteratee(iterable[key], key, iterable); };
          }
          var index = findIndexFunc(collection, predicate, fromIndex);
          return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
        };
      }

      /**
       * Creates a `_.flow` or `_.flowRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new flow function.
       */
      function createFlow(fromRight) {
        return flatRest(function(funcs) {
          var length = funcs.length,
              index = length,
              prereq = LodashWrapper.prototype.thru;

          if (fromRight) {
            funcs.reverse();
          }
          while (index--) {
            var func = funcs[index];
            if (typeof func != 'function') {
              throw new TypeError(FUNC_ERROR_TEXT);
            }
            if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
              var wrapper = new LodashWrapper([], true);
            }
          }
          index = wrapper ? index : length;
          while (++index < length) {
            func = funcs[index];

            var funcName = getFuncName(func),
                data = funcName == 'wrapper' ? getData(func) : undefined;

            if (data && isLaziable(data[0]) &&
                  data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                  !data[4].length && data[9] == 1
                ) {
              wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
            } else {
              wrapper = (func.length == 1 && isLaziable(func))
                ? wrapper[funcName]()
                : wrapper.thru(func);
            }
          }
          return function() {
            var args = arguments,
                value = args[0];

            if (wrapper && args.length == 1 && isArray(value)) {
              return wrapper.plant(value).value();
            }
            var index = 0,
                result = length ? funcs[index].apply(this, args) : value;

            while (++index < length) {
              result = funcs[index].call(this, result);
            }
            return result;
          };
        });
      }

      /**
       * Creates a function that wraps `func` to invoke it with optional `this`
       * binding of `thisArg`, partial application, and currying.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [partialsRight] The arguments to append to those provided
       *  to the new function.
       * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
        var isAry = bitmask & WRAP_ARY_FLAG,
            isBind = bitmask & WRAP_BIND_FLAG,
            isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
            isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
            isFlip = bitmask & WRAP_FLIP_FLAG,
            Ctor = isBindKey ? undefined : createCtor(func);

        function wrapper() {
          var length = arguments.length,
              args = Array(length),
              index = length;

          while (index--) {
            args[index] = arguments[index];
          }
          if (isCurried) {
            var placeholder = getHolder(wrapper),
                holdersCount = countHolders(args, placeholder);
          }
          if (partials) {
            args = composeArgs(args, partials, holders, isCurried);
          }
          if (partialsRight) {
            args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
          }
          length -= holdersCount;
          if (isCurried && length < arity) {
            var newHolders = replaceHolders(args, placeholder);
            return createRecurry(
              func, bitmask, createHybrid, wrapper.placeholder, thisArg,
              args, newHolders, argPos, ary, arity - length
            );
          }
          var thisBinding = isBind ? thisArg : this,
              fn = isBindKey ? thisBinding[func] : func;

          length = args.length;
          if (argPos) {
            args = reorder(args, argPos);
          } else if (isFlip && length > 1) {
            args.reverse();
          }
          if (isAry && ary < length) {
            args.length = ary;
          }
          if (this && this !== root && this instanceof wrapper) {
            fn = Ctor || createCtor(fn);
          }
          return fn.apply(thisBinding, args);
        }
        return wrapper;
      }

      /**
       * Creates a function like `_.invertBy`.
       *
       * @private
       * @param {Function} setter The function to set accumulator values.
       * @param {Function} toIteratee The function to resolve iteratees.
       * @returns {Function} Returns the new inverter function.
       */
      function createInverter(setter, toIteratee) {
        return function(object, iteratee) {
          return baseInverter(object, setter, toIteratee(iteratee), {});
        };
      }

      /**
       * Creates a function that performs a mathematical operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @param {number} [defaultValue] The value used for `undefined` arguments.
       * @returns {Function} Returns the new mathematical operation function.
       */
      function createMathOperation(operator, defaultValue) {
        return function(value, other) {
          var result;
          if (value === undefined && other === undefined) {
            return defaultValue;
          }
          if (value !== undefined) {
            result = value;
          }
          if (other !== undefined) {
            if (result === undefined) {
              return other;
            }
            if (typeof value == 'string' || typeof other == 'string') {
              value = baseToString(value);
              other = baseToString(other);
            } else {
              value = baseToNumber(value);
              other = baseToNumber(other);
            }
            result = operator(value, other);
          }
          return result;
        };
      }

      /**
       * Creates a function like `_.over`.
       *
       * @private
       * @param {Function} arrayFunc The function to iterate over iteratees.
       * @returns {Function} Returns the new over function.
       */
      function createOver(arrayFunc) {
        return flatRest(function(iteratees) {
          iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
          return baseRest(function(args) {
            var thisArg = this;
            return arrayFunc(iteratees, function(iteratee) {
              return apply(iteratee, thisArg, args);
            });
          });
        });
      }

      /**
       * Creates the padding for `string` based on `length`. The `chars` string
       * is truncated if the number of characters exceeds `length`.
       *
       * @private
       * @param {number} length The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padding for `string`.
       */
      function createPadding(length, chars) {
        chars = chars === undefined ? ' ' : baseToString(chars);

        var charsLength = chars.length;
        if (charsLength < 2) {
          return charsLength ? baseRepeat(chars, length) : chars;
        }
        var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
        return hasUnicode(chars)
          ? castSlice(stringToArray(result), 0, length).join('')
          : result.slice(0, length);
      }

      /**
       * Creates a function that wraps `func` to invoke it with the `this` binding
       * of `thisArg` and `partials` prepended to the arguments it receives.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {Array} partials The arguments to prepend to those provided to
       *  the new function.
       * @returns {Function} Returns the new wrapped function.
       */
      function createPartial(func, bitmask, thisArg, partials) {
        var isBind = bitmask & WRAP_BIND_FLAG,
            Ctor = createCtor(func);

        function wrapper() {
          var argsIndex = -1,
              argsLength = arguments.length,
              leftIndex = -1,
              leftLength = partials.length,
              args = Array(leftLength + argsLength),
              fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

          while (++leftIndex < leftLength) {
            args[leftIndex] = partials[leftIndex];
          }
          while (argsLength--) {
            args[leftIndex++] = arguments[++argsIndex];
          }
          return apply(fn, isBind ? thisArg : this, args);
        }
        return wrapper;
      }

      /**
       * Creates a `_.range` or `_.rangeRight` function.
       *
       * @private
       * @param {boolean} [fromRight] Specify iterating from right to left.
       * @returns {Function} Returns the new range function.
       */
      function createRange(fromRight) {
        return function(start, end, step) {
          if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
            end = step = undefined;
          }
          // Ensure the sign of `-0` is preserved.
          start = toFinite(start);
          if (end === undefined) {
            end = start;
            start = 0;
          } else {
            end = toFinite(end);
          }
          step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
          return baseRange(start, end, step, fromRight);
        };
      }

      /**
       * Creates a function that performs a relational operation on two values.
       *
       * @private
       * @param {Function} operator The function to perform the operation.
       * @returns {Function} Returns the new relational operation function.
       */
      function createRelationalOperation(operator) {
        return function(value, other) {
          if (!(typeof value == 'string' && typeof other == 'string')) {
            value = toNumber(value);
            other = toNumber(other);
          }
          return operator(value, other);
        };
      }

      /**
       * Creates a function that wraps `func` to continue currying.
       *
       * @private
       * @param {Function} func The function to wrap.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @param {Function} wrapFunc The function to create the `func` wrapper.
       * @param {*} placeholder The placeholder value.
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to prepend to those provided to
       *  the new function.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
        var isCurry = bitmask & WRAP_CURRY_FLAG,
            newHolders = isCurry ? holders : undefined,
            newHoldersRight = isCurry ? undefined : holders,
            newPartials = isCurry ? partials : undefined,
            newPartialsRight = isCurry ? undefined : partials;

        bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
        bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

        if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
          bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
        }
        var newData = [
          func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
          newHoldersRight, argPos, ary, arity
        ];

        var result = wrapFunc.apply(undefined, newData);
        if (isLaziable(func)) {
          setData(result, newData);
        }
        result.placeholder = placeholder;
        return setWrapToString(result, func, bitmask);
      }

      /**
       * Creates a function like `_.round`.
       *
       * @private
       * @param {string} methodName The name of the `Math` method to use when rounding.
       * @returns {Function} Returns the new round function.
       */
      function createRound(methodName) {
        var func = Math[methodName];
        return function(number, precision) {
          number = toNumber(number);
          precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
          if (precision) {
            // Shift with exponential notation to avoid floating-point issues.
            // See [MDN](https://mdn.io/round#Examples) for more details.
            var pair = (toString(number) + 'e').split('e'),
                value = func(pair[0] + 'e' + (+pair[1] + precision));

            pair = (toString(value) + 'e').split('e');
            return +(pair[0] + 'e' + (+pair[1] - precision));
          }
          return func(number);
        };
      }

      /**
       * Creates a set object of `values`.
       *
       * @private
       * @param {Array} values The values to add to the set.
       * @returns {Object} Returns the new set.
       */
      var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
        return new Set(values);
      };

      /**
       * Creates a `_.toPairs` or `_.toPairsIn` function.
       *
       * @private
       * @param {Function} keysFunc The function to get the keys of a given object.
       * @returns {Function} Returns the new pairs function.
       */
      function createToPairs(keysFunc) {
        return function(object) {
          var tag = getTag(object);
          if (tag == mapTag) {
            return mapToArray(object);
          }
          if (tag == setTag) {
            return setToPairs(object);
          }
          return baseToPairs(object, keysFunc(object));
        };
      }

      /**
       * Creates a function that either curries or invokes `func` with optional
       * `this` binding and partially applied arguments.
       *
       * @private
       * @param {Function|string} func The function or method name to wrap.
       * @param {number} bitmask The bitmask flags.
       *    1 - `_.bind`
       *    2 - `_.bindKey`
       *    4 - `_.curry` or `_.curryRight` of a bound function
       *    8 - `_.curry`
       *   16 - `_.curryRight`
       *   32 - `_.partial`
       *   64 - `_.partialRight`
       *  128 - `_.rearg`
       *  256 - `_.ary`
       *  512 - `_.flip`
       * @param {*} [thisArg] The `this` binding of `func`.
       * @param {Array} [partials] The arguments to be partially applied.
       * @param {Array} [holders] The `partials` placeholder indexes.
       * @param {Array} [argPos] The argument positions of the new function.
       * @param {number} [ary] The arity cap of `func`.
       * @param {number} [arity] The arity of `func`.
       * @returns {Function} Returns the new wrapped function.
       */
      function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
        var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
        if (!isBindKey && typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var length = partials ? partials.length : 0;
        if (!length) {
          bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
          partials = holders = undefined;
        }
        ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
        arity = arity === undefined ? arity : toInteger(arity);
        length -= holders ? holders.length : 0;

        if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
          var partialsRight = partials,
              holdersRight = holders;

          partials = holders = undefined;
        }
        var data = isBindKey ? undefined : getData(func);

        var newData = [
          func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
          argPos, ary, arity
        ];

        if (data) {
          mergeData(newData, data);
        }
        func = newData[0];
        bitmask = newData[1];
        thisArg = newData[2];
        partials = newData[3];
        holders = newData[4];
        arity = newData[9] = newData[9] === undefined
          ? (isBindKey ? 0 : func.length)
          : nativeMax(newData[9] - length, 0);

        if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
          bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
        }
        if (!bitmask || bitmask == WRAP_BIND_FLAG) {
          var result = createBind(func, bitmask, thisArg);
        } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
          result = createCurry(func, bitmask, arity);
        } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
          result = createPartial(func, bitmask, thisArg, partials);
        } else {
          result = createHybrid.apply(undefined, newData);
        }
        var setter = data ? baseSetData : setData;
        return setWrapToString(setter(result, newData), func, bitmask);
      }

      /**
       * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
       * of source objects to the destination object for all destination properties
       * that resolve to `undefined`.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to assign.
       * @param {Object} object The parent object of `objValue`.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsAssignIn(objValue, srcValue, key, object) {
        if (objValue === undefined ||
            (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
          return srcValue;
        }
        return objValue;
      }

      /**
       * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
       * objects into destination objects that are passed thru.
       *
       * @private
       * @param {*} objValue The destination value.
       * @param {*} srcValue The source value.
       * @param {string} key The key of the property to merge.
       * @param {Object} object The parent object of `objValue`.
       * @param {Object} source The parent object of `srcValue`.
       * @param {Object} [stack] Tracks traversed source values and their merged
       *  counterparts.
       * @returns {*} Returns the value to assign.
       */
      function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
        if (isObject(objValue) && isObject(srcValue)) {
          // Recursively merge objects and arrays (susceptible to call stack limits).
          stack.set(srcValue, objValue);
          baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
          stack['delete'](srcValue);
        }
        return objValue;
      }

      /**
       * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
       * objects.
       *
       * @private
       * @param {*} value The value to inspect.
       * @param {string} key The key of the property to inspect.
       * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
       */
      function customOmitClone(value) {
        return isPlainObject(value) ? undefined : value;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for arrays with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Array} array The array to compare.
       * @param {Array} other The other array to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `array` and `other` objects.
       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
       */
      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            arrLength = array.length,
            othLength = other.length;

        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(array);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var index = -1,
            result = true,
            seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

        stack.set(array, other);
        stack.set(other, array);

        // Ignore non-index properties.
        while (++index < arrLength) {
          var arrValue = array[index],
              othValue = other[index];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, arrValue, index, other, array, stack)
              : customizer(arrValue, othValue, index, array, other, stack);
          }
          if (compared !== undefined) {
            if (compared) {
              continue;
            }
            result = false;
            break;
          }
          // Recursively compare arrays (susceptible to call stack limits).
          if (seen) {
            if (!arraySome(other, function(othValue, othIndex) {
                  if (!cacheHas(seen, othIndex) &&
                      (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
              result = false;
              break;
            }
          } else if (!(
                arrValue === othValue ||
                  equalFunc(arrValue, othValue, bitmask, customizer, stack)
              )) {
            result = false;
            break;
          }
        }
        stack['delete'](array);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for comparing objects of
       * the same `toStringTag`.
       *
       * **Note:** This function only supports comparing values with tags of
       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {string} tag The `toStringTag` of the objects to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
        switch (tag) {
          case dataViewTag:
            if ((object.byteLength != other.byteLength) ||
                (object.byteOffset != other.byteOffset)) {
              return false;
            }
            object = object.buffer;
            other = other.buffer;

          case arrayBufferTag:
            if ((object.byteLength != other.byteLength) ||
                !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
              return false;
            }
            return true;

          case boolTag:
          case dateTag:
          case numberTag:
            // Coerce booleans to `1` or `0` and dates to milliseconds.
            // Invalid dates are coerced to `NaN`.
            return eq(+object, +other);

          case errorTag:
            return object.name == other.name && object.message == other.message;

          case regexpTag:
          case stringTag:
            // Coerce regexes to strings and treat strings, primitives and objects,
            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
            // for more details.
            return object == (other + '');

          case mapTag:
            var convert = mapToArray;

          case setTag:
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
            convert || (convert = setToArray);

            if (object.size != other.size && !isPartial) {
              return false;
            }
            // Assume cyclic values are equal.
            var stacked = stack.get(object);
            if (stacked) {
              return stacked == other;
            }
            bitmask |= COMPARE_UNORDERED_FLAG;

            // Recursively compare objects (susceptible to call stack limits).
            stack.set(object, other);
            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
            stack['delete'](object);
            return result;

          case symbolTag:
            if (symbolValueOf) {
              return symbolValueOf.call(object) == symbolValueOf.call(other);
            }
        }
        return false;
      }

      /**
       * A specialized version of `baseIsEqualDeep` for objects with support for
       * partial deep comparisons.
       *
       * @private
       * @param {Object} object The object to compare.
       * @param {Object} other The other object to compare.
       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
       * @param {Function} customizer The function to customize comparisons.
       * @param {Function} equalFunc The function to determine equivalents of values.
       * @param {Object} stack Tracks traversed `object` and `other` objects.
       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
       */
      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
            objProps = getAllKeys(object),
            objLength = objProps.length,
            othProps = getAllKeys(other),
            othLength = othProps.length;

        if (objLength != othLength && !isPartial) {
          return false;
        }
        var index = objLength;
        while (index--) {
          var key = objProps[index];
          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
            return false;
          }
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked && stack.get(other)) {
          return stacked == other;
        }
        var result = true;
        stack.set(object, other);
        stack.set(other, object);

        var skipCtor = isPartial;
        while (++index < objLength) {
          key = objProps[index];
          var objValue = object[key],
              othValue = other[key];

          if (customizer) {
            var compared = isPartial
              ? customizer(othValue, objValue, key, other, object, stack)
              : customizer(objValue, othValue, key, object, other, stack);
          }
          // Recursively compare objects (susceptible to call stack limits).
          if (!(compared === undefined
                ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
                : compared
              )) {
            result = false;
            break;
          }
          skipCtor || (skipCtor = key == 'constructor');
        }
        if (result && !skipCtor) {
          var objCtor = object.constructor,
              othCtor = other.constructor;

          // Non `Object` object instances with different constructors are not equal.
          if (objCtor != othCtor &&
              ('constructor' in object && 'constructor' in other) &&
              !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
                typeof othCtor == 'function' && othCtor instanceof othCtor)) {
            result = false;
          }
        }
        stack['delete'](object);
        stack['delete'](other);
        return result;
      }

      /**
       * A specialized version of `baseRest` which flattens the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @returns {Function} Returns the new function.
       */
      function flatRest(func) {
        return setToString(overRest(func, undefined, flatten), func + '');
      }

      /**
       * Creates an array of own enumerable property names and symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeys(object) {
        return baseGetAllKeys(object, keys, getSymbols);
      }

      /**
       * Creates an array of own and inherited enumerable property names and
       * symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names and symbols.
       */
      function getAllKeysIn(object) {
        return baseGetAllKeys(object, keysIn, getSymbolsIn);
      }

      /**
       * Gets metadata for `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {*} Returns the metadata for `func`.
       */
      var getData = !metaMap ? noop : function(func) {
        return metaMap.get(func);
      };

      /**
       * Gets the name of `func`.
       *
       * @private
       * @param {Function} func The function to query.
       * @returns {string} Returns the function name.
       */
      function getFuncName(func) {
        var result = (func.name + ''),
            array = realNames[result],
            length = hasOwnProperty.call(realNames, result) ? array.length : 0;

        while (length--) {
          var data = array[length],
              otherFunc = data.func;
          if (otherFunc == null || otherFunc == func) {
            return data.name;
          }
        }
        return result;
      }

      /**
       * Gets the argument placeholder value for `func`.
       *
       * @private
       * @param {Function} func The function to inspect.
       * @returns {*} Returns the placeholder value.
       */
      function getHolder(func) {
        var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
        return object.placeholder;
      }

      /**
       * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
       * this function returns the custom method, otherwise it returns `baseIteratee`.
       * If arguments are provided, the chosen function is invoked with them and
       * its result is returned.
       *
       * @private
       * @param {*} [value] The value to convert to an iteratee.
       * @param {number} [arity] The arity of the created iteratee.
       * @returns {Function} Returns the chosen function or its result.
       */
      function getIteratee() {
        var result = lodash.iteratee || iteratee;
        result = result === iteratee ? baseIteratee : result;
        return arguments.length ? result(arguments[0], arguments[1]) : result;
      }

      /**
       * Gets the data for `map`.
       *
       * @private
       * @param {Object} map The map to query.
       * @param {string} key The reference key.
       * @returns {*} Returns the map data.
       */
      function getMapData(map, key) {
        var data = map.__data__;
        return isKeyable(key)
          ? data[typeof key == 'string' ? 'string' : 'hash']
          : data.map;
      }

      /**
       * Gets the property names, values, and compare flags of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the match data of `object`.
       */
      function getMatchData(object) {
        var result = keys(object),
            length = result.length;

        while (length--) {
          var key = result[length],
              value = object[key];

          result[length] = [key, value, isStrictComparable(value)];
        }
        return result;
      }

      /**
       * Gets the native function at `key` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the method to get.
       * @returns {*} Returns the function if it's native, else `undefined`.
       */
      function getNative(object, key) {
        var value = getValue(object, key);
        return baseIsNative(value) ? value : undefined;
      }

      /**
       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the raw `toStringTag`.
       */
      function getRawTag(value) {
        var isOwn = hasOwnProperty.call(value, symToStringTag),
            tag = value[symToStringTag];

        try {
          value[symToStringTag] = undefined;
          var unmasked = true;
        } catch (e) {}

        var result = nativeObjectToString.call(value);
        if (unmasked) {
          if (isOwn) {
            value[symToStringTag] = tag;
          } else {
            delete value[symToStringTag];
          }
        }
        return result;
      }

      /**
       * Creates an array of the own enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
        if (object == null) {
          return [];
        }
        object = Object(object);
        return arrayFilter(nativeGetSymbols(object), function(symbol) {
          return propertyIsEnumerable.call(object, symbol);
        });
      };

      /**
       * Creates an array of the own and inherited enumerable symbols of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of symbols.
       */
      var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
        var result = [];
        while (object) {
          arrayPush(result, getSymbols(object));
          object = getPrototype(object);
        }
        return result;
      };

      /**
       * Gets the `toStringTag` of `value`.
       *
       * @private
       * @param {*} value The value to query.
       * @returns {string} Returns the `toStringTag`.
       */
      var getTag = baseGetTag;

      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
      if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
          (Map && getTag(new Map) != mapTag) ||
          (Promise && getTag(Promise.resolve()) != promiseTag) ||
          (Set && getTag(new Set) != setTag) ||
          (WeakMap && getTag(new WeakMap) != weakMapTag)) {
        getTag = function(value) {
          var result = baseGetTag(value),
              Ctor = result == objectTag ? value.constructor : undefined,
              ctorString = Ctor ? toSource(Ctor) : '';

          if (ctorString) {
            switch (ctorString) {
              case dataViewCtorString: return dataViewTag;
              case mapCtorString: return mapTag;
              case promiseCtorString: return promiseTag;
              case setCtorString: return setTag;
              case weakMapCtorString: return weakMapTag;
            }
          }
          return result;
        };
      }

      /**
       * Gets the view, applying any `transforms` to the `start` and `end` positions.
       *
       * @private
       * @param {number} start The start of the view.
       * @param {number} end The end of the view.
       * @param {Array} transforms The transformations to apply to the view.
       * @returns {Object} Returns an object containing the `start` and `end`
       *  positions of the view.
       */
      function getView(start, end, transforms) {
        var index = -1,
            length = transforms.length;

        while (++index < length) {
          var data = transforms[index],
              size = data.size;

          switch (data.type) {
            case 'drop':      start += size; break;
            case 'dropRight': end -= size; break;
            case 'take':      end = nativeMin(end, start + size); break;
            case 'takeRight': start = nativeMax(start, end - size); break;
          }
        }
        return { 'start': start, 'end': end };
      }

      /**
       * Extracts wrapper details from the `source` body comment.
       *
       * @private
       * @param {string} source The source to inspect.
       * @returns {Array} Returns the wrapper details.
       */
      function getWrapDetails(source) {
        var match = source.match(reWrapDetails);
        return match ? match[1].split(reSplitDetails) : [];
      }

      /**
       * Checks if `path` exists on `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @param {Function} hasFunc The function to check properties.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       */
      function hasPath(object, path, hasFunc) {
        path = castPath(path, object);

        var index = -1,
            length = path.length,
            result = false;

        while (++index < length) {
          var key = toKey(path[index]);
          if (!(result = object != null && hasFunc(object, key))) {
            break;
          }
          object = object[key];
        }
        if (result || ++index != length) {
          return result;
        }
        length = object == null ? 0 : object.length;
        return !!length && isLength(length) && isIndex(key, length) &&
          (isArray(object) || isArguments(object));
      }

      /**
       * Initializes an array clone.
       *
       * @private
       * @param {Array} array The array to clone.
       * @returns {Array} Returns the initialized clone.
       */
      function initCloneArray(array) {
        var length = array.length,
            result = new array.constructor(length);

        // Add properties assigned by `RegExp#exec`.
        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
          result.index = array.index;
          result.input = array.input;
        }
        return result;
      }

      /**
       * Initializes an object clone.
       *
       * @private
       * @param {Object} object The object to clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneObject(object) {
        return (typeof object.constructor == 'function' && !isPrototype(object))
          ? baseCreate(getPrototype(object))
          : {};
      }

      /**
       * Initializes an object clone based on its `toStringTag`.
       *
       * **Note:** This function only supports cloning values with tags of
       * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
       *
       * @private
       * @param {Object} object The object to clone.
       * @param {string} tag The `toStringTag` of the object to clone.
       * @param {boolean} [isDeep] Specify a deep clone.
       * @returns {Object} Returns the initialized clone.
       */
      function initCloneByTag(object, tag, isDeep) {
        var Ctor = object.constructor;
        switch (tag) {
          case arrayBufferTag:
            return cloneArrayBuffer(object);

          case boolTag:
          case dateTag:
            return new Ctor(+object);

          case dataViewTag:
            return cloneDataView(object, isDeep);

          case float32Tag: case float64Tag:
          case int8Tag: case int16Tag: case int32Tag:
          case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
            return cloneTypedArray(object, isDeep);

          case mapTag:
            return new Ctor;

          case numberTag:
          case stringTag:
            return new Ctor(object);

          case regexpTag:
            return cloneRegExp(object);

          case setTag:
            return new Ctor;

          case symbolTag:
            return cloneSymbol(object);
        }
      }

      /**
       * Inserts wrapper `details` in a comment at the top of the `source` body.
       *
       * @private
       * @param {string} source The source to modify.
       * @returns {Array} details The details to insert.
       * @returns {string} Returns the modified source.
       */
      function insertWrapDetails(source, details) {
        var length = details.length;
        if (!length) {
          return source;
        }
        var lastIndex = length - 1;
        details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
        details = details.join(length > 2 ? ', ' : ' ');
        return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
      }

      /**
       * Checks if `value` is a flattenable `arguments` object or array.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
       */
      function isFlattenable(value) {
        return isArray(value) || isArguments(value) ||
          !!(spreadableSymbol && value && value[spreadableSymbol]);
      }

      /**
       * Checks if `value` is a valid array-like index.
       *
       * @private
       * @param {*} value The value to check.
       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
       */
      function isIndex(value, length) {
        var type = typeof value;
        length = length == null ? MAX_SAFE_INTEGER : length;

        return !!length &&
          (type == 'number' ||
            (type != 'symbol' && reIsUint.test(value))) &&
              (value > -1 && value % 1 == 0 && value < length);
      }

      /**
       * Checks if the given arguments are from an iteratee call.
       *
       * @private
       * @param {*} value The potential iteratee value argument.
       * @param {*} index The potential iteratee index or key argument.
       * @param {*} object The potential iteratee object argument.
       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
       *  else `false`.
       */
      function isIterateeCall(value, index, object) {
        if (!isObject(object)) {
          return false;
        }
        var type = typeof index;
        if (type == 'number'
              ? (isArrayLike(object) && isIndex(index, object.length))
              : (type == 'string' && index in object)
            ) {
          return eq(object[index], value);
        }
        return false;
      }

      /**
       * Checks if `value` is a property name and not a property path.
       *
       * @private
       * @param {*} value The value to check.
       * @param {Object} [object] The object to query keys on.
       * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
       */
      function isKey(value, object) {
        if (isArray(value)) {
          return false;
        }
        var type = typeof value;
        if (type == 'number' || type == 'symbol' || type == 'boolean' ||
            value == null || isSymbol(value)) {
          return true;
        }
        return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
          (object != null && value in Object(object));
      }

      /**
       * Checks if `value` is suitable for use as unique object key.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
       */
      function isKeyable(value) {
        var type = typeof value;
        return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
          ? (value !== '__proto__')
          : (value === null);
      }

      /**
       * Checks if `func` has a lazy counterpart.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
       *  else `false`.
       */
      function isLaziable(func) {
        var funcName = getFuncName(func),
            other = lodash[funcName];

        if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
          return false;
        }
        if (func === other) {
          return true;
        }
        var data = getData(other);
        return !!data && func === data[0];
      }

      /**
       * Checks if `func` has its source masked.
       *
       * @private
       * @param {Function} func The function to check.
       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
       */
      function isMasked(func) {
        return !!maskSrcKey && (maskSrcKey in func);
      }

      /**
       * Checks if `func` is capable of being masked.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
       */
      var isMaskable = coreJsData ? isFunction : stubFalse;

      /**
       * Checks if `value` is likely a prototype object.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
       */
      function isPrototype(value) {
        var Ctor = value && value.constructor,
            proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

        return value === proto;
      }

      /**
       * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` if suitable for strict
       *  equality comparisons, else `false`.
       */
      function isStrictComparable(value) {
        return value === value && !isObject(value);
      }

      /**
       * A specialized version of `matchesProperty` for source values suitable
       * for strict equality comparisons, i.e. `===`.
       *
       * @private
       * @param {string} key The key of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       */
      function matchesStrictComparable(key, srcValue) {
        return function(object) {
          if (object == null) {
            return false;
          }
          return object[key] === srcValue &&
            (srcValue !== undefined || (key in Object(object)));
        };
      }

      /**
       * A specialized version of `_.memoize` which clears the memoized function's
       * cache when it exceeds `MAX_MEMOIZE_SIZE`.
       *
       * @private
       * @param {Function} func The function to have its output memoized.
       * @returns {Function} Returns the new memoized function.
       */
      function memoizeCapped(func) {
        var result = memoize(func, function(key) {
          if (cache.size === MAX_MEMOIZE_SIZE) {
            cache.clear();
          }
          return key;
        });

        var cache = result.cache;
        return result;
      }

      /**
       * Merges the function metadata of `source` into `data`.
       *
       * Merging metadata reduces the number of wrappers used to invoke a function.
       * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
       * may be applied regardless of execution order. Methods like `_.ary` and
       * `_.rearg` modify function arguments, making the order in which they are
       * executed important, preventing the merging of metadata. However, we make
       * an exception for a safe combined case where curried functions have `_.ary`
       * and or `_.rearg` applied.
       *
       * @private
       * @param {Array} data The destination metadata.
       * @param {Array} source The source metadata.
       * @returns {Array} Returns `data`.
       */
      function mergeData(data, source) {
        var bitmask = data[1],
            srcBitmask = source[1],
            newBitmask = bitmask | srcBitmask,
            isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

        var isCombo =
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
          ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
          ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

        // Exit early if metadata can't be merged.
        if (!(isCommon || isCombo)) {
          return data;
        }
        // Use source `thisArg` if available.
        if (srcBitmask & WRAP_BIND_FLAG) {
          data[2] = source[2];
          // Set when currying a bound function.
          newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
        }
        // Compose partial arguments.
        var value = source[3];
        if (value) {
          var partials = data[3];
          data[3] = partials ? composeArgs(partials, value, source[4]) : value;
          data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
        }
        // Compose partial right arguments.
        value = source[5];
        if (value) {
          partials = data[5];
          data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
          data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
        }
        // Use source `argPos` if available.
        value = source[7];
        if (value) {
          data[7] = value;
        }
        // Use source `ary` if it's smaller.
        if (srcBitmask & WRAP_ARY_FLAG) {
          data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
        }
        // Use source `arity` if one is not provided.
        if (data[9] == null) {
          data[9] = source[9];
        }
        // Use source `func` and merge bitmasks.
        data[0] = source[0];
        data[1] = newBitmask;

        return data;
      }

      /**
       * This function is like
       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * except that it includes inherited enumerable properties.
       *
       * @private
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       */
      function nativeKeysIn(object) {
        var result = [];
        if (object != null) {
          for (var key in Object(object)) {
            result.push(key);
          }
        }
        return result;
      }

      /**
       * Converts `value` to a string using `Object.prototype.toString`.
       *
       * @private
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       */
      function objectToString(value) {
        return nativeObjectToString.call(value);
      }

      /**
       * A specialized version of `baseRest` which transforms the rest array.
       *
       * @private
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @param {Function} transform The rest array transform.
       * @returns {Function} Returns the new function.
       */
      function overRest(func, start, transform) {
        start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
        return function() {
          var args = arguments,
              index = -1,
              length = nativeMax(args.length - start, 0),
              array = Array(length);

          while (++index < length) {
            array[index] = args[start + index];
          }
          index = -1;
          var otherArgs = Array(start + 1);
          while (++index < start) {
            otherArgs[index] = args[index];
          }
          otherArgs[start] = transform(array);
          return apply(func, this, otherArgs);
        };
      }

      /**
       * Gets the parent value at `path` of `object`.
       *
       * @private
       * @param {Object} object The object to query.
       * @param {Array} path The path to get the parent value of.
       * @returns {*} Returns the parent value.
       */
      function parent(object, path) {
        return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
      }

      /**
       * Reorder `array` according to the specified indexes where the element at
       * the first index is assigned as the first element, the element at
       * the second index is assigned as the second element, and so on.
       *
       * @private
       * @param {Array} array The array to reorder.
       * @param {Array} indexes The arranged array indexes.
       * @returns {Array} Returns `array`.
       */
      function reorder(array, indexes) {
        var arrLength = array.length,
            length = nativeMin(indexes.length, arrLength),
            oldArray = copyArray(array);

        while (length--) {
          var index = indexes[length];
          array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
        }
        return array;
      }

      /**
       * Gets the value at `key`, unless `key` is "__proto__".
       *
       * @private
       * @param {Object} object The object to query.
       * @param {string} key The key of the property to get.
       * @returns {*} Returns the property value.
       */
      function safeGet(object, key) {
        if (key == '__proto__') {
          return;
        }

        return object[key];
      }

      /**
       * Sets metadata for `func`.
       *
       * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
       * period of time, it will trip its breaker and transition to an identity
       * function to avoid garbage collection pauses in V8. See
       * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
       * for more details.
       *
       * @private
       * @param {Function} func The function to associate metadata with.
       * @param {*} data The metadata.
       * @returns {Function} Returns `func`.
       */
      var setData = shortOut(baseSetData);

      /**
       * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
       *
       * @private
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @returns {number|Object} Returns the timer id or timeout object.
       */
      var setTimeout = ctxSetTimeout || function(func, wait) {
        return root.setTimeout(func, wait);
      };

      /**
       * Sets the `toString` method of `func` to return `string`.
       *
       * @private
       * @param {Function} func The function to modify.
       * @param {Function} string The `toString` result.
       * @returns {Function} Returns `func`.
       */
      var setToString = shortOut(baseSetToString);

      /**
       * Sets the `toString` method of `wrapper` to mimic the source of `reference`
       * with wrapper details in a comment at the top of the source body.
       *
       * @private
       * @param {Function} wrapper The function to modify.
       * @param {Function} reference The reference function.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Function} Returns `wrapper`.
       */
      function setWrapToString(wrapper, reference, bitmask) {
        var source = (reference + '');
        return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
      }

      /**
       * Creates a function that'll short out and invoke `identity` instead
       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
       * milliseconds.
       *
       * @private
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new shortable function.
       */
      function shortOut(func) {
        var count = 0,
            lastCalled = 0;

        return function() {
          var stamp = nativeNow(),
              remaining = HOT_SPAN - (stamp - lastCalled);

          lastCalled = stamp;
          if (remaining > 0) {
            if (++count >= HOT_COUNT) {
              return arguments[0];
            }
          } else {
            count = 0;
          }
          return func.apply(undefined, arguments);
        };
      }

      /**
       * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
       *
       * @private
       * @param {Array} array The array to shuffle.
       * @param {number} [size=array.length] The size of `array`.
       * @returns {Array} Returns `array`.
       */
      function shuffleSelf(array, size) {
        var index = -1,
            length = array.length,
            lastIndex = length - 1;

        size = size === undefined ? length : size;
        while (++index < size) {
          var rand = baseRandom(index, lastIndex),
              value = array[rand];

          array[rand] = array[index];
          array[index] = value;
        }
        array.length = size;
        return array;
      }

      /**
       * Converts `string` to a property path array.
       *
       * @private
       * @param {string} string The string to convert.
       * @returns {Array} Returns the property path array.
       */
      var stringToPath = memoizeCapped(function(string) {
        var result = [];
        if (string.charCodeAt(0) === 46 /* . */) {
          result.push('');
        }
        string.replace(rePropName, function(match, number, quote, subString) {
          result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
        });
        return result;
      });

      /**
       * Converts `value` to a string key if it's not a string or symbol.
       *
       * @private
       * @param {*} value The value to inspect.
       * @returns {string|symbol} Returns the key.
       */
      function toKey(value) {
        if (typeof value == 'string' || isSymbol(value)) {
          return value;
        }
        var result = (value + '');
        return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
      }

      /**
       * Converts `func` to its source code.
       *
       * @private
       * @param {Function} func The function to convert.
       * @returns {string} Returns the source code.
       */
      function toSource(func) {
        if (func != null) {
          try {
            return funcToString.call(func);
          } catch (e) {}
          try {
            return (func + '');
          } catch (e) {}
        }
        return '';
      }

      /**
       * Updates wrapper `details` based on `bitmask` flags.
       *
       * @private
       * @returns {Array} details The details to modify.
       * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
       * @returns {Array} Returns `details`.
       */
      function updateWrapDetails(details, bitmask) {
        arrayEach(wrapFlags, function(pair) {
          var value = '_.' + pair[0];
          if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
            details.push(value);
          }
        });
        return details.sort();
      }

      /**
       * Creates a clone of `wrapper`.
       *
       * @private
       * @param {Object} wrapper The wrapper to clone.
       * @returns {Object} Returns the cloned wrapper.
       */
      function wrapperClone(wrapper) {
        if (wrapper instanceof LazyWrapper) {
          return wrapper.clone();
        }
        var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
        result.__actions__ = copyArray(wrapper.__actions__);
        result.__index__  = wrapper.__index__;
        result.__values__ = wrapper.__values__;
        return result;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an array of elements split into groups the length of `size`.
       * If `array` can't be split evenly, the final chunk will be the remaining
       * elements.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to process.
       * @param {number} [size=1] The length of each chunk
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the new array of chunks.
       * @example
       *
       * _.chunk(['a', 'b', 'c', 'd'], 2);
       * // => [['a', 'b'], ['c', 'd']]
       *
       * _.chunk(['a', 'b', 'c', 'd'], 3);
       * // => [['a', 'b', 'c'], ['d']]
       */
      function chunk(array, size, guard) {
        if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
          size = 1;
        } else {
          size = nativeMax(toInteger(size), 0);
        }
        var length = array == null ? 0 : array.length;
        if (!length || size < 1) {
          return [];
        }
        var index = 0,
            resIndex = 0,
            result = Array(nativeCeil(length / size));

        while (index < length) {
          result[resIndex++] = baseSlice(array, index, (index += size));
        }
        return result;
      }

      /**
       * Creates an array with all falsey values removed. The values `false`, `null`,
       * `0`, `""`, `undefined`, and `NaN` are falsey.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to compact.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.compact([0, 1, false, 2, '', 3]);
       * // => [1, 2, 3]
       */
      function compact(array) {
        var index = -1,
            length = array == null ? 0 : array.length,
            resIndex = 0,
            result = [];

        while (++index < length) {
          var value = array[index];
          if (value) {
            result[resIndex++] = value;
          }
        }
        return result;
      }

      /**
       * Creates a new array concatenating `array` with any additional arrays
       * and/or values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to concatenate.
       * @param {...*} [values] The values to concatenate.
       * @returns {Array} Returns the new concatenated array.
       * @example
       *
       * var array = [1];
       * var other = _.concat(array, 2, [3], [[4]]);
       *
       * console.log(other);
       * // => [1, 2, 3, [4]]
       *
       * console.log(array);
       * // => [1]
       */
      function concat() {
        var length = arguments.length;
        if (!length) {
          return [];
        }
        var args = Array(length - 1),
            array = arguments[0],
            index = length;

        while (index--) {
          args[index - 1] = arguments[index];
        }
        return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
      }

      /**
       * Creates an array of `array` values not included in the other given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * **Note:** Unlike `_.pullAll`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.without, _.xor
       * @example
       *
       * _.difference([2, 1], [2, 3]);
       * // => [1]
       */
      var difference = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `iteratee` which
       * is invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var differenceBy = baseRest(function(array, values) {
        var iteratee = last(values);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.difference` except that it accepts `comparator`
       * which is invoked to compare elements of `array` to `values`. The order and
       * references of result values are determined by the first array. The comparator
       * is invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...Array} [values] The values to exclude.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       *
       * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }]
       */
      var differenceWith = baseRest(function(array, values) {
        var comparator = last(values);
        if (isArrayLikeObject(comparator)) {
          comparator = undefined;
        }
        return isArrayLikeObject(array)
          ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
          : [];
      });

      /**
       * Creates a slice of `array` with `n` elements dropped from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.drop([1, 2, 3]);
       * // => [2, 3]
       *
       * _.drop([1, 2, 3], 2);
       * // => [3]
       *
       * _.drop([1, 2, 3], 5);
       * // => []
       *
       * _.drop([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function drop(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with `n` elements dropped from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to drop.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.dropRight([1, 2, 3]);
       * // => [1, 2]
       *
       * _.dropRight([1, 2, 3], 2);
       * // => [1]
       *
       * _.dropRight([1, 2, 3], 5);
       * // => []
       *
       * _.dropRight([1, 2, 3], 0);
       * // => [1, 2, 3]
       */
      function dropRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the end.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.dropRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropRightWhile(users, ['active', false]);
       * // => objects for ['barney']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropRightWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true, true)
          : [];
      }

      /**
       * Creates a slice of `array` excluding elements dropped from the beginning.
       * Elements are dropped until `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.dropWhile(users, function(o) { return !o.active; });
       * // => objects for ['pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.dropWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.dropWhile(users, ['active', false]);
       * // => objects for ['pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.dropWhile(users, 'active');
       * // => objects for ['barney', 'fred', 'pebbles']
       */
      function dropWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), true)
          : [];
      }

      /**
       * Fills elements of `array` with `value` from `start` up to, but not
       * including, `end`.
       *
       * **Note:** This method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Array
       * @param {Array} array The array to fill.
       * @param {*} value The value to fill `array` with.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.fill(array, 'a');
       * console.log(array);
       * // => ['a', 'a', 'a']
       *
       * _.fill(Array(3), 2);
       * // => [2, 2, 2]
       *
       * _.fill([4, 6, 8, 10], '*', 1, 3);
       * // => [4, '*', '*', 10]
       */
      function fill(array, value, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
          start = 0;
          end = length;
        }
        return baseFill(array, value, start, end);
      }

      /**
       * This method is like `_.find` except that it returns the index of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.findIndex(users, function(o) { return o.user == 'barney'; });
       * // => 0
       *
       * // The `_.matches` iteratee shorthand.
       * _.findIndex(users, { 'user': 'fred', 'active': false });
       * // => 1
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findIndex(users, ['active', false]);
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.findIndex(users, 'active');
       * // => 2
       */
      function findIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index);
      }

      /**
       * This method is like `_.findIndex` except that it iterates over elements
       * of `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the found element, else `-1`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
       * // => 2
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastIndex(users, { 'user': 'barney', 'active': true });
       * // => 0
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastIndex(users, ['active', false]);
       * // => 2
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastIndex(users, 'active');
       * // => 0
       */
      function findLastIndex(array, predicate, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length - 1;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = fromIndex < 0
            ? nativeMax(length + index, 0)
            : nativeMin(index, length - 1);
        }
        return baseFindIndex(array, getIteratee(predicate, 3), index, true);
      }

      /**
       * Flattens `array` a single level deep.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flatten([1, [2, [3, [4]], 5]]);
       * // => [1, 2, [3, [4]], 5]
       */
      function flatten(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, 1) : [];
      }

      /**
       * Recursively flattens `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * _.flattenDeep([1, [2, [3, [4]], 5]]);
       * // => [1, 2, 3, 4, 5]
       */
      function flattenDeep(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseFlatten(array, INFINITY) : [];
      }

      /**
       * Recursively flatten `array` up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Array
       * @param {Array} array The array to flatten.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * var array = [1, [2, [3, [4]], 5]];
       *
       * _.flattenDepth(array, 1);
       * // => [1, 2, [3, [4]], 5]
       *
       * _.flattenDepth(array, 2);
       * // => [1, 2, 3, [4], 5]
       */
      function flattenDepth(array, depth) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(array, depth);
      }

      /**
       * The inverse of `_.toPairs`; this method returns an object composed
       * from key-value `pairs`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} pairs The key-value pairs.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.fromPairs([['a', 1], ['b', 2]]);
       * // => { 'a': 1, 'b': 2 }
       */
      function fromPairs(pairs) {
        var index = -1,
            length = pairs == null ? 0 : pairs.length,
            result = {};

        while (++index < length) {
          var pair = pairs[index];
          result[pair[0]] = pair[1];
        }
        return result;
      }

      /**
       * Gets the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias first
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the first element of `array`.
       * @example
       *
       * _.head([1, 2, 3]);
       * // => 1
       *
       * _.head([]);
       * // => undefined
       */
      function head(array) {
        return (array && array.length) ? array[0] : undefined;
      }

      /**
       * Gets the index at which the first occurrence of `value` is found in `array`
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. If `fromIndex` is negative, it's used as the
       * offset from the end of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.indexOf([1, 2, 1, 2], 2);
       * // => 1
       *
       * // Search from the `fromIndex`.
       * _.indexOf([1, 2, 1, 2], 2, 2);
       * // => 3
       */
      function indexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = fromIndex == null ? 0 : toInteger(fromIndex);
        if (index < 0) {
          index = nativeMax(length + index, 0);
        }
        return baseIndexOf(array, value, index);
      }

      /**
       * Gets all but the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.initial([1, 2, 3]);
       * // => [1, 2]
       */
      function initial(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 0, -1) : [];
      }

      /**
       * Creates an array of unique values that are included in all given arrays
       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons. The order and references of result values are
       * determined by the first array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersection([2, 1], [2, 3]);
       * // => [2]
       */
      var intersection = baseRest(function(arrays) {
        var mapped = arrayMap(arrays, castArrayLikeObject);
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped)
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `iteratee`
       * which is invoked for each element of each `arrays` to generate the criterion
       * by which they're compared. The order and references of result values are
       * determined by the first array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [2.1]
       *
       * // The `_.property` iteratee shorthand.
       * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }]
       */
      var intersectionBy = baseRest(function(arrays) {
        var iteratee = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        if (iteratee === last(mapped)) {
          iteratee = undefined;
        } else {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, getIteratee(iteratee, 2))
          : [];
      });

      /**
       * This method is like `_.intersection` except that it accepts `comparator`
       * which is invoked to compare elements of `arrays`. The order and references
       * of result values are determined by the first array. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of intersecting values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.intersectionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }]
       */
      var intersectionWith = baseRest(function(arrays) {
        var comparator = last(arrays),
            mapped = arrayMap(arrays, castArrayLikeObject);

        comparator = typeof comparator == 'function' ? comparator : undefined;
        if (comparator) {
          mapped.pop();
        }
        return (mapped.length && mapped[0] === arrays[0])
          ? baseIntersection(mapped, undefined, comparator)
          : [];
      });

      /**
       * Converts all elements in `array` into a string separated by `separator`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to convert.
       * @param {string} [separator=','] The element separator.
       * @returns {string} Returns the joined string.
       * @example
       *
       * _.join(['a', 'b', 'c'], '~');
       * // => 'a~b~c'
       */
      function join(array, separator) {
        return array == null ? '' : nativeJoin.call(array, separator);
      }

      /**
       * Gets the last element of `array`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {*} Returns the last element of `array`.
       * @example
       *
       * _.last([1, 2, 3]);
       * // => 3
       */
      function last(array) {
        var length = array == null ? 0 : array.length;
        return length ? array[length - 1] : undefined;
      }

      /**
       * This method is like `_.indexOf` except that it iterates over elements of
       * `array` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=array.length-1] The index to search from.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.lastIndexOf([1, 2, 1, 2], 2);
       * // => 3
       *
       * // Search from the `fromIndex`.
       * _.lastIndexOf([1, 2, 1, 2], 2, 2);
       * // => 1
       */
      function lastIndexOf(array, value, fromIndex) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return -1;
        }
        var index = length;
        if (fromIndex !== undefined) {
          index = toInteger(fromIndex);
          index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
        }
        return value === value
          ? strictLastIndexOf(array, value, index)
          : baseFindIndex(array, baseIsNaN, index, true);
      }

      /**
       * Gets the element at index `n` of `array`. If `n` is negative, the nth
       * element from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.11.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=0] The index of the element to return.
       * @returns {*} Returns the nth element of `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       *
       * _.nth(array, 1);
       * // => 'b'
       *
       * _.nth(array, -2);
       * // => 'c';
       */
      function nth(array, n) {
        return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
      }

      /**
       * Removes all given values from `array` using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
       * to remove elements from an array by predicate.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...*} [values] The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pull(array, 'a', 'c');
       * console.log(array);
       * // => ['b', 'b']
       */
      var pull = baseRest(pullAll);

      /**
       * This method is like `_.pull` except that it accepts an array of values to remove.
       *
       * **Note:** Unlike `_.difference`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
       *
       * _.pullAll(array, ['a', 'c']);
       * console.log(array);
       * // => ['b', 'b']
       */
      function pullAll(array, values) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values)
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `iteratee` which is
       * invoked for each element of `array` and `values` to generate the criterion
       * by which they're compared. The iteratee is invoked with one argument: (value).
       *
       * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
       *
       * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
       * console.log(array);
       * // => [{ 'x': 2 }]
       */
      function pullAllBy(array, values, iteratee) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, getIteratee(iteratee, 2))
          : array;
      }

      /**
       * This method is like `_.pullAll` except that it accepts `comparator` which
       * is invoked to compare elements of `array` to `values`. The comparator is
       * invoked with two arguments: (arrVal, othVal).
       *
       * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Array} values The values to remove.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
       *
       * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
       * console.log(array);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
       */
      function pullAllWith(array, values, comparator) {
        return (array && array.length && values && values.length)
          ? basePullAll(array, values, undefined, comparator)
          : array;
      }

      /**
       * Removes elements from `array` corresponding to `indexes` and returns an
       * array of removed elements.
       *
       * **Note:** Unlike `_.at`, this method mutates `array`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {...(number|number[])} [indexes] The indexes of elements to remove.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = ['a', 'b', 'c', 'd'];
       * var pulled = _.pullAt(array, [1, 3]);
       *
       * console.log(array);
       * // => ['a', 'c']
       *
       * console.log(pulled);
       * // => ['b', 'd']
       */
      var pullAt = flatRest(function(array, indexes) {
        var length = array == null ? 0 : array.length,
            result = baseAt(array, indexes);

        basePullAt(array, arrayMap(indexes, function(index) {
          return isIndex(index, length) ? +index : index;
        }).sort(compareAscending));

        return result;
      });

      /**
       * Removes all elements from `array` that `predicate` returns truthy for
       * and returns an array of the removed elements. The predicate is invoked
       * with three arguments: (value, index, array).
       *
       * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
       * to pull elements from an array by value.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new array of removed elements.
       * @example
       *
       * var array = [1, 2, 3, 4];
       * var evens = _.remove(array, function(n) {
       *   return n % 2 == 0;
       * });
       *
       * console.log(array);
       * // => [1, 3]
       *
       * console.log(evens);
       * // => [2, 4]
       */
      function remove(array, predicate) {
        var result = [];
        if (!(array && array.length)) {
          return result;
        }
        var index = -1,
            indexes = [],
            length = array.length;

        predicate = getIteratee(predicate, 3);
        while (++index < length) {
          var value = array[index];
          if (predicate(value, index, array)) {
            result.push(value);
            indexes.push(index);
          }
        }
        basePullAt(array, indexes);
        return result;
      }

      /**
       * Reverses `array` so that the first element becomes the last, the second
       * element becomes the second to last, and so on.
       *
       * **Note:** This method mutates `array` and is based on
       * [`Array#reverse`](https://mdn.io/Array/reverse).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to modify.
       * @returns {Array} Returns `array`.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _.reverse(array);
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function reverse(array) {
        return array == null ? array : nativeReverse.call(array);
      }

      /**
       * Creates a slice of `array` from `start` up to, but not including, `end`.
       *
       * **Note:** This method is used instead of
       * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
       * returned.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to slice.
       * @param {number} [start=0] The start position.
       * @param {number} [end=array.length] The end position.
       * @returns {Array} Returns the slice of `array`.
       */
      function slice(array, start, end) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
          start = 0;
          end = length;
        }
        else {
          start = start == null ? 0 : toInteger(start);
          end = end === undefined ? length : toInteger(end);
        }
        return baseSlice(array, start, end);
      }

      /**
       * Uses a binary search to determine the lowest index at which `value`
       * should be inserted into `array` in order to maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedIndex([30, 50], 40);
       * // => 1
       */
      function sortedIndex(array, value) {
        return baseSortedIndex(array, value);
      }

      /**
       * This method is like `_.sortedIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 0
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
       * // => 0
       */
      function sortedIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
      }

      /**
       * This method is like `_.indexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
       * // => 1
       */
      function sortedIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value);
          if (index < length && eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.sortedIndex` except that it returns the highest
       * index at which `value` should be inserted into `array` in order to
       * maintain its sort order.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
       * // => 4
       */
      function sortedLastIndex(array, value) {
        return baseSortedIndex(array, value, true);
      }

      /**
       * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
       * which is invoked for `value` and each element of `array` to compute their
       * sort ranking. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The sorted array to inspect.
       * @param {*} value The value to evaluate.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the index at which `value` should be inserted
       *  into `array`.
       * @example
       *
       * var objects = [{ 'x': 4 }, { 'x': 5 }];
       *
       * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
       * // => 1
       *
       * // The `_.property` iteratee shorthand.
       * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
       * // => 1
       */
      function sortedLastIndexBy(array, value, iteratee) {
        return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
      }

      /**
       * This method is like `_.lastIndexOf` except that it performs a binary
       * search on a sorted `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {*} value The value to search for.
       * @returns {number} Returns the index of the matched value, else `-1`.
       * @example
       *
       * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
       * // => 3
       */
      function sortedLastIndexOf(array, value) {
        var length = array == null ? 0 : array.length;
        if (length) {
          var index = baseSortedIndex(array, value, true) - 1;
          if (eq(array[index], value)) {
            return index;
          }
        }
        return -1;
      }

      /**
       * This method is like `_.uniq` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniq([1, 1, 2]);
       * // => [1, 2]
       */
      function sortedUniq(array) {
        return (array && array.length)
          ? baseSortedUniq(array)
          : [];
      }

      /**
       * This method is like `_.uniqBy` except that it's designed and optimized
       * for sorted arrays.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
       * // => [1.1, 2.3]
       */
      function sortedUniqBy(array, iteratee) {
        return (array && array.length)
          ? baseSortedUniq(array, getIteratee(iteratee, 2))
          : [];
      }

      /**
       * Gets all but the first element of `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.tail([1, 2, 3]);
       * // => [2, 3]
       */
      function tail(array) {
        var length = array == null ? 0 : array.length;
        return length ? baseSlice(array, 1, length) : [];
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the beginning.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.take([1, 2, 3]);
       * // => [1]
       *
       * _.take([1, 2, 3], 2);
       * // => [1, 2]
       *
       * _.take([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.take([1, 2, 3], 0);
       * // => []
       */
      function take(array, n, guard) {
        if (!(array && array.length)) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        return baseSlice(array, 0, n < 0 ? 0 : n);
      }

      /**
       * Creates a slice of `array` with `n` elements taken from the end.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {number} [n=1] The number of elements to take.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * _.takeRight([1, 2, 3]);
       * // => [3]
       *
       * _.takeRight([1, 2, 3], 2);
       * // => [2, 3]
       *
       * _.takeRight([1, 2, 3], 5);
       * // => [1, 2, 3]
       *
       * _.takeRight([1, 2, 3], 0);
       * // => []
       */
      function takeRight(array, n, guard) {
        var length = array == null ? 0 : array.length;
        if (!length) {
          return [];
        }
        n = (guard || n === undefined) ? 1 : toInteger(n);
        n = length - n;
        return baseSlice(array, n < 0 ? 0 : n, length);
      }

      /**
       * Creates a slice of `array` with elements taken from the end. Elements are
       * taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': true },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': false }
       * ];
       *
       * _.takeRightWhile(users, function(o) { return !o.active; });
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
       * // => objects for ['pebbles']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeRightWhile(users, ['active', false]);
       * // => objects for ['fred', 'pebbles']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeRightWhile(users, 'active');
       * // => []
       */
      function takeRightWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3), false, true)
          : [];
      }

      /**
       * Creates a slice of `array` with elements taken from the beginning. Elements
       * are taken until `predicate` returns falsey. The predicate is invoked with
       * three arguments: (value, index, array).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Array
       * @param {Array} array The array to query.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the slice of `array`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'active': false },
       *   { 'user': 'fred',    'active': false },
       *   { 'user': 'pebbles', 'active': true }
       * ];
       *
       * _.takeWhile(users, function(o) { return !o.active; });
       * // => objects for ['barney', 'fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.takeWhile(users, { 'user': 'barney', 'active': false });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.takeWhile(users, ['active', false]);
       * // => objects for ['barney', 'fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.takeWhile(users, 'active');
       * // => []
       */
      function takeWhile(array, predicate) {
        return (array && array.length)
          ? baseWhile(array, getIteratee(predicate, 3))
          : [];
      }

      /**
       * Creates an array of unique values, in order, from all given arrays using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.union([2], [1, 2]);
       * // => [2, 1]
       */
      var union = baseRest(function(arrays) {
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
      });

      /**
       * This method is like `_.union` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which uniqueness is computed. Result values are chosen from the first
       * array in which the value occurs. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * _.unionBy([2.1], [1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      var unionBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.union` except that it accepts `comparator` which
       * is invoked to compare elements of `arrays`. Result values are chosen from
       * the first array in which the value occurs. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of combined values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.unionWith(objects, others, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var unionWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
      });

      /**
       * Creates a duplicate-free version of an array, using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons, in which only the first occurrence of each element
       * is kept. The order of result values is determined by the order they occur
       * in the array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniq([2, 1, 2]);
       * // => [2, 1]
       */
      function uniq(array) {
        return (array && array.length) ? baseUniq(array) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * uniqueness is computed. The order of result values is determined by the
       * order they occur in the array. The iteratee is invoked with one argument:
       * (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
       * // => [2.1, 1.2]
       *
       * // The `_.property` iteratee shorthand.
       * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 1 }, { 'x': 2 }]
       */
      function uniqBy(array, iteratee) {
        return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
      }

      /**
       * This method is like `_.uniq` except that it accepts `comparator` which
       * is invoked to compare elements of `array`. The order of result values is
       * determined by the order they occur in the array.The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new duplicate free array.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.uniqWith(objects, _.isEqual);
       * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
       */
      function uniqWith(array, comparator) {
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
      }

      /**
       * This method is like `_.zip` except that it accepts an array of grouped
       * elements and creates an array regrouping the elements to their pre-zip
       * configuration.
       *
       * @static
       * @memberOf _
       * @since 1.2.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       *
       * _.unzip(zipped);
       * // => [['a', 'b'], [1, 2], [true, false]]
       */
      function unzip(array) {
        if (!(array && array.length)) {
          return [];
        }
        var length = 0;
        array = arrayFilter(array, function(group) {
          if (isArrayLikeObject(group)) {
            length = nativeMax(group.length, length);
            return true;
          }
        });
        return baseTimes(length, function(index) {
          return arrayMap(array, baseProperty(index));
        });
      }

      /**
       * This method is like `_.unzip` except that it accepts `iteratee` to specify
       * how regrouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {Array} array The array of grouped elements to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  regrouped values.
       * @returns {Array} Returns the new array of regrouped elements.
       * @example
       *
       * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
       * // => [[1, 10, 100], [2, 20, 200]]
       *
       * _.unzipWith(zipped, _.add);
       * // => [3, 30, 300]
       */
      function unzipWith(array, iteratee) {
        if (!(array && array.length)) {
          return [];
        }
        var result = unzip(array);
        if (iteratee == null) {
          return result;
        }
        return arrayMap(result, function(group) {
          return apply(iteratee, undefined, group);
        });
      }

      /**
       * Creates an array excluding all given values using
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * for equality comparisons.
       *
       * **Note:** Unlike `_.pull`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {Array} array The array to inspect.
       * @param {...*} [values] The values to exclude.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.xor
       * @example
       *
       * _.without([2, 1, 2, 3], 1, 2);
       * // => [3]
       */
      var without = baseRest(function(array, values) {
        return isArrayLikeObject(array)
          ? baseDifference(array, values)
          : [];
      });

      /**
       * Creates an array of unique values that is the
       * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
       * of the given arrays. The order of result values is determined by the order
       * they occur in the arrays.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @returns {Array} Returns the new array of filtered values.
       * @see _.difference, _.without
       * @example
       *
       * _.xor([2, 1], [2, 3]);
       * // => [1, 3]
       */
      var xor = baseRest(function(arrays) {
        return baseXor(arrayFilter(arrays, isArrayLikeObject));
      });

      /**
       * This method is like `_.xor` except that it accepts `iteratee` which is
       * invoked for each element of each `arrays` to generate the criterion by
       * which by which they're compared. The order of result values is determined
       * by the order they occur in the arrays. The iteratee is invoked with one
       * argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
       * // => [1.2, 3.4]
       *
       * // The `_.property` iteratee shorthand.
       * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
       * // => [{ 'x': 2 }]
       */
      var xorBy = baseRest(function(arrays) {
        var iteratee = last(arrays);
        if (isArrayLikeObject(iteratee)) {
          iteratee = undefined;
        }
        return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
      });

      /**
       * This method is like `_.xor` except that it accepts `comparator` which is
       * invoked to compare elements of `arrays`. The order of result values is
       * determined by the order they occur in the arrays. The comparator is invoked
       * with two arguments: (arrVal, othVal).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Array
       * @param {...Array} [arrays] The arrays to inspect.
       * @param {Function} [comparator] The comparator invoked per element.
       * @returns {Array} Returns the new array of filtered values.
       * @example
       *
       * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
       * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
       *
       * _.xorWith(objects, others, _.isEqual);
       * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
       */
      var xorWith = baseRest(function(arrays) {
        var comparator = last(arrays);
        comparator = typeof comparator == 'function' ? comparator : undefined;
        return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
      });

      /**
       * Creates an array of grouped elements, the first of which contains the
       * first elements of the given arrays, the second of which contains the
       * second elements of the given arrays, and so on.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zip(['a', 'b'], [1, 2], [true, false]);
       * // => [['a', 1, true], ['b', 2, false]]
       */
      var zip = baseRest(unzip);

      /**
       * This method is like `_.fromPairs` except that it accepts two arrays,
       * one of property identifiers and one of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 0.4.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObject(['a', 'b'], [1, 2]);
       * // => { 'a': 1, 'b': 2 }
       */
      function zipObject(props, values) {
        return baseZipObject(props || [], values || [], assignValue);
      }

      /**
       * This method is like `_.zipObject` except that it supports property paths.
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Array
       * @param {Array} [props=[]] The property identifiers.
       * @param {Array} [values=[]] The property values.
       * @returns {Object} Returns the new object.
       * @example
       *
       * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
       * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
       */
      function zipObjectDeep(props, values) {
        return baseZipObject(props || [], values || [], baseSet);
      }

      /**
       * This method is like `_.zip` except that it accepts `iteratee` to specify
       * how grouped values should be combined. The iteratee is invoked with the
       * elements of each group: (...group).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Array
       * @param {...Array} [arrays] The arrays to process.
       * @param {Function} [iteratee=_.identity] The function to combine
       *  grouped values.
       * @returns {Array} Returns the new array of grouped elements.
       * @example
       *
       * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
       *   return a + b + c;
       * });
       * // => [111, 222]
       */
      var zipWith = baseRest(function(arrays) {
        var length = arrays.length,
            iteratee = length > 1 ? arrays[length - 1] : undefined;

        iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
        return unzipWith(arrays, iteratee);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Creates a `lodash` wrapper instance that wraps `value` with explicit method
       * chain sequences enabled. The result of such sequences must be unwrapped
       * with `_#value`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Seq
       * @param {*} value The value to wrap.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36 },
       *   { 'user': 'fred',    'age': 40 },
       *   { 'user': 'pebbles', 'age': 1 }
       * ];
       *
       * var youngest = _
       *   .chain(users)
       *   .sortBy('age')
       *   .map(function(o) {
       *     return o.user + ' is ' + o.age;
       *   })
       *   .head()
       *   .value();
       * // => 'pebbles is 1'
       */
      function chain(value) {
        var result = lodash(value);
        result.__chain__ = true;
        return result;
      }

      /**
       * This method invokes `interceptor` and returns `value`. The interceptor
       * is invoked with one argument; (value). The purpose of this method is to
       * "tap into" a method chain sequence in order to modify intermediate results.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns `value`.
       * @example
       *
       * _([1, 2, 3])
       *  .tap(function(array) {
       *    // Mutate input array.
       *    array.pop();
       *  })
       *  .reverse()
       *  .value();
       * // => [2, 1]
       */
      function tap(value, interceptor) {
        interceptor(value);
        return value;
      }

      /**
       * This method is like `_.tap` except that it returns the result of `interceptor`.
       * The purpose of this method is to "pass thru" values replacing intermediate
       * results in a method chain sequence.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Seq
       * @param {*} value The value to provide to `interceptor`.
       * @param {Function} interceptor The function to invoke.
       * @returns {*} Returns the result of `interceptor`.
       * @example
       *
       * _('  abc  ')
       *  .chain()
       *  .trim()
       *  .thru(function(value) {
       *    return [value];
       *  })
       *  .value();
       * // => ['abc']
       */
      function thru(value, interceptor) {
        return interceptor(value);
      }

      /**
       * This method is the wrapper version of `_.at`.
       *
       * @name at
       * @memberOf _
       * @since 1.0.0
       * @category Seq
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _(object).at(['a[0].b.c', 'a[1]']).value();
       * // => [3, 4]
       */
      var wrapperAt = flatRest(function(paths) {
        var length = paths.length,
            start = length ? paths[0] : 0,
            value = this.__wrapped__,
            interceptor = function(object) { return baseAt(object, paths); };

        if (length > 1 || this.__actions__.length ||
            !(value instanceof LazyWrapper) || !isIndex(start)) {
          return this.thru(interceptor);
        }
        value = value.slice(start, +start + (length ? 1 : 0));
        value.__actions__.push({
          'func': thru,
          'args': [interceptor],
          'thisArg': undefined
        });
        return new LodashWrapper(value, this.__chain__).thru(function(array) {
          if (length && !array.length) {
            array.push(undefined);
          }
          return array;
        });
      });

      /**
       * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
       *
       * @name chain
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 }
       * ];
       *
       * // A sequence without explicit chaining.
       * _(users).head();
       * // => { 'user': 'barney', 'age': 36 }
       *
       * // A sequence with explicit chaining.
       * _(users)
       *   .chain()
       *   .head()
       *   .pick('user')
       *   .value();
       * // => { 'user': 'barney' }
       */
      function wrapperChain() {
        return chain(this);
      }

      /**
       * Executes the chain sequence and returns the wrapped result.
       *
       * @name commit
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2];
       * var wrapped = _(array).push(3);
       *
       * console.log(array);
       * // => [1, 2]
       *
       * wrapped = wrapped.commit();
       * console.log(array);
       * // => [1, 2, 3]
       *
       * wrapped.last();
       * // => 3
       *
       * console.log(array);
       * // => [1, 2, 3]
       */
      function wrapperCommit() {
        return new LodashWrapper(this.value(), this.__chain__);
      }

      /**
       * Gets the next value on a wrapped object following the
       * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
       *
       * @name next
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the next iterator value.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 1 }
       *
       * wrapped.next();
       * // => { 'done': false, 'value': 2 }
       *
       * wrapped.next();
       * // => { 'done': true, 'value': undefined }
       */
      function wrapperNext() {
        if (this.__values__ === undefined) {
          this.__values__ = toArray(this.value());
        }
        var done = this.__index__ >= this.__values__.length,
            value = done ? undefined : this.__values__[this.__index__++];

        return { 'done': done, 'value': value };
      }

      /**
       * Enables the wrapper to be iterable.
       *
       * @name Symbol.iterator
       * @memberOf _
       * @since 4.0.0
       * @category Seq
       * @returns {Object} Returns the wrapper object.
       * @example
       *
       * var wrapped = _([1, 2]);
       *
       * wrapped[Symbol.iterator]() === wrapped;
       * // => true
       *
       * Array.from(wrapped);
       * // => [1, 2]
       */
      function wrapperToIterator() {
        return this;
      }

      /**
       * Creates a clone of the chain sequence planting `value` as the wrapped value.
       *
       * @name plant
       * @memberOf _
       * @since 3.2.0
       * @category Seq
       * @param {*} value The value to plant.
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var wrapped = _([1, 2]).map(square);
       * var other = wrapped.plant([3, 4]);
       *
       * other.value();
       * // => [9, 16]
       *
       * wrapped.value();
       * // => [1, 4]
       */
      function wrapperPlant(value) {
        var result,
            parent = this;

        while (parent instanceof baseLodash) {
          var clone = wrapperClone(parent);
          clone.__index__ = 0;
          clone.__values__ = undefined;
          if (result) {
            previous.__wrapped__ = clone;
          } else {
            result = clone;
          }
          var previous = clone;
          parent = parent.__wrapped__;
        }
        previous.__wrapped__ = value;
        return result;
      }

      /**
       * This method is the wrapper version of `_.reverse`.
       *
       * **Note:** This method mutates the wrapped array.
       *
       * @name reverse
       * @memberOf _
       * @since 0.1.0
       * @category Seq
       * @returns {Object} Returns the new `lodash` wrapper instance.
       * @example
       *
       * var array = [1, 2, 3];
       *
       * _(array).reverse().value()
       * // => [3, 2, 1]
       *
       * console.log(array);
       * // => [3, 2, 1]
       */
      function wrapperReverse() {
        var value = this.__wrapped__;
        if (value instanceof LazyWrapper) {
          var wrapped = value;
          if (this.__actions__.length) {
            wrapped = new LazyWrapper(this);
          }
          wrapped = wrapped.reverse();
          wrapped.__actions__.push({
            'func': thru,
            'args': [reverse],
            'thisArg': undefined
          });
          return new LodashWrapper(wrapped, this.__chain__);
        }
        return this.thru(reverse);
      }

      /**
       * Executes the chain sequence to resolve the unwrapped value.
       *
       * @name value
       * @memberOf _
       * @since 0.1.0
       * @alias toJSON, valueOf
       * @category Seq
       * @returns {*} Returns the resolved unwrapped value.
       * @example
       *
       * _([1, 2, 3]).value();
       * // => [1, 2, 3]
       */
      function wrapperValue() {
        return baseWrapperValue(this.__wrapped__, this.__actions__);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the number of times the key was returned by `iteratee`. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.countBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': 1, '6': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.countBy(['one', 'two', 'three'], 'length');
       * // => { '3': 2, '5': 1 }
       */
      var countBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          ++result[key];
        } else {
          baseAssignValue(result, key, 1);
        }
      });

      /**
       * Checks if `predicate` returns truthy for **all** elements of `collection`.
       * Iteration is stopped once `predicate` returns falsey. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * **Note:** This method returns `true` for
       * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
       * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
       * elements of empty collections.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if all elements pass the predicate check,
       *  else `false`.
       * @example
       *
       * _.every([true, 1, null, 'yes'], Boolean);
       * // => false
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.every(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.every(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.every(users, 'active');
       * // => false
       */
      function every(collection, predicate, guard) {
        var func = isArray(collection) ? arrayEvery : baseEvery;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning an array of all elements
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * **Note:** Unlike `_.remove`, this method returns a new array.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.reject
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * _.filter(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, { 'age': 36, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.filter(users, 'active');
       * // => objects for ['barney']
       */
      function filter(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Iterates over elements of `collection`, returning the first element
       * `predicate` returns truthy for. The predicate is invoked with three
       * arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=0] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': true },
       *   { 'user': 'fred',    'age': 40, 'active': false },
       *   { 'user': 'pebbles', 'age': 1,  'active': true }
       * ];
       *
       * _.find(users, function(o) { return o.age < 40; });
       * // => object for 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.find(users, { 'age': 1, 'active': true });
       * // => object for 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.find(users, ['active', false]);
       * // => object for 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.find(users, 'active');
       * // => object for 'barney'
       */
      var find = createFind(findIndex);

      /**
       * This method is like `_.find` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param {number} [fromIndex=collection.length-1] The index to search from.
       * @returns {*} Returns the matched element, else `undefined`.
       * @example
       *
       * _.findLast([1, 2, 3, 4], function(n) {
       *   return n % 2 == 1;
       * });
       * // => 3
       */
      var findLast = createFind(findLastIndex);

      /**
       * Creates a flattened array of values by running each element in `collection`
       * thru `iteratee` and flattening the mapped results. The iteratee is invoked
       * with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [n, n];
       * }
       *
       * _.flatMap([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMap(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), 1);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDeep([1, 2], duplicate);
       * // => [1, 1, 2, 2]
       */
      function flatMapDeep(collection, iteratee) {
        return baseFlatten(map(collection, iteratee), INFINITY);
      }

      /**
       * This method is like `_.flatMap` except that it recursively flattens the
       * mapped results up to `depth` times.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {number} [depth=1] The maximum recursion depth.
       * @returns {Array} Returns the new flattened array.
       * @example
       *
       * function duplicate(n) {
       *   return [[[n, n]]];
       * }
       *
       * _.flatMapDepth([1, 2], duplicate, 2);
       * // => [[1, 1], [2, 2]]
       */
      function flatMapDepth(collection, iteratee, depth) {
        depth = depth === undefined ? 1 : toInteger(depth);
        return baseFlatten(map(collection, iteratee), depth);
      }

      /**
       * Iterates over elements of `collection` and invokes `iteratee` for each element.
       * The iteratee is invoked with three arguments: (value, index|key, collection).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * **Note:** As with other "Collections" methods, objects with a "length"
       * property are iterated like arrays. To avoid this behavior use `_.forIn`
       * or `_.forOwn` for object iteration.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @alias each
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEachRight
       * @example
       *
       * _.forEach([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `1` then `2`.
       *
       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forEach(collection, iteratee) {
        var func = isArray(collection) ? arrayEach : baseEach;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forEach` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @alias eachRight
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array|Object} Returns `collection`.
       * @see _.forEach
       * @example
       *
       * _.forEachRight([1, 2], function(value) {
       *   console.log(value);
       * });
       * // => Logs `2` then `1`.
       */
      function forEachRight(collection, iteratee) {
        var func = isArray(collection) ? arrayEachRight : baseEachRight;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The order of grouped values
       * is determined by the order they occur in `collection`. The corresponding
       * value of each key is an array of elements responsible for generating the
       * key. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * _.groupBy([6.1, 4.2, 6.3], Math.floor);
       * // => { '4': [4.2], '6': [6.1, 6.3] }
       *
       * // The `_.property` iteratee shorthand.
       * _.groupBy(['one', 'two', 'three'], 'length');
       * // => { '3': ['one', 'two'], '5': ['three'] }
       */
      var groupBy = createAggregator(function(result, value, key) {
        if (hasOwnProperty.call(result, key)) {
          result[key].push(value);
        } else {
          baseAssignValue(result, key, [value]);
        }
      });

      /**
       * Checks if `value` is in `collection`. If `collection` is a string, it's
       * checked for a substring of `value`, otherwise
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * is used for equality comparisons. If `fromIndex` is negative, it's used as
       * the offset from the end of `collection`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @param {*} value The value to search for.
       * @param {number} [fromIndex=0] The index to search from.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {boolean} Returns `true` if `value` is found, else `false`.
       * @example
       *
       * _.includes([1, 2, 3], 1);
       * // => true
       *
       * _.includes([1, 2, 3], 1, 2);
       * // => false
       *
       * _.includes({ 'a': 1, 'b': 2 }, 1);
       * // => true
       *
       * _.includes('abcd', 'bc');
       * // => true
       */
      function includes(collection, value, fromIndex, guard) {
        collection = isArrayLike(collection) ? collection : values(collection);
        fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

        var length = collection.length;
        if (fromIndex < 0) {
          fromIndex = nativeMax(length + fromIndex, 0);
        }
        return isString(collection)
          ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
          : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
      }

      /**
       * Invokes the method at `path` of each element in `collection`, returning
       * an array of the results of each invoked method. Any additional arguments
       * are provided to each invoked method. If `path` is a function, it's invoked
       * for, and `this` bound to, each element in `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array|Function|string} path The path of the method to invoke or
       *  the function invoked per iteration.
       * @param {...*} [args] The arguments to invoke each method with.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
       * // => [[1, 5, 7], [1, 2, 3]]
       *
       * _.invokeMap([123, 456], String.prototype.split, '');
       * // => [['1', '2', '3'], ['4', '5', '6']]
       */
      var invokeMap = baseRest(function(collection, path, args) {
        var index = -1,
            isFunc = typeof path == 'function',
            result = isArrayLike(collection) ? Array(collection.length) : [];

        baseEach(collection, function(value) {
          result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
        });
        return result;
      });

      /**
       * Creates an object composed of keys generated from the results of running
       * each element of `collection` thru `iteratee`. The corresponding value of
       * each key is the last element responsible for generating the key. The
       * iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
       * @returns {Object} Returns the composed aggregate object.
       * @example
       *
       * var array = [
       *   { 'dir': 'left', 'code': 97 },
       *   { 'dir': 'right', 'code': 100 }
       * ];
       *
       * _.keyBy(array, function(o) {
       *   return String.fromCharCode(o.code);
       * });
       * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
       *
       * _.keyBy(array, 'dir');
       * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
       */
      var keyBy = createAggregator(function(result, value, key) {
        baseAssignValue(result, key, value);
      });

      /**
       * Creates an array of values by running each element in `collection` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
       *
       * The guarded methods are:
       * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
       * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
       * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
       * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new mapped array.
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * _.map([4, 8], square);
       * // => [16, 64]
       *
       * _.map({ 'a': 4, 'b': 8 }, square);
       * // => [16, 64] (iteration order is not guaranteed)
       *
       * var users = [
       *   { 'user': 'barney' },
       *   { 'user': 'fred' }
       * ];
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, 'user');
       * // => ['barney', 'fred']
       */
      function map(collection, iteratee) {
        var func = isArray(collection) ? arrayMap : baseMap;
        return func(collection, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.sortBy` except that it allows specifying the sort
       * orders of the iteratees to sort by. If `orders` is unspecified, all values
       * are sorted in ascending order. Otherwise, specify an order of "desc" for
       * descending or "asc" for ascending sort order of corresponding values.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @param {string[]} [orders] The sort orders of `iteratees`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 34 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 36 }
       * ];
       *
       * // Sort by `user` in ascending order and by `age` in descending order.
       * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       */
      function orderBy(collection, iteratees, orders, guard) {
        if (collection == null) {
          return [];
        }
        if (!isArray(iteratees)) {
          iteratees = iteratees == null ? [] : [iteratees];
        }
        orders = guard ? undefined : orders;
        if (!isArray(orders)) {
          orders = orders == null ? [] : [orders];
        }
        return baseOrderBy(collection, iteratees, orders);
      }

      /**
       * Creates an array of elements split into two groups, the first of which
       * contains elements `predicate` returns truthy for, the second of which
       * contains elements `predicate` returns falsey for. The predicate is
       * invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of grouped elements.
       * @example
       *
       * var users = [
       *   { 'user': 'barney',  'age': 36, 'active': false },
       *   { 'user': 'fred',    'age': 40, 'active': true },
       *   { 'user': 'pebbles', 'age': 1,  'active': false }
       * ];
       *
       * _.partition(users, function(o) { return o.active; });
       * // => objects for [['fred'], ['barney', 'pebbles']]
       *
       * // The `_.matches` iteratee shorthand.
       * _.partition(users, { 'age': 1, 'active': false });
       * // => objects for [['pebbles'], ['barney', 'fred']]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.partition(users, ['active', false]);
       * // => objects for [['barney', 'pebbles'], ['fred']]
       *
       * // The `_.property` iteratee shorthand.
       * _.partition(users, 'active');
       * // => objects for [['fred'], ['barney', 'pebbles']]
       */
      var partition = createAggregator(function(result, value, key) {
        result[key ? 0 : 1].push(value);
      }, function() { return [[], []]; });

      /**
       * Reduces `collection` to a value which is the accumulated result of running
       * each element in `collection` thru `iteratee`, where each successive
       * invocation is supplied the return value of the previous. If `accumulator`
       * is not given, the first element of `collection` is used as the initial
       * value. The iteratee is invoked with four arguments:
       * (accumulator, value, index|key, collection).
       *
       * Many lodash methods are guarded to work as iteratees for methods like
       * `_.reduce`, `_.reduceRight`, and `_.transform`.
       *
       * The guarded methods are:
       * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
       * and `sortBy`
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduceRight
       * @example
       *
       * _.reduce([1, 2], function(sum, n) {
       *   return sum + n;
       * }, 0);
       * // => 3
       *
       * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       *   return result;
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
       */
      function reduce(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduce : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
      }

      /**
       * This method is like `_.reduce` except that it iterates over elements of
       * `collection` from right to left.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The initial value.
       * @returns {*} Returns the accumulated value.
       * @see _.reduce
       * @example
       *
       * var array = [[0, 1], [2, 3], [4, 5]];
       *
       * _.reduceRight(array, function(flattened, other) {
       *   return flattened.concat(other);
       * }, []);
       * // => [4, 5, 2, 3, 0, 1]
       */
      function reduceRight(collection, iteratee, accumulator) {
        var func = isArray(collection) ? arrayReduceRight : baseReduce,
            initAccum = arguments.length < 3;

        return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
      }

      /**
       * The opposite of `_.filter`; this method returns the elements of `collection`
       * that `predicate` does **not** return truthy for.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the new filtered array.
       * @see _.filter
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': false },
       *   { 'user': 'fred',   'age': 40, 'active': true }
       * ];
       *
       * _.reject(users, function(o) { return !o.active; });
       * // => objects for ['fred']
       *
       * // The `_.matches` iteratee shorthand.
       * _.reject(users, { 'age': 40, 'active': true });
       * // => objects for ['barney']
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.reject(users, ['active', false]);
       * // => objects for ['fred']
       *
       * // The `_.property` iteratee shorthand.
       * _.reject(users, 'active');
       * // => objects for ['barney']
       */
      function reject(collection, predicate) {
        var func = isArray(collection) ? arrayFilter : baseFilter;
        return func(collection, negate(getIteratee(predicate, 3)));
      }

      /**
       * Gets a random element from `collection`.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @returns {*} Returns the random element.
       * @example
       *
       * _.sample([1, 2, 3, 4]);
       * // => 2
       */
      function sample(collection) {
        var func = isArray(collection) ? arraySample : baseSample;
        return func(collection);
      }

      /**
       * Gets `n` random elements at unique keys from `collection` up to the
       * size of `collection`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Collection
       * @param {Array|Object} collection The collection to sample.
       * @param {number} [n=1] The number of elements to sample.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the random elements.
       * @example
       *
       * _.sampleSize([1, 2, 3], 2);
       * // => [3, 1]
       *
       * _.sampleSize([1, 2, 3], 4);
       * // => [2, 3, 1]
       */
      function sampleSize(collection, n, guard) {
        if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        var func = isArray(collection) ? arraySampleSize : baseSampleSize;
        return func(collection, n);
      }

      /**
       * Creates an array of shuffled values, using a version of the
       * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to shuffle.
       * @returns {Array} Returns the new shuffled array.
       * @example
       *
       * _.shuffle([1, 2, 3, 4]);
       * // => [4, 1, 3, 2]
       */
      function shuffle(collection) {
        var func = isArray(collection) ? arrayShuffle : baseShuffle;
        return func(collection);
      }

      /**
       * Gets the size of `collection` by returning its length for array-like
       * values or the number of own enumerable string keyed properties for objects.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object|string} collection The collection to inspect.
       * @returns {number} Returns the collection size.
       * @example
       *
       * _.size([1, 2, 3]);
       * // => 3
       *
       * _.size({ 'a': 1, 'b': 2 });
       * // => 2
       *
       * _.size('pebbles');
       * // => 7
       */
      function size(collection) {
        if (collection == null) {
          return 0;
        }
        if (isArrayLike(collection)) {
          return isString(collection) ? stringSize(collection) : collection.length;
        }
        var tag = getTag(collection);
        if (tag == mapTag || tag == setTag) {
          return collection.size;
        }
        return baseKeys(collection).length;
      }

      /**
       * Checks if `predicate` returns truthy for **any** element of `collection`.
       * Iteration is stopped once `predicate` returns truthy. The predicate is
       * invoked with three arguments: (value, index|key, collection).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {boolean} Returns `true` if any element passes the predicate check,
       *  else `false`.
       * @example
       *
       * _.some([null, 0, 'yes', false], Boolean);
       * // => true
       *
       * var users = [
       *   { 'user': 'barney', 'active': true },
       *   { 'user': 'fred',   'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.some(users, { 'user': 'barney', 'active': false });
       * // => false
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.some(users, ['active', false]);
       * // => true
       *
       * // The `_.property` iteratee shorthand.
       * _.some(users, 'active');
       * // => true
       */
      function some(collection, predicate, guard) {
        var func = isArray(collection) ? arraySome : baseSome;
        if (guard && isIterateeCall(collection, predicate, guard)) {
          predicate = undefined;
        }
        return func(collection, getIteratee(predicate, 3));
      }

      /**
       * Creates an array of elements, sorted in ascending order by the results of
       * running each element in a collection thru each iteratee. This method
       * performs a stable sort, that is, it preserves the original sort order of
       * equal elements. The iteratees are invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Collection
       * @param {Array|Object} collection The collection to iterate over.
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to sort by.
       * @returns {Array} Returns the new sorted array.
       * @example
       *
       * var users = [
       *   { 'user': 'fred',   'age': 48 },
       *   { 'user': 'barney', 'age': 36 },
       *   { 'user': 'fred',   'age': 40 },
       *   { 'user': 'barney', 'age': 34 }
       * ];
       *
       * _.sortBy(users, [function(o) { return o.user; }]);
       * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
       *
       * _.sortBy(users, ['user', 'age']);
       * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
       */
      var sortBy = baseRest(function(collection, iteratees) {
        if (collection == null) {
          return [];
        }
        var length = iteratees.length;
        if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
          iteratees = [];
        } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
          iteratees = [iteratees[0]];
        }
        return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
      });

      /*------------------------------------------------------------------------*/

      /**
       * Gets the timestamp of the number of milliseconds that have elapsed since
       * the Unix epoch (1 January 1970 00:00:00 UTC).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Date
       * @returns {number} Returns the timestamp.
       * @example
       *
       * _.defer(function(stamp) {
       *   console.log(_.now() - stamp);
       * }, _.now());
       * // => Logs the number of milliseconds it took for the deferred invocation.
       */
      var now = ctxNow || function() {
        return root.Date.now();
      };

      /*------------------------------------------------------------------------*/

      /**
       * The opposite of `_.before`; this method creates a function that invokes
       * `func` once it's called `n` or more times.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {number} n The number of calls before `func` is invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var saves = ['profile', 'settings'];
       *
       * var done = _.after(saves.length, function() {
       *   console.log('done saving!');
       * });
       *
       * _.forEach(saves, function(type) {
       *   asyncSave({ 'type': type, 'complete': done });
       * });
       * // => Logs 'done saving!' after the two async saves have completed.
       */
      function after(n, func) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n < 1) {
            return func.apply(this, arguments);
          }
        };
      }

      /**
       * Creates a function that invokes `func`, with up to `n` arguments,
       * ignoring any additional arguments.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @param {number} [n=func.length] The arity cap.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.ary(parseInt, 1));
       * // => [6, 8, 10]
       */
      function ary(func, n, guard) {
        n = guard ? undefined : n;
        n = (func && n == null) ? func.length : n;
        return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
      }

      /**
       * Creates a function that invokes `func`, with the `this` binding and arguments
       * of the created function, while it's called less than `n` times. Subsequent
       * calls to the created function return the result of the last `func` invocation.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {number} n The number of calls at which `func` is no longer invoked.
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * jQuery(element).on('click', _.before(5, addContactToList));
       * // => Allows adding up to 4 contacts to the list.
       */
      function before(n, func) {
        var result;
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        n = toInteger(n);
        return function() {
          if (--n > 0) {
            result = func.apply(this, arguments);
          }
          if (n <= 1) {
            func = undefined;
          }
          return result;
        };
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of `thisArg`
       * and `partials` prepended to the arguments it receives.
       *
       * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for partially applied arguments.
       *
       * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
       * property of bound functions.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to bind.
       * @param {*} thisArg The `this` binding of `func`.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * function greet(greeting, punctuation) {
       *   return greeting + ' ' + this.user + punctuation;
       * }
       *
       * var object = { 'user': 'fred' };
       *
       * var bound = _.bind(greet, object, 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bind(greet, object, _, '!');
       * bound('hi');
       * // => 'hi fred!'
       */
      var bind = baseRest(function(func, thisArg, partials) {
        var bitmask = WRAP_BIND_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bind));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(func, bitmask, thisArg, partials, holders);
      });

      /**
       * Creates a function that invokes the method at `object[key]` with `partials`
       * prepended to the arguments it receives.
       *
       * This method differs from `_.bind` by allowing bound functions to reference
       * methods that may be redefined or don't yet exist. See
       * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
       * for more details.
       *
       * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Function
       * @param {Object} object The object to invoke the method on.
       * @param {string} key The key of the method.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new bound function.
       * @example
       *
       * var object = {
       *   'user': 'fred',
       *   'greet': function(greeting, punctuation) {
       *     return greeting + ' ' + this.user + punctuation;
       *   }
       * };
       *
       * var bound = _.bindKey(object, 'greet', 'hi');
       * bound('!');
       * // => 'hi fred!'
       *
       * object.greet = function(greeting, punctuation) {
       *   return greeting + 'ya ' + this.user + punctuation;
       * };
       *
       * bound('!');
       * // => 'hiya fred!'
       *
       * // Bound with placeholders.
       * var bound = _.bindKey(object, 'greet', _, '!');
       * bound('hi');
       * // => 'hiya fred!'
       */
      var bindKey = baseRest(function(object, key, partials) {
        var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
        if (partials.length) {
          var holders = replaceHolders(partials, getHolder(bindKey));
          bitmask |= WRAP_PARTIAL_FLAG;
        }
        return createWrap(key, bitmask, object, partials, holders);
      });

      /**
       * Creates a function that accepts arguments of `func` and either invokes
       * `func` returning its result, if at least `arity` number of arguments have
       * been provided, or returns a function that accepts the remaining `func`
       * arguments, and so on. The arity of `func` may be specified if `func.length`
       * is not sufficient.
       *
       * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
       * may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curry(abc);
       *
       * curried(1)(2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2)(3);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(1)(_, 3)(2);
       * // => [1, 2, 3]
       */
      function curry(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curry.placeholder;
        return result;
      }

      /**
       * This method is like `_.curry` except that arguments are applied to `func`
       * in the manner of `_.partialRight` instead of `_.partial`.
       *
       * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for provided arguments.
       *
       * **Note:** This method doesn't set the "length" property of curried functions.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to curry.
       * @param {number} [arity=func.length] The arity of `func`.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the new curried function.
       * @example
       *
       * var abc = function(a, b, c) {
       *   return [a, b, c];
       * };
       *
       * var curried = _.curryRight(abc);
       *
       * curried(3)(2)(1);
       * // => [1, 2, 3]
       *
       * curried(2, 3)(1);
       * // => [1, 2, 3]
       *
       * curried(1, 2, 3);
       * // => [1, 2, 3]
       *
       * // Curried with placeholders.
       * curried(3)(1, _)(2);
       * // => [1, 2, 3]
       */
      function curryRight(func, arity, guard) {
        arity = guard ? undefined : arity;
        var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
        result.placeholder = curryRight.placeholder;
        return result;
      }

      /**
       * Creates a debounced function that delays invoking `func` until after `wait`
       * milliseconds have elapsed since the last time the debounced function was
       * invoked. The debounced function comes with a `cancel` method to cancel
       * delayed `func` invocations and a `flush` method to immediately invoke them.
       * Provide `options` to indicate whether `func` should be invoked on the
       * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
       * with the last arguments provided to the debounced function. Subsequent
       * calls to the debounced function return the result of the last `func`
       * invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the debounced function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.debounce` and `_.throttle`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to debounce.
       * @param {number} [wait=0] The number of milliseconds to delay.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=false]
       *  Specify invoking on the leading edge of the timeout.
       * @param {number} [options.maxWait]
       *  The maximum time `func` is allowed to be delayed before it's invoked.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new debounced function.
       * @example
       *
       * // Avoid costly calculations while the window size is in flux.
       * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
       *
       * // Invoke `sendMail` when clicked, debouncing subsequent calls.
       * jQuery(element).on('click', _.debounce(sendMail, 300, {
       *   'leading': true,
       *   'trailing': false
       * }));
       *
       * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
       * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
       * var source = new EventSource('/stream');
       * jQuery(source).on('message', debounced);
       *
       * // Cancel the trailing debounced invocation.
       * jQuery(window).on('popstate', debounced.cancel);
       */
      function debounce(func, wait, options) {
        var lastArgs,
            lastThis,
            maxWait,
            result,
            timerId,
            lastCallTime,
            lastInvokeTime = 0,
            leading = false,
            maxing = false,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        wait = toNumber(wait) || 0;
        if (isObject(options)) {
          leading = !!options.leading;
          maxing = 'maxWait' in options;
          maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }

        function invokeFunc(time) {
          var args = lastArgs,
              thisArg = lastThis;

          lastArgs = lastThis = undefined;
          lastInvokeTime = time;
          result = func.apply(thisArg, args);
          return result;
        }

        function leadingEdge(time) {
          // Reset any `maxWait` timer.
          lastInvokeTime = time;
          // Start the timer for the trailing edge.
          timerId = setTimeout(timerExpired, wait);
          // Invoke the leading edge.
          return leading ? invokeFunc(time) : result;
        }

        function remainingWait(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime,
              timeWaiting = wait - timeSinceLastCall;

          return maxing
            ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
            : timeWaiting;
        }

        function shouldInvoke(time) {
          var timeSinceLastCall = time - lastCallTime,
              timeSinceLastInvoke = time - lastInvokeTime;

          // Either this is the first call, activity has stopped and we're at the
          // trailing edge, the system time has gone backwards and we're treating
          // it as the trailing edge, or we've hit the `maxWait` limit.
          return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
            (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
        }

        function timerExpired() {
          var time = now();
          if (shouldInvoke(time)) {
            return trailingEdge(time);
          }
          // Restart the timer.
          timerId = setTimeout(timerExpired, remainingWait(time));
        }

        function trailingEdge(time) {
          timerId = undefined;

          // Only invoke if we have `lastArgs` which means `func` has been
          // debounced at least once.
          if (trailing && lastArgs) {
            return invokeFunc(time);
          }
          lastArgs = lastThis = undefined;
          return result;
        }

        function cancel() {
          if (timerId !== undefined) {
            clearTimeout(timerId);
          }
          lastInvokeTime = 0;
          lastArgs = lastCallTime = lastThis = timerId = undefined;
        }

        function flush() {
          return timerId === undefined ? result : trailingEdge(now());
        }

        function debounced() {
          var time = now(),
              isInvoking = shouldInvoke(time);

          lastArgs = arguments;
          lastThis = this;
          lastCallTime = time;

          if (isInvoking) {
            if (timerId === undefined) {
              return leadingEdge(lastCallTime);
            }
            if (maxing) {
              // Handle invocations in a tight loop.
              timerId = setTimeout(timerExpired, wait);
              return invokeFunc(lastCallTime);
            }
          }
          if (timerId === undefined) {
            timerId = setTimeout(timerExpired, wait);
          }
          return result;
        }
        debounced.cancel = cancel;
        debounced.flush = flush;
        return debounced;
      }

      /**
       * Defers invoking the `func` until the current call stack has cleared. Any
       * additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to defer.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.defer(function(text) {
       *   console.log(text);
       * }, 'deferred');
       * // => Logs 'deferred' after one millisecond.
       */
      var defer = baseRest(function(func, args) {
        return baseDelay(func, 1, args);
      });

      /**
       * Invokes `func` after `wait` milliseconds. Any additional arguments are
       * provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to delay.
       * @param {number} wait The number of milliseconds to delay invocation.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {number} Returns the timer id.
       * @example
       *
       * _.delay(function(text) {
       *   console.log(text);
       * }, 1000, 'later');
       * // => Logs 'later' after one second.
       */
      var delay = baseRest(function(func, wait, args) {
        return baseDelay(func, toNumber(wait) || 0, args);
      });

      /**
       * Creates a function that invokes `func` with arguments reversed.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to flip arguments for.
       * @returns {Function} Returns the new flipped function.
       * @example
       *
       * var flipped = _.flip(function() {
       *   return _.toArray(arguments);
       * });
       *
       * flipped('a', 'b', 'c', 'd');
       * // => ['d', 'c', 'b', 'a']
       */
      function flip(func) {
        return createWrap(func, WRAP_FLIP_FLAG);
      }

      /**
       * Creates a function that memoizes the result of `func`. If `resolver` is
       * provided, it determines the cache key for storing the result based on the
       * arguments provided to the memoized function. By default, the first argument
       * provided to the memoized function is used as the map cache key. The `func`
       * is invoked with the `this` binding of the memoized function.
       *
       * **Note:** The cache is exposed as the `cache` property on the memoized
       * function. Its creation may be customized by replacing the `_.memoize.Cache`
       * constructor with one whose instances implement the
       * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
       * method interface of `clear`, `delete`, `get`, `has`, and `set`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to have its output memoized.
       * @param {Function} [resolver] The function to resolve the cache key.
       * @returns {Function} Returns the new memoized function.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       * var other = { 'c': 3, 'd': 4 };
       *
       * var values = _.memoize(_.values);
       * values(object);
       * // => [1, 2]
       *
       * values(other);
       * // => [3, 4]
       *
       * object.a = 2;
       * values(object);
       * // => [1, 2]
       *
       * // Modify the result cache.
       * values.cache.set(object, ['a', 'b']);
       * values(object);
       * // => ['a', 'b']
       *
       * // Replace `_.memoize.Cache`.
       * _.memoize.Cache = WeakMap;
       */
      function memoize(func, resolver) {
        if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        var memoized = function() {
          var args = arguments,
              key = resolver ? resolver.apply(this, args) : args[0],
              cache = memoized.cache;

          if (cache.has(key)) {
            return cache.get(key);
          }
          var result = func.apply(this, args);
          memoized.cache = cache.set(key, result) || cache;
          return result;
        };
        memoized.cache = new (memoize.Cache || MapCache);
        return memoized;
      }

      // Expose `MapCache`.
      memoize.Cache = MapCache;

      /**
       * Creates a function that negates the result of the predicate `func`. The
       * `func` predicate is invoked with the `this` binding and arguments of the
       * created function.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} predicate The predicate to negate.
       * @returns {Function} Returns the new negated function.
       * @example
       *
       * function isEven(n) {
       *   return n % 2 == 0;
       * }
       *
       * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
       * // => [1, 3, 5]
       */
      function negate(predicate) {
        if (typeof predicate != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return function() {
          var args = arguments;
          switch (args.length) {
            case 0: return !predicate.call(this);
            case 1: return !predicate.call(this, args[0]);
            case 2: return !predicate.call(this, args[0], args[1]);
            case 3: return !predicate.call(this, args[0], args[1], args[2]);
          }
          return !predicate.apply(this, args);
        };
      }

      /**
       * Creates a function that is restricted to invoking `func` once. Repeat calls
       * to the function return the value of the first invocation. The `func` is
       * invoked with the `this` binding and arguments of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to restrict.
       * @returns {Function} Returns the new restricted function.
       * @example
       *
       * var initialize = _.once(createApplication);
       * initialize();
       * initialize();
       * // => `createApplication` is invoked once
       */
      function once(func) {
        return before(2, func);
      }

      /**
       * Creates a function that invokes `func` with its arguments transformed.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Function
       * @param {Function} func The function to wrap.
       * @param {...(Function|Function[])} [transforms=[_.identity]]
       *  The argument transforms.
       * @returns {Function} Returns the new function.
       * @example
       *
       * function doubled(n) {
       *   return n * 2;
       * }
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var func = _.overArgs(function(x, y) {
       *   return [x, y];
       * }, [square, doubled]);
       *
       * func(9, 3);
       * // => [81, 6]
       *
       * func(10, 5);
       * // => [100, 10]
       */
      var overArgs = castRest(function(func, transforms) {
        transforms = (transforms.length == 1 && isArray(transforms[0]))
          ? arrayMap(transforms[0], baseUnary(getIteratee()))
          : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

        var funcsLength = transforms.length;
        return baseRest(function(args) {
          var index = -1,
              length = nativeMin(args.length, funcsLength);

          while (++index < length) {
            args[index] = transforms[index].call(this, args[index]);
          }
          return apply(func, this, args);
        });
      });

      /**
       * Creates a function that invokes `func` with `partials` prepended to the
       * arguments it receives. This method is like `_.bind` except it does **not**
       * alter the `this` binding.
       *
       * The `_.partial.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 0.2.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var sayHelloTo = _.partial(greet, 'hello');
       * sayHelloTo('fred');
       * // => 'hello fred'
       *
       * // Partially applied with placeholders.
       * var greetFred = _.partial(greet, _, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       */
      var partial = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partial));
        return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
      });

      /**
       * This method is like `_.partial` except that partially applied arguments
       * are appended to the arguments it receives.
       *
       * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
       * builds, may be used as a placeholder for partially applied arguments.
       *
       * **Note:** This method doesn't set the "length" property of partially
       * applied functions.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Function
       * @param {Function} func The function to partially apply arguments to.
       * @param {...*} [partials] The arguments to be partially applied.
       * @returns {Function} Returns the new partially applied function.
       * @example
       *
       * function greet(greeting, name) {
       *   return greeting + ' ' + name;
       * }
       *
       * var greetFred = _.partialRight(greet, 'fred');
       * greetFred('hi');
       * // => 'hi fred'
       *
       * // Partially applied with placeholders.
       * var sayHelloTo = _.partialRight(greet, 'hello', _);
       * sayHelloTo('fred');
       * // => 'hello fred'
       */
      var partialRight = baseRest(function(func, partials) {
        var holders = replaceHolders(partials, getHolder(partialRight));
        return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
      });

      /**
       * Creates a function that invokes `func` with arguments arranged according
       * to the specified `indexes` where the argument value at the first index is
       * provided as the first argument, the argument value at the second index is
       * provided as the second argument, and so on.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Function
       * @param {Function} func The function to rearrange arguments for.
       * @param {...(number|number[])} indexes The arranged argument indexes.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var rearged = _.rearg(function(a, b, c) {
       *   return [a, b, c];
       * }, [2, 0, 1]);
       *
       * rearged('b', 'c', 'a')
       * // => ['a', 'b', 'c']
       */
      var rearg = flatRest(function(func, indexes) {
        return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
      });

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * created function and arguments from `start` and beyond provided as
       * an array.
       *
       * **Note:** This method is based on the
       * [rest parameter](https://mdn.io/rest_parameters).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to apply a rest parameter to.
       * @param {number} [start=func.length-1] The start position of the rest parameter.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.rest(function(what, names) {
       *   return what + ' ' + _.initial(names).join(', ') +
       *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
       * });
       *
       * say('hello', 'fred', 'barney', 'pebbles');
       * // => 'hello fred, barney, & pebbles'
       */
      function rest(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start === undefined ? start : toInteger(start);
        return baseRest(func, start);
      }

      /**
       * Creates a function that invokes `func` with the `this` binding of the
       * create function and an array of arguments much like
       * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
       *
       * **Note:** This method is based on the
       * [spread operator](https://mdn.io/spread_operator).
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Function
       * @param {Function} func The function to spread arguments over.
       * @param {number} [start=0] The start position of the spread.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var say = _.spread(function(who, what) {
       *   return who + ' says ' + what;
       * });
       *
       * say(['fred', 'hello']);
       * // => 'fred says hello'
       *
       * var numbers = Promise.all([
       *   Promise.resolve(40),
       *   Promise.resolve(36)
       * ]);
       *
       * numbers.then(_.spread(function(x, y) {
       *   return x + y;
       * }));
       * // => a Promise of 76
       */
      function spread(func, start) {
        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        start = start == null ? 0 : nativeMax(toInteger(start), 0);
        return baseRest(function(args) {
          var array = args[start],
              otherArgs = castSlice(args, 0, start);

          if (array) {
            arrayPush(otherArgs, array);
          }
          return apply(func, this, otherArgs);
        });
      }

      /**
       * Creates a throttled function that only invokes `func` at most once per
       * every `wait` milliseconds. The throttled function comes with a `cancel`
       * method to cancel delayed `func` invocations and a `flush` method to
       * immediately invoke them. Provide `options` to indicate whether `func`
       * should be invoked on the leading and/or trailing edge of the `wait`
       * timeout. The `func` is invoked with the last arguments provided to the
       * throttled function. Subsequent calls to the throttled function return the
       * result of the last `func` invocation.
       *
       * **Note:** If `leading` and `trailing` options are `true`, `func` is
       * invoked on the trailing edge of the timeout only if the throttled function
       * is invoked more than once during the `wait` timeout.
       *
       * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
       * until to the next tick, similar to `setTimeout` with a timeout of `0`.
       *
       * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
       * for details over the differences between `_.throttle` and `_.debounce`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {Function} func The function to throttle.
       * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.leading=true]
       *  Specify invoking on the leading edge of the timeout.
       * @param {boolean} [options.trailing=true]
       *  Specify invoking on the trailing edge of the timeout.
       * @returns {Function} Returns the new throttled function.
       * @example
       *
       * // Avoid excessively updating the position while scrolling.
       * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
       *
       * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
       * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
       * jQuery(element).on('click', throttled);
       *
       * // Cancel the trailing throttled invocation.
       * jQuery(window).on('popstate', throttled.cancel);
       */
      function throttle(func, wait, options) {
        var leading = true,
            trailing = true;

        if (typeof func != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        if (isObject(options)) {
          leading = 'leading' in options ? !!options.leading : leading;
          trailing = 'trailing' in options ? !!options.trailing : trailing;
        }
        return debounce(func, wait, {
          'leading': leading,
          'maxWait': wait,
          'trailing': trailing
        });
      }

      /**
       * Creates a function that accepts up to one argument, ignoring any
       * additional arguments.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Function
       * @param {Function} func The function to cap arguments for.
       * @returns {Function} Returns the new capped function.
       * @example
       *
       * _.map(['6', '8', '10'], _.unary(parseInt));
       * // => [6, 8, 10]
       */
      function unary(func) {
        return ary(func, 1);
      }

      /**
       * Creates a function that provides `value` to `wrapper` as its first
       * argument. Any additional arguments provided to the function are appended
       * to those provided to the `wrapper`. The wrapper is invoked with the `this`
       * binding of the created function.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Function
       * @param {*} value The value to wrap.
       * @param {Function} [wrapper=identity] The wrapper function.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var p = _.wrap(_.escape, function(func, text) {
       *   return '<p>' + func(text) + '</p>';
       * });
       *
       * p('fred, barney, & pebbles');
       * // => '<p>fred, barney, &amp; pebbles</p>'
       */
      function wrap(value, wrapper) {
        return partial(castFunction(wrapper), value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Casts `value` as an array if it's not one.
       *
       * @static
       * @memberOf _
       * @since 4.4.0
       * @category Lang
       * @param {*} value The value to inspect.
       * @returns {Array} Returns the cast array.
       * @example
       *
       * _.castArray(1);
       * // => [1]
       *
       * _.castArray({ 'a': 1 });
       * // => [{ 'a': 1 }]
       *
       * _.castArray('abc');
       * // => ['abc']
       *
       * _.castArray(null);
       * // => [null]
       *
       * _.castArray(undefined);
       * // => [undefined]
       *
       * _.castArray();
       * // => []
       *
       * var array = [1, 2, 3];
       * console.log(_.castArray(array) === array);
       * // => true
       */
      function castArray() {
        if (!arguments.length) {
          return [];
        }
        var value = arguments[0];
        return isArray(value) ? value : [value];
      }

      /**
       * Creates a shallow clone of `value`.
       *
       * **Note:** This method is loosely based on the
       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
       * and supports cloning arrays, array buffers, booleans, date objects, maps,
       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
       * arrays. The own enumerable properties of `arguments` objects are cloned
       * as plain objects. An empty object is returned for uncloneable values such
       * as error objects, functions, DOM nodes, and WeakMaps.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to clone.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeep
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var shallow = _.clone(objects);
       * console.log(shallow[0] === objects[0]);
       * // => true
       */
      function clone(value) {
        return baseClone(value, CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.clone` except that it accepts `customizer` which
       * is invoked to produce the cloned value. If `customizer` returns `undefined`,
       * cloning is handled by the method instead. The `customizer` is invoked with
       * up to four arguments; (value [, index|key, object, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the cloned value.
       * @see _.cloneDeepWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(false);
       *   }
       * }
       *
       * var el = _.cloneWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 0
       */
      function cloneWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * This method is like `_.clone` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @returns {*} Returns the deep cloned value.
       * @see _.clone
       * @example
       *
       * var objects = [{ 'a': 1 }, { 'b': 2 }];
       *
       * var deep = _.cloneDeep(objects);
       * console.log(deep[0] === objects[0]);
       * // => false
       */
      function cloneDeep(value) {
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
      }

      /**
       * This method is like `_.cloneWith` except that it recursively clones `value`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to recursively clone.
       * @param {Function} [customizer] The function to customize cloning.
       * @returns {*} Returns the deep cloned value.
       * @see _.cloneWith
       * @example
       *
       * function customizer(value) {
       *   if (_.isElement(value)) {
       *     return value.cloneNode(true);
       *   }
       * }
       *
       * var el = _.cloneDeepWith(document.body, customizer);
       *
       * console.log(el === document.body);
       * // => false
       * console.log(el.nodeName);
       * // => 'BODY'
       * console.log(el.childNodes.length);
       * // => 20
       */
      function cloneDeepWith(value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
      }

      /**
       * Checks if `object` conforms to `source` by invoking the predicate
       * properties of `source` with the corresponding property values of `object`.
       *
       * **Note:** This method is equivalent to `_.conforms` when `source` is
       * partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property predicates to conform to.
       * @returns {boolean} Returns `true` if `object` conforms, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
       * // => true
       *
       * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
       * // => false
       */
      function conformsTo(object, source) {
        return source == null || baseConformsTo(object, source, keys(source));
      }

      /**
       * Performs a
       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
       * comparison between two values to determine if they are equivalent.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.eq(object, object);
       * // => true
       *
       * _.eq(object, other);
       * // => false
       *
       * _.eq('a', 'a');
       * // => true
       *
       * _.eq('a', Object('a'));
       * // => false
       *
       * _.eq(NaN, NaN);
       * // => true
       */
      function eq(value, other) {
        return value === other || (value !== value && other !== other);
      }

      /**
       * Checks if `value` is greater than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than `other`,
       *  else `false`.
       * @see _.lt
       * @example
       *
       * _.gt(3, 1);
       * // => true
       *
       * _.gt(3, 3);
       * // => false
       *
       * _.gt(1, 3);
       * // => false
       */
      var gt = createRelationalOperation(baseGt);

      /**
       * Checks if `value` is greater than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is greater than or equal to
       *  `other`, else `false`.
       * @see _.lte
       * @example
       *
       * _.gte(3, 1);
       * // => true
       *
       * _.gte(3, 3);
       * // => true
       *
       * _.gte(1, 3);
       * // => false
       */
      var gte = createRelationalOperation(function(value, other) {
        return value >= other;
      });

      /**
       * Checks if `value` is likely an `arguments` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
       *  else `false`.
       * @example
       *
       * _.isArguments(function() { return arguments; }());
       * // => true
       *
       * _.isArguments([1, 2, 3]);
       * // => false
       */
      var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
          !propertyIsEnumerable.call(value, 'callee');
      };

      /**
       * Checks if `value` is classified as an `Array` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
       * @example
       *
       * _.isArray([1, 2, 3]);
       * // => true
       *
       * _.isArray(document.body.children);
       * // => false
       *
       * _.isArray('abc');
       * // => false
       *
       * _.isArray(_.noop);
       * // => false
       */
      var isArray = Array.isArray;

      /**
       * Checks if `value` is classified as an `ArrayBuffer` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
       * @example
       *
       * _.isArrayBuffer(new ArrayBuffer(2));
       * // => true
       *
       * _.isArrayBuffer(new Array(2));
       * // => false
       */
      var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

      /**
       * Checks if `value` is array-like. A value is considered array-like if it's
       * not a function and has a `value.length` that's an integer greater than or
       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
       * @example
       *
       * _.isArrayLike([1, 2, 3]);
       * // => true
       *
       * _.isArrayLike(document.body.children);
       * // => true
       *
       * _.isArrayLike('abc');
       * // => true
       *
       * _.isArrayLike(_.noop);
       * // => false
       */
      function isArrayLike(value) {
        return value != null && isLength(value.length) && !isFunction(value);
      }

      /**
       * This method is like `_.isArrayLike` except that it also checks if `value`
       * is an object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an array-like object,
       *  else `false`.
       * @example
       *
       * _.isArrayLikeObject([1, 2, 3]);
       * // => true
       *
       * _.isArrayLikeObject(document.body.children);
       * // => true
       *
       * _.isArrayLikeObject('abc');
       * // => false
       *
       * _.isArrayLikeObject(_.noop);
       * // => false
       */
      function isArrayLikeObject(value) {
        return isObjectLike(value) && isArrayLike(value);
      }

      /**
       * Checks if `value` is classified as a boolean primitive or object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
       * @example
       *
       * _.isBoolean(false);
       * // => true
       *
       * _.isBoolean(null);
       * // => false
       */
      function isBoolean(value) {
        return value === true || value === false ||
          (isObjectLike(value) && baseGetTag(value) == boolTag);
      }

      /**
       * Checks if `value` is a buffer.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
       * @example
       *
       * _.isBuffer(new Buffer(2));
       * // => true
       *
       * _.isBuffer(new Uint8Array(2));
       * // => false
       */
      var isBuffer = nativeIsBuffer || stubFalse;

      /**
       * Checks if `value` is classified as a `Date` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
       * @example
       *
       * _.isDate(new Date);
       * // => true
       *
       * _.isDate('Mon April 23 2012');
       * // => false
       */
      var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

      /**
       * Checks if `value` is likely a DOM element.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
       * @example
       *
       * _.isElement(document.body);
       * // => true
       *
       * _.isElement('<body>');
       * // => false
       */
      function isElement(value) {
        return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
      }

      /**
       * Checks if `value` is an empty object, collection, map, or set.
       *
       * Objects are considered empty if they have no own enumerable string keyed
       * properties.
       *
       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
       * jQuery-like collections are considered empty if they have a `length` of `0`.
       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
       * @example
       *
       * _.isEmpty(null);
       * // => true
       *
       * _.isEmpty(true);
       * // => true
       *
       * _.isEmpty(1);
       * // => true
       *
       * _.isEmpty([1, 2, 3]);
       * // => false
       *
       * _.isEmpty({ 'a': 1 });
       * // => false
       */
      function isEmpty(value) {
        if (value == null) {
          return true;
        }
        if (isArrayLike(value) &&
            (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
              isBuffer(value) || isTypedArray(value) || isArguments(value))) {
          return !value.length;
        }
        var tag = getTag(value);
        if (tag == mapTag || tag == setTag) {
          return !value.size;
        }
        if (isPrototype(value)) {
          return !baseKeys(value).length;
        }
        for (var key in value) {
          if (hasOwnProperty.call(value, key)) {
            return false;
          }
        }
        return true;
      }

      /**
       * Performs a deep comparison between two values to determine if they are
       * equivalent.
       *
       * **Note:** This method supports comparing arrays, array buffers, booleans,
       * date objects, error objects, maps, numbers, `Object` objects, regexes,
       * sets, strings, symbols, and typed arrays. `Object` objects are compared
       * by their own, not inherited, enumerable properties. Functions and DOM
       * nodes are compared by strict equality, i.e. `===`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * var object = { 'a': 1 };
       * var other = { 'a': 1 };
       *
       * _.isEqual(object, other);
       * // => true
       *
       * object === other;
       * // => false
       */
      function isEqual(value, other) {
        return baseIsEqual(value, other);
      }

      /**
       * This method is like `_.isEqual` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with up to
       * six arguments: (objValue, othValue [, index|key, object, other, stack]).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, othValue) {
       *   if (isGreeting(objValue) && isGreeting(othValue)) {
       *     return true;
       *   }
       * }
       *
       * var array = ['hello', 'goodbye'];
       * var other = ['hi', 'goodbye'];
       *
       * _.isEqualWith(array, other, customizer);
       * // => true
       */
      function isEqualWith(value, other, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        var result = customizer ? customizer(value, other) : undefined;
        return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
      }

      /**
       * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
       * `SyntaxError`, `TypeError`, or `URIError` object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
       * @example
       *
       * _.isError(new Error);
       * // => true
       *
       * _.isError(Error);
       * // => false
       */
      function isError(value) {
        if (!isObjectLike(value)) {
          return false;
        }
        var tag = baseGetTag(value);
        return tag == errorTag || tag == domExcTag ||
          (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
      }

      /**
       * Checks if `value` is a finite primitive number.
       *
       * **Note:** This method is based on
       * [`Number.isFinite`](https://mdn.io/Number/isFinite).
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
       * @example
       *
       * _.isFinite(3);
       * // => true
       *
       * _.isFinite(Number.MIN_VALUE);
       * // => true
       *
       * _.isFinite(Infinity);
       * // => false
       *
       * _.isFinite('3');
       * // => false
       */
      function isFinite(value) {
        return typeof value == 'number' && nativeIsFinite(value);
      }

      /**
       * Checks if `value` is classified as a `Function` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
       * @example
       *
       * _.isFunction(_);
       * // => true
       *
       * _.isFunction(/abc/);
       * // => false
       */
      function isFunction(value) {
        if (!isObject(value)) {
          return false;
        }
        // The use of `Object#toString` avoids issues with the `typeof` operator
        // in Safari 9 which returns 'object' for typed arrays and other constructors.
        var tag = baseGetTag(value);
        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
      }

      /**
       * Checks if `value` is an integer.
       *
       * **Note:** This method is based on
       * [`Number.isInteger`](https://mdn.io/Number/isInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
       * @example
       *
       * _.isInteger(3);
       * // => true
       *
       * _.isInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isInteger(Infinity);
       * // => false
       *
       * _.isInteger('3');
       * // => false
       */
      function isInteger(value) {
        return typeof value == 'number' && value == toInteger(value);
      }

      /**
       * Checks if `value` is a valid array-like length.
       *
       * **Note:** This method is loosely based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
       * @example
       *
       * _.isLength(3);
       * // => true
       *
       * _.isLength(Number.MIN_VALUE);
       * // => false
       *
       * _.isLength(Infinity);
       * // => false
       *
       * _.isLength('3');
       * // => false
       */
      function isLength(value) {
        return typeof value == 'number' &&
          value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is the
       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
       * @example
       *
       * _.isObject({});
       * // => true
       *
       * _.isObject([1, 2, 3]);
       * // => true
       *
       * _.isObject(_.noop);
       * // => true
       *
       * _.isObject(null);
       * // => false
       */
      function isObject(value) {
        var type = typeof value;
        return value != null && (type == 'object' || type == 'function');
      }

      /**
       * Checks if `value` is object-like. A value is object-like if it's not `null`
       * and has a `typeof` result of "object".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
       * @example
       *
       * _.isObjectLike({});
       * // => true
       *
       * _.isObjectLike([1, 2, 3]);
       * // => true
       *
       * _.isObjectLike(_.noop);
       * // => false
       *
       * _.isObjectLike(null);
       * // => false
       */
      function isObjectLike(value) {
        return value != null && typeof value == 'object';
      }

      /**
       * Checks if `value` is classified as a `Map` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a map, else `false`.
       * @example
       *
       * _.isMap(new Map);
       * // => true
       *
       * _.isMap(new WeakMap);
       * // => false
       */
      var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

      /**
       * Performs a partial deep comparison between `object` and `source` to
       * determine if `object` contains equivalent property values.
       *
       * **Note:** This method is equivalent to `_.matches` when `source` is
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * var object = { 'a': 1, 'b': 2 };
       *
       * _.isMatch(object, { 'b': 2 });
       * // => true
       *
       * _.isMatch(object, { 'b': 1 });
       * // => false
       */
      function isMatch(object, source) {
        return object === source || baseIsMatch(object, source, getMatchData(source));
      }

      /**
       * This method is like `_.isMatch` except that it accepts `customizer` which
       * is invoked to compare values. If `customizer` returns `undefined`, comparisons
       * are handled by the method instead. The `customizer` is invoked with five
       * arguments: (objValue, srcValue, index|key, object, source).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {Object} object The object to inspect.
       * @param {Object} source The object of property values to match.
       * @param {Function} [customizer] The function to customize comparisons.
       * @returns {boolean} Returns `true` if `object` is a match, else `false`.
       * @example
       *
       * function isGreeting(value) {
       *   return /^h(?:i|ello)$/.test(value);
       * }
       *
       * function customizer(objValue, srcValue) {
       *   if (isGreeting(objValue) && isGreeting(srcValue)) {
       *     return true;
       *   }
       * }
       *
       * var object = { 'greeting': 'hello' };
       * var source = { 'greeting': 'hi' };
       *
       * _.isMatchWith(object, source, customizer);
       * // => true
       */
      function isMatchWith(object, source, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return baseIsMatch(object, source, getMatchData(source), customizer);
      }

      /**
       * Checks if `value` is `NaN`.
       *
       * **Note:** This method is based on
       * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
       * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
       * `undefined` and other non-number values.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
       * @example
       *
       * _.isNaN(NaN);
       * // => true
       *
       * _.isNaN(new Number(NaN));
       * // => true
       *
       * isNaN(undefined);
       * // => true
       *
       * _.isNaN(undefined);
       * // => false
       */
      function isNaN(value) {
        // An `NaN` primitive is the only value that is not equal to itself.
        // Perform the `toStringTag` check first to avoid errors with some
        // ActiveX objects in IE.
        return isNumber(value) && value != +value;
      }

      /**
       * Checks if `value` is a pristine native function.
       *
       * **Note:** This method can't reliably detect native functions in the presence
       * of the core-js package because core-js circumvents this kind of detection.
       * Despite multiple requests, the core-js maintainer has made it clear: any
       * attempt to fix the detection will be obstructed. As a result, we're left
       * with little choice but to throw an error. Unfortunately, this also affects
       * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
       * which rely on core-js.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a native function,
       *  else `false`.
       * @example
       *
       * _.isNative(Array.prototype.push);
       * // => true
       *
       * _.isNative(_);
       * // => false
       */
      function isNative(value) {
        if (isMaskable(value)) {
          throw new Error(CORE_ERROR_TEXT);
        }
        return baseIsNative(value);
      }

      /**
       * Checks if `value` is `null`.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
       * @example
       *
       * _.isNull(null);
       * // => true
       *
       * _.isNull(void 0);
       * // => false
       */
      function isNull(value) {
        return value === null;
      }

      /**
       * Checks if `value` is `null` or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
       * @example
       *
       * _.isNil(null);
       * // => true
       *
       * _.isNil(void 0);
       * // => true
       *
       * _.isNil(NaN);
       * // => false
       */
      function isNil(value) {
        return value == null;
      }

      /**
       * Checks if `value` is classified as a `Number` primitive or object.
       *
       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
       * classified as numbers, use the `_.isFinite` method.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
       * @example
       *
       * _.isNumber(3);
       * // => true
       *
       * _.isNumber(Number.MIN_VALUE);
       * // => true
       *
       * _.isNumber(Infinity);
       * // => true
       *
       * _.isNumber('3');
       * // => false
       */
      function isNumber(value) {
        return typeof value == 'number' ||
          (isObjectLike(value) && baseGetTag(value) == numberTag);
      }

      /**
       * Checks if `value` is a plain object, that is, an object created by the
       * `Object` constructor or one with a `[[Prototype]]` of `null`.
       *
       * @static
       * @memberOf _
       * @since 0.8.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * _.isPlainObject(new Foo);
       * // => false
       *
       * _.isPlainObject([1, 2, 3]);
       * // => false
       *
       * _.isPlainObject({ 'x': 0, 'y': 0 });
       * // => true
       *
       * _.isPlainObject(Object.create(null));
       * // => true
       */
      function isPlainObject(value) {
        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
          return false;
        }
        var proto = getPrototype(value);
        if (proto === null) {
          return true;
        }
        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
        return typeof Ctor == 'function' && Ctor instanceof Ctor &&
          funcToString.call(Ctor) == objectCtorString;
      }

      /**
       * Checks if `value` is classified as a `RegExp` object.
       *
       * @static
       * @memberOf _
       * @since 0.1.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
       * @example
       *
       * _.isRegExp(/abc/);
       * // => true
       *
       * _.isRegExp('/abc/');
       * // => false
       */
      var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

      /**
       * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
       * double precision number which isn't the result of a rounded unsafe integer.
       *
       * **Note:** This method is based on
       * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
       * @example
       *
       * _.isSafeInteger(3);
       * // => true
       *
       * _.isSafeInteger(Number.MIN_VALUE);
       * // => false
       *
       * _.isSafeInteger(Infinity);
       * // => false
       *
       * _.isSafeInteger('3');
       * // => false
       */
      function isSafeInteger(value) {
        return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
      }

      /**
       * Checks if `value` is classified as a `Set` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a set, else `false`.
       * @example
       *
       * _.isSet(new Set);
       * // => true
       *
       * _.isSet(new WeakSet);
       * // => false
       */
      var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

      /**
       * Checks if `value` is classified as a `String` primitive or object.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
       * @example
       *
       * _.isString('abc');
       * // => true
       *
       * _.isString(1);
       * // => false
       */
      function isString(value) {
        return typeof value == 'string' ||
          (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
      }

      /**
       * Checks if `value` is classified as a `Symbol` primitive or object.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
       * @example
       *
       * _.isSymbol(Symbol.iterator);
       * // => true
       *
       * _.isSymbol('abc');
       * // => false
       */
      function isSymbol(value) {
        return typeof value == 'symbol' ||
          (isObjectLike(value) && baseGetTag(value) == symbolTag);
      }

      /**
       * Checks if `value` is classified as a typed array.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
       * @example
       *
       * _.isTypedArray(new Uint8Array);
       * // => true
       *
       * _.isTypedArray([]);
       * // => false
       */
      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

      /**
       * Checks if `value` is `undefined`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
       * @example
       *
       * _.isUndefined(void 0);
       * // => true
       *
       * _.isUndefined(null);
       * // => false
       */
      function isUndefined(value) {
        return value === undefined;
      }

      /**
       * Checks if `value` is classified as a `WeakMap` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
       * @example
       *
       * _.isWeakMap(new WeakMap);
       * // => true
       *
       * _.isWeakMap(new Map);
       * // => false
       */
      function isWeakMap(value) {
        return isObjectLike(value) && getTag(value) == weakMapTag;
      }

      /**
       * Checks if `value` is classified as a `WeakSet` object.
       *
       * @static
       * @memberOf _
       * @since 4.3.0
       * @category Lang
       * @param {*} value The value to check.
       * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
       * @example
       *
       * _.isWeakSet(new WeakSet);
       * // => true
       *
       * _.isWeakSet(new Set);
       * // => false
       */
      function isWeakSet(value) {
        return isObjectLike(value) && baseGetTag(value) == weakSetTag;
      }

      /**
       * Checks if `value` is less than `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than `other`,
       *  else `false`.
       * @see _.gt
       * @example
       *
       * _.lt(1, 3);
       * // => true
       *
       * _.lt(3, 3);
       * // => false
       *
       * _.lt(3, 1);
       * // => false
       */
      var lt = createRelationalOperation(baseLt);

      /**
       * Checks if `value` is less than or equal to `other`.
       *
       * @static
       * @memberOf _
       * @since 3.9.0
       * @category Lang
       * @param {*} value The value to compare.
       * @param {*} other The other value to compare.
       * @returns {boolean} Returns `true` if `value` is less than or equal to
       *  `other`, else `false`.
       * @see _.gte
       * @example
       *
       * _.lte(1, 3);
       * // => true
       *
       * _.lte(3, 3);
       * // => true
       *
       * _.lte(3, 1);
       * // => false
       */
      var lte = createRelationalOperation(function(value, other) {
        return value <= other;
      });

      /**
       * Converts `value` to an array.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Array} Returns the converted array.
       * @example
       *
       * _.toArray({ 'a': 1, 'b': 2 });
       * // => [1, 2]
       *
       * _.toArray('abc');
       * // => ['a', 'b', 'c']
       *
       * _.toArray(1);
       * // => []
       *
       * _.toArray(null);
       * // => []
       */
      function toArray(value) {
        if (!value) {
          return [];
        }
        if (isArrayLike(value)) {
          return isString(value) ? stringToArray(value) : copyArray(value);
        }
        if (symIterator && value[symIterator]) {
          return iteratorToArray(value[symIterator]());
        }
        var tag = getTag(value),
            func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

        return func(value);
      }

      /**
       * Converts `value` to a finite number.
       *
       * @static
       * @memberOf _
       * @since 4.12.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted number.
       * @example
       *
       * _.toFinite(3.2);
       * // => 3.2
       *
       * _.toFinite(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toFinite(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toFinite('3.2');
       * // => 3.2
       */
      function toFinite(value) {
        if (!value) {
          return value === 0 ? value : 0;
        }
        value = toNumber(value);
        if (value === INFINITY || value === -INFINITY) {
          var sign = (value < 0 ? -1 : 1);
          return sign * MAX_INTEGER;
        }
        return value === value ? value : 0;
      }

      /**
       * Converts `value` to an integer.
       *
       * **Note:** This method is loosely based on
       * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toInteger(3.2);
       * // => 3
       *
       * _.toInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toInteger(Infinity);
       * // => 1.7976931348623157e+308
       *
       * _.toInteger('3.2');
       * // => 3
       */
      function toInteger(value) {
        var result = toFinite(value),
            remainder = result % 1;

        return result === result ? (remainder ? result - remainder : result) : 0;
      }

      /**
       * Converts `value` to an integer suitable for use as the length of an
       * array-like object.
       *
       * **Note:** This method is based on
       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toLength(3.2);
       * // => 3
       *
       * _.toLength(Number.MIN_VALUE);
       * // => 0
       *
       * _.toLength(Infinity);
       * // => 4294967295
       *
       * _.toLength('3.2');
       * // => 3
       */
      function toLength(value) {
        return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
      }

      /**
       * Converts `value` to a number.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to process.
       * @returns {number} Returns the number.
       * @example
       *
       * _.toNumber(3.2);
       * // => 3.2
       *
       * _.toNumber(Number.MIN_VALUE);
       * // => 5e-324
       *
       * _.toNumber(Infinity);
       * // => Infinity
       *
       * _.toNumber('3.2');
       * // => 3.2
       */
      function toNumber(value) {
        if (typeof value == 'number') {
          return value;
        }
        if (isSymbol(value)) {
          return NAN;
        }
        if (isObject(value)) {
          var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
          value = isObject(other) ? (other + '') : other;
        }
        if (typeof value != 'string') {
          return value === 0 ? value : +value;
        }
        value = value.replace(reTrim, '');
        var isBinary = reIsBinary.test(value);
        return (isBinary || reIsOctal.test(value))
          ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
          : (reIsBadHex.test(value) ? NAN : +value);
      }

      /**
       * Converts `value` to a plain object flattening inherited enumerable string
       * keyed properties of `value` to own properties of the plain object.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {Object} Returns the converted plain object.
       * @example
       *
       * function Foo() {
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.assign({ 'a': 1 }, new Foo);
       * // => { 'a': 1, 'b': 2 }
       *
       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
       * // => { 'a': 1, 'b': 2, 'c': 3 }
       */
      function toPlainObject(value) {
        return copyObject(value, keysIn(value));
      }

      /**
       * Converts `value` to a safe integer. A safe integer can be compared and
       * represented correctly.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.toSafeInteger(3.2);
       * // => 3
       *
       * _.toSafeInteger(Number.MIN_VALUE);
       * // => 0
       *
       * _.toSafeInteger(Infinity);
       * // => 9007199254740991
       *
       * _.toSafeInteger('3.2');
       * // => 3
       */
      function toSafeInteger(value) {
        return value
          ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
          : (value === 0 ? value : 0);
      }

      /**
       * Converts `value` to a string. An empty string is returned for `null`
       * and `undefined` values. The sign of `-0` is preserved.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Lang
       * @param {*} value The value to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.toString(null);
       * // => ''
       *
       * _.toString(-0);
       * // => '-0'
       *
       * _.toString([1, 2, 3]);
       * // => '1,2,3'
       */
      function toString(value) {
        return value == null ? '' : baseToString(value);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Assigns own enumerable string keyed properties of source objects to the
       * destination object. Source objects are applied from left to right.
       * Subsequent sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object` and is loosely based on
       * [`Object.assign`](https://mdn.io/Object/assign).
       *
       * @static
       * @memberOf _
       * @since 0.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assignIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assign({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'c': 3 }
       */
      var assign = createAssigner(function(object, source) {
        if (isPrototype(source) || isArrayLike(source)) {
          copyObject(source, keys(source), object);
          return;
        }
        for (var key in source) {
          if (hasOwnProperty.call(source, key)) {
            assignValue(object, key, source[key]);
          }
        }
      });

      /**
       * This method is like `_.assign` except that it iterates over own and
       * inherited source properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extend
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.assign
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       * }
       *
       * function Bar() {
       *   this.c = 3;
       * }
       *
       * Foo.prototype.b = 2;
       * Bar.prototype.d = 4;
       *
       * _.assignIn({ 'a': 0 }, new Foo, new Bar);
       * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
       */
      var assignIn = createAssigner(function(object, source) {
        copyObject(source, keysIn(source), object);
      });

      /**
       * This method is like `_.assignIn` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias extendWith
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignInWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keysIn(source), object, customizer);
      });

      /**
       * This method is like `_.assign` except that it accepts `customizer`
       * which is invoked to produce the assigned values. If `customizer` returns
       * `undefined`, assignment is handled by the method instead. The `customizer`
       * is invoked with five arguments: (objValue, srcValue, key, object, source).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @see _.assignInWith
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   return _.isUndefined(objValue) ? srcValue : objValue;
       * }
       *
       * var defaults = _.partialRight(_.assignWith, customizer);
       *
       * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
        copyObject(source, keys(source), object, customizer);
      });

      /**
       * Creates an array of values corresponding to `paths` of `object`.
       *
       * @static
       * @memberOf _
       * @since 1.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Array} Returns the picked values.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
       *
       * _.at(object, ['a[0].b.c', 'a[1]']);
       * // => [3, 4]
       */
      var at = flatRest(baseAt);

      /**
       * Creates an object that inherits from the `prototype` object. If a
       * `properties` object is given, its own enumerable string keyed properties
       * are assigned to the created object.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Object
       * @param {Object} prototype The object to inherit from.
       * @param {Object} [properties] The properties to assign to the object.
       * @returns {Object} Returns the new object.
       * @example
       *
       * function Shape() {
       *   this.x = 0;
       *   this.y = 0;
       * }
       *
       * function Circle() {
       *   Shape.call(this);
       * }
       *
       * Circle.prototype = _.create(Shape.prototype, {
       *   'constructor': Circle
       * });
       *
       * var circle = new Circle;
       * circle instanceof Circle;
       * // => true
       *
       * circle instanceof Shape;
       * // => true
       */
      function create(prototype, properties) {
        var result = baseCreate(prototype);
        return properties == null ? result : baseAssign(result, properties);
      }

      /**
       * Assigns own and inherited enumerable string keyed properties of source
       * objects to the destination object for all destination properties that
       * resolve to `undefined`. Source objects are applied from left to right.
       * Once a property is set, additional values of the same property are ignored.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaultsDeep
       * @example
       *
       * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
       * // => { 'a': 1, 'b': 2 }
       */
      var defaults = baseRest(function(object, sources) {
        object = Object(object);

        var index = -1;
        var length = sources.length;
        var guard = length > 2 ? sources[2] : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          length = 1;
        }

        while (++index < length) {
          var source = sources[index];
          var props = keysIn(source);
          var propsIndex = -1;
          var propsLength = props.length;

          while (++propsIndex < propsLength) {
            var key = props[propsIndex];
            var value = object[key];

            if (value === undefined ||
                (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
              object[key] = source[key];
            }
          }
        }

        return object;
      });

      /**
       * This method is like `_.defaults` except that it recursively assigns
       * default properties.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @see _.defaults
       * @example
       *
       * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
       * // => { 'a': { 'b': 2, 'c': 3 } }
       */
      var defaultsDeep = baseRest(function(args) {
        args.push(undefined, customDefaultsMerge);
        return apply(mergeWith, undefined, args);
      });

      /**
       * This method is like `_.find` except that it returns the key of the first
       * element `predicate` returns truthy for instead of the element itself.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findKey(users, function(o) { return o.age < 40; });
       * // => 'barney' (iteration order is not guaranteed)
       *
       * // The `_.matches` iteratee shorthand.
       * _.findKey(users, { 'age': 1, 'active': true });
       * // => 'pebbles'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findKey(users, 'active');
       * // => 'barney'
       */
      function findKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
      }

      /**
       * This method is like `_.findKey` except that it iterates over elements of
       * a collection in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @param {Function} [predicate=_.identity] The function invoked per iteration.
       * @returns {string|undefined} Returns the key of the matched element,
       *  else `undefined`.
       * @example
       *
       * var users = {
       *   'barney':  { 'age': 36, 'active': true },
       *   'fred':    { 'age': 40, 'active': false },
       *   'pebbles': { 'age': 1,  'active': true }
       * };
       *
       * _.findLastKey(users, function(o) { return o.age < 40; });
       * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
       *
       * // The `_.matches` iteratee shorthand.
       * _.findLastKey(users, { 'age': 36, 'active': true });
       * // => 'barney'
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.findLastKey(users, ['active', false]);
       * // => 'fred'
       *
       * // The `_.property` iteratee shorthand.
       * _.findLastKey(users, 'active');
       * // => 'pebbles'
       */
      function findLastKey(object, predicate) {
        return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
      }

      /**
       * Iterates over own and inherited enumerable string keyed properties of an
       * object and invokes `iteratee` for each property. The iteratee is invoked
       * with three arguments: (value, key, object). Iteratee functions may exit
       * iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forInRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forIn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
       */
      function forIn(object, iteratee) {
        return object == null
          ? object
          : baseFor(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * This method is like `_.forIn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forIn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forInRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
       */
      function forInRight(object, iteratee) {
        return object == null
          ? object
          : baseForRight(object, getIteratee(iteratee, 3), keysIn);
      }

      /**
       * Iterates over own enumerable string keyed properties of an object and
       * invokes `iteratee` for each property. The iteratee is invoked with three
       * arguments: (value, key, object). Iteratee functions may exit iteration
       * early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 0.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwnRight
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwn(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
       */
      function forOwn(object, iteratee) {
        return object && baseForOwn(object, getIteratee(iteratee, 3));
      }

      /**
       * This method is like `_.forOwn` except that it iterates over properties of
       * `object` in the opposite order.
       *
       * @static
       * @memberOf _
       * @since 2.0.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns `object`.
       * @see _.forOwn
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.forOwnRight(new Foo, function(value, key) {
       *   console.log(key);
       * });
       * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
       */
      function forOwnRight(object, iteratee) {
        return object && baseForOwnRight(object, getIteratee(iteratee, 3));
      }

      /**
       * Creates an array of function property names from own enumerable properties
       * of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functionsIn
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functions(new Foo);
       * // => ['a', 'b']
       */
      function functions(object) {
        return object == null ? [] : baseFunctions(object, keys(object));
      }

      /**
       * Creates an array of function property names from own and inherited
       * enumerable properties of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to inspect.
       * @returns {Array} Returns the function names.
       * @see _.functions
       * @example
       *
       * function Foo() {
       *   this.a = _.constant('a');
       *   this.b = _.constant('b');
       * }
       *
       * Foo.prototype.c = _.constant('c');
       *
       * _.functionsIn(new Foo);
       * // => ['a', 'b', 'c']
       */
      function functionsIn(object) {
        return object == null ? [] : baseFunctions(object, keysIn(object));
      }

      /**
       * Gets the value at `path` of `object`. If the resolved value is
       * `undefined`, the `defaultValue` is returned in its place.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to get.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.get(object, 'a[0].b.c');
       * // => 3
       *
       * _.get(object, ['a', '0', 'b', 'c']);
       * // => 3
       *
       * _.get(object, 'a.b.c', 'default');
       * // => 'default'
       */
      function get(object, path, defaultValue) {
        var result = object == null ? undefined : baseGet(object, path);
        return result === undefined ? defaultValue : result;
      }

      /**
       * Checks if `path` is a direct property of `object`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = { 'a': { 'b': 2 } };
       * var other = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.has(object, 'a');
       * // => true
       *
       * _.has(object, 'a.b');
       * // => true
       *
       * _.has(object, ['a', 'b']);
       * // => true
       *
       * _.has(other, 'a');
       * // => false
       */
      function has(object, path) {
        return object != null && hasPath(object, path, baseHas);
      }

      /**
       * Checks if `path` is a direct or inherited property of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path to check.
       * @returns {boolean} Returns `true` if `path` exists, else `false`.
       * @example
       *
       * var object = _.create({ 'a': _.create({ 'b': 2 }) });
       *
       * _.hasIn(object, 'a');
       * // => true
       *
       * _.hasIn(object, 'a.b');
       * // => true
       *
       * _.hasIn(object, ['a', 'b']);
       * // => true
       *
       * _.hasIn(object, 'b');
       * // => false
       */
      function hasIn(object, path) {
        return object != null && hasPath(object, path, baseHasIn);
      }

      /**
       * Creates an object composed of the inverted keys and values of `object`.
       * If `object` contains duplicate values, subsequent values overwrite
       * property assignments of previous values.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Object
       * @param {Object} object The object to invert.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invert(object);
       * // => { '1': 'c', '2': 'b' }
       */
      var invert = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        result[value] = key;
      }, constant(identity));

      /**
       * This method is like `_.invert` except that the inverted object is generated
       * from the results of running each element of `object` thru `iteratee`. The
       * corresponding inverted value of each inverted key is an array of keys
       * responsible for generating the inverted value. The iteratee is invoked
       * with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.1.0
       * @category Object
       * @param {Object} object The object to invert.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {Object} Returns the new inverted object.
       * @example
       *
       * var object = { 'a': 1, 'b': 2, 'c': 1 };
       *
       * _.invertBy(object);
       * // => { '1': ['a', 'c'], '2': ['b'] }
       *
       * _.invertBy(object, function(value) {
       *   return 'group' + value;
       * });
       * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
       */
      var invertBy = createInverter(function(result, value, key) {
        if (value != null &&
            typeof value.toString != 'function') {
          value = nativeObjectToString.call(value);
        }

        if (hasOwnProperty.call(result, value)) {
          result[value].push(key);
        } else {
          result[value] = [key];
        }
      }, getIteratee);

      /**
       * Invokes the method at `path` of `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {*} Returns the result of the invoked method.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
       *
       * _.invoke(object, 'a[0].b.c.slice', 1, 3);
       * // => [2, 3]
       */
      var invoke = baseRest(baseInvoke);

      /**
       * Creates an array of the own enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects. See the
       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
       * for more details.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keys(new Foo);
       * // => ['a', 'b'] (iteration order is not guaranteed)
       *
       * _.keys('hi');
       * // => ['0', '1']
       */
      function keys(object) {
        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
      }

      /**
       * Creates an array of the own and inherited enumerable property names of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property names.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.keysIn(new Foo);
       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
       */
      function keysIn(object) {
        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
      }

      /**
       * The opposite of `_.mapValues`; this method creates an object with the
       * same values as `object` and keys generated by running each own enumerable
       * string keyed property of `object` thru `iteratee`. The iteratee is invoked
       * with three arguments: (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 3.8.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapValues
       * @example
       *
       * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
       *   return key + value;
       * });
       * // => { 'a1': 1, 'b2': 2 }
       */
      function mapKeys(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, iteratee(value, key, object), value);
        });
        return result;
      }

      /**
       * Creates an object with the same keys as `object` and values generated
       * by running each own enumerable string keyed property of `object` thru
       * `iteratee`. The iteratee is invoked with three arguments:
       * (value, key, object).
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Object} Returns the new mapped object.
       * @see _.mapKeys
       * @example
       *
       * var users = {
       *   'fred':    { 'user': 'fred',    'age': 40 },
       *   'pebbles': { 'user': 'pebbles', 'age': 1 }
       * };
       *
       * _.mapValues(users, function(o) { return o.age; });
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       *
       * // The `_.property` iteratee shorthand.
       * _.mapValues(users, 'age');
       * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
       */
      function mapValues(object, iteratee) {
        var result = {};
        iteratee = getIteratee(iteratee, 3);

        baseForOwn(object, function(value, key, object) {
          baseAssignValue(result, key, iteratee(value, key, object));
        });
        return result;
      }

      /**
       * This method is like `_.assign` except that it recursively merges own and
       * inherited enumerable string keyed properties of source objects into the
       * destination object. Source properties that resolve to `undefined` are
       * skipped if a destination value exists. Array and plain object properties
       * are merged recursively. Other objects and value types are overridden by
       * assignment. Source objects are applied from left to right. Subsequent
       * sources overwrite property assignments of previous sources.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 0.5.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} [sources] The source objects.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {
       *   'a': [{ 'b': 2 }, { 'd': 4 }]
       * };
       *
       * var other = {
       *   'a': [{ 'c': 3 }, { 'e': 5 }]
       * };
       *
       * _.merge(object, other);
       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
       */
      var merge = createAssigner(function(object, source, srcIndex) {
        baseMerge(object, source, srcIndex);
      });

      /**
       * This method is like `_.merge` except that it accepts `customizer` which
       * is invoked to produce the merged values of the destination and source
       * properties. If `customizer` returns `undefined`, merging is handled by the
       * method instead. The `customizer` is invoked with six arguments:
       * (objValue, srcValue, key, object, source, stack).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The destination object.
       * @param {...Object} sources The source objects.
       * @param {Function} customizer The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * function customizer(objValue, srcValue) {
       *   if (_.isArray(objValue)) {
       *     return objValue.concat(srcValue);
       *   }
       * }
       *
       * var object = { 'a': [1], 'b': [2] };
       * var other = { 'a': [3], 'b': [4] };
       *
       * _.mergeWith(object, other, customizer);
       * // => { 'a': [1, 3], 'b': [2, 4] }
       */
      var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
        baseMerge(object, source, srcIndex, customizer);
      });

      /**
       * The opposite of `_.pick`; this method creates an object composed of the
       * own and inherited enumerable property paths of `object` that are not omitted.
       *
       * **Note:** This method is considerably slower than `_.pick`.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to omit.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omit(object, ['a', 'c']);
       * // => { 'b': '2' }
       */
      var omit = flatRest(function(object, paths) {
        var result = {};
        if (object == null) {
          return result;
        }
        var isDeep = false;
        paths = arrayMap(paths, function(path) {
          path = castPath(path, object);
          isDeep || (isDeep = path.length > 1);
          return path;
        });
        copyObject(object, getAllKeysIn(object), result);
        if (isDeep) {
          result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
        }
        var length = paths.length;
        while (length--) {
          baseUnset(result, paths[length]);
        }
        return result;
      });

      /**
       * The opposite of `_.pickBy`; this method creates an object composed of
       * the own and inherited enumerable string keyed properties of `object` that
       * `predicate` doesn't return truthy for. The predicate is invoked with two
       * arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.omitBy(object, _.isNumber);
       * // => { 'b': '2' }
       */
      function omitBy(object, predicate) {
        return pickBy(object, negate(getIteratee(predicate)));
      }

      /**
       * Creates an object composed of the picked `object` properties.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The source object.
       * @param {...(string|string[])} [paths] The property paths to pick.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pick(object, ['a', 'c']);
       * // => { 'a': 1, 'c': 3 }
       */
      var pick = flatRest(function(object, paths) {
        return object == null ? {} : basePick(object, paths);
      });

      /**
       * Creates an object composed of the `object` properties `predicate` returns
       * truthy for. The predicate is invoked with two arguments: (value, key).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The source object.
       * @param {Function} [predicate=_.identity] The function invoked per property.
       * @returns {Object} Returns the new object.
       * @example
       *
       * var object = { 'a': 1, 'b': '2', 'c': 3 };
       *
       * _.pickBy(object, _.isNumber);
       * // => { 'a': 1, 'c': 3 }
       */
      function pickBy(object, predicate) {
        if (object == null) {
          return {};
        }
        var props = arrayMap(getAllKeysIn(object), function(prop) {
          return [prop];
        });
        predicate = getIteratee(predicate);
        return basePickBy(object, props, function(value, path) {
          return predicate(value, path[0]);
        });
      }

      /**
       * This method is like `_.get` except that if the resolved value is a
       * function it's invoked with the `this` binding of its parent object and
       * its result is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @param {Array|string} path The path of the property to resolve.
       * @param {*} [defaultValue] The value returned for `undefined` resolved values.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
       *
       * _.result(object, 'a[0].b.c1');
       * // => 3
       *
       * _.result(object, 'a[0].b.c2');
       * // => 4
       *
       * _.result(object, 'a[0].b.c3', 'default');
       * // => 'default'
       *
       * _.result(object, 'a[0].b.c3', _.constant('default'));
       * // => 'default'
       */
      function result(object, path, defaultValue) {
        path = castPath(path, object);

        var index = -1,
            length = path.length;

        // Ensure the loop is entered when path is empty.
        if (!length) {
          length = 1;
          object = undefined;
        }
        while (++index < length) {
          var value = object == null ? undefined : object[toKey(path[index])];
          if (value === undefined) {
            index = length;
            value = defaultValue;
          }
          object = isFunction(value) ? value.call(object) : value;
        }
        return object;
      }

      /**
       * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
       * it's created. Arrays are created for missing index properties while objects
       * are created for all other missing properties. Use `_.setWith` to customize
       * `path` creation.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.set(object, 'a[0].b.c', 4);
       * console.log(object.a[0].b.c);
       * // => 4
       *
       * _.set(object, ['x', '0', 'y', 'z'], 5);
       * console.log(object.x[0].y.z);
       * // => 5
       */
      function set(object, path, value) {
        return object == null ? object : baseSet(object, path, value);
      }

      /**
       * This method is like `_.set` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {*} value The value to set.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.setWith(object, '[0][1]', 'a', Object);
       * // => { '0': { '1': 'a' } }
       */
      function setWith(object, path, value, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseSet(object, path, value, customizer);
      }

      /**
       * Creates an array of own enumerable string keyed-value pairs for `object`
       * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
       * entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entries
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairs(new Foo);
       * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
       */
      var toPairs = createToPairs(keys);

      /**
       * Creates an array of own and inherited enumerable string keyed-value pairs
       * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
       * or set, its entries are returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @alias entriesIn
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the key-value pairs.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.toPairsIn(new Foo);
       * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
       */
      var toPairsIn = createToPairs(keysIn);

      /**
       * An alternative to `_.reduce`; this method transforms `object` to a new
       * `accumulator` object which is the result of running each of its own
       * enumerable string keyed properties thru `iteratee`, with each invocation
       * potentially mutating the `accumulator` object. If `accumulator` is not
       * provided, a new object with the same `[[Prototype]]` will be used. The
       * iteratee is invoked with four arguments: (accumulator, value, key, object).
       * Iteratee functions may exit iteration early by explicitly returning `false`.
       *
       * @static
       * @memberOf _
       * @since 1.3.0
       * @category Object
       * @param {Object} object The object to iterate over.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @param {*} [accumulator] The custom accumulator value.
       * @returns {*} Returns the accumulated value.
       * @example
       *
       * _.transform([2, 3, 4], function(result, n) {
       *   result.push(n *= n);
       *   return n % 2 == 0;
       * }, []);
       * // => [4, 9]
       *
       * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
       *   (result[value] || (result[value] = [])).push(key);
       * }, {});
       * // => { '1': ['a', 'c'], '2': ['b'] }
       */
      function transform(object, iteratee, accumulator) {
        var isArr = isArray(object),
            isArrLike = isArr || isBuffer(object) || isTypedArray(object);

        iteratee = getIteratee(iteratee, 4);
        if (accumulator == null) {
          var Ctor = object && object.constructor;
          if (isArrLike) {
            accumulator = isArr ? new Ctor : [];
          }
          else if (isObject(object)) {
            accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
          }
          else {
            accumulator = {};
          }
        }
        (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
          return iteratee(accumulator, value, index, object);
        });
        return accumulator;
      }

      /**
       * Removes the property at `path` of `object`.
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to unset.
       * @returns {boolean} Returns `true` if the property is deleted, else `false`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 7 } }] };
       * _.unset(object, 'a[0].b.c');
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       *
       * _.unset(object, ['a', '0', 'b', 'c']);
       * // => true
       *
       * console.log(object);
       * // => { 'a': [{ 'b': {} }] };
       */
      function unset(object, path) {
        return object == null ? true : baseUnset(object, path);
      }

      /**
       * This method is like `_.set` except that accepts `updater` to produce the
       * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
       * is invoked with one argument: (value).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = { 'a': [{ 'b': { 'c': 3 } }] };
       *
       * _.update(object, 'a[0].b.c', function(n) { return n * n; });
       * console.log(object.a[0].b.c);
       * // => 9
       *
       * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
       * console.log(object.x[0].y.z);
       * // => 0
       */
      function update(object, path, updater) {
        return object == null ? object : baseUpdate(object, path, castFunction(updater));
      }

      /**
       * This method is like `_.update` except that it accepts `customizer` which is
       * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
       * path creation is handled by the method instead. The `customizer` is invoked
       * with three arguments: (nsValue, key, nsObject).
       *
       * **Note:** This method mutates `object`.
       *
       * @static
       * @memberOf _
       * @since 4.6.0
       * @category Object
       * @param {Object} object The object to modify.
       * @param {Array|string} path The path of the property to set.
       * @param {Function} updater The function to produce the updated value.
       * @param {Function} [customizer] The function to customize assigned values.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var object = {};
       *
       * _.updateWith(object, '[0][1]', _.constant('a'), Object);
       * // => { '0': { '1': 'a' } }
       */
      function updateWith(object, path, updater, customizer) {
        customizer = typeof customizer == 'function' ? customizer : undefined;
        return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
      }

      /**
       * Creates an array of the own enumerable string keyed property values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.values(new Foo);
       * // => [1, 2] (iteration order is not guaranteed)
       *
       * _.values('hi');
       * // => ['h', 'i']
       */
      function values(object) {
        return object == null ? [] : baseValues(object, keys(object));
      }

      /**
       * Creates an array of the own and inherited enumerable string keyed property
       * values of `object`.
       *
       * **Note:** Non-object values are coerced to objects.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Object
       * @param {Object} object The object to query.
       * @returns {Array} Returns the array of property values.
       * @example
       *
       * function Foo() {
       *   this.a = 1;
       *   this.b = 2;
       * }
       *
       * Foo.prototype.c = 3;
       *
       * _.valuesIn(new Foo);
       * // => [1, 2, 3] (iteration order is not guaranteed)
       */
      function valuesIn(object) {
        return object == null ? [] : baseValues(object, keysIn(object));
      }

      /*------------------------------------------------------------------------*/

      /**
       * Clamps `number` within the inclusive `lower` and `upper` bounds.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Number
       * @param {number} number The number to clamp.
       * @param {number} [lower] The lower bound.
       * @param {number} upper The upper bound.
       * @returns {number} Returns the clamped number.
       * @example
       *
       * _.clamp(-10, -5, 5);
       * // => -5
       *
       * _.clamp(10, -5, 5);
       * // => 5
       */
      function clamp(number, lower, upper) {
        if (upper === undefined) {
          upper = lower;
          lower = undefined;
        }
        if (upper !== undefined) {
          upper = toNumber(upper);
          upper = upper === upper ? upper : 0;
        }
        if (lower !== undefined) {
          lower = toNumber(lower);
          lower = lower === lower ? lower : 0;
        }
        return baseClamp(toNumber(number), lower, upper);
      }

      /**
       * Checks if `n` is between `start` and up to, but not including, `end`. If
       * `end` is not specified, it's set to `start` with `start` then set to `0`.
       * If `start` is greater than `end` the params are swapped to support
       * negative ranges.
       *
       * @static
       * @memberOf _
       * @since 3.3.0
       * @category Number
       * @param {number} number The number to check.
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
       * @see _.range, _.rangeRight
       * @example
       *
       * _.inRange(3, 2, 4);
       * // => true
       *
       * _.inRange(4, 8);
       * // => true
       *
       * _.inRange(4, 2);
       * // => false
       *
       * _.inRange(2, 2);
       * // => false
       *
       * _.inRange(1.2, 2);
       * // => true
       *
       * _.inRange(5.2, 4);
       * // => false
       *
       * _.inRange(-3, -2, -6);
       * // => true
       */
      function inRange(number, start, end) {
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        number = toNumber(number);
        return baseInRange(number, start, end);
      }

      /**
       * Produces a random number between the inclusive `lower` and `upper` bounds.
       * If only one argument is provided a number between `0` and the given number
       * is returned. If `floating` is `true`, or either `lower` or `upper` are
       * floats, a floating-point number is returned instead of an integer.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @memberOf _
       * @since 0.7.0
       * @category Number
       * @param {number} [lower=0] The lower bound.
       * @param {number} [upper=1] The upper bound.
       * @param {boolean} [floating] Specify returning a floating-point number.
       * @returns {number} Returns the random number.
       * @example
       *
       * _.random(0, 5);
       * // => an integer between 0 and 5
       *
       * _.random(5);
       * // => also an integer between 0 and 5
       *
       * _.random(5, true);
       * // => a floating-point number between 0 and 5
       *
       * _.random(1.2, 5.2);
       * // => a floating-point number between 1.2 and 5.2
       */
      function random(lower, upper, floating) {
        if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
          upper = floating = undefined;
        }
        if (floating === undefined) {
          if (typeof upper == 'boolean') {
            floating = upper;
            upper = undefined;
          }
          else if (typeof lower == 'boolean') {
            floating = lower;
            lower = undefined;
          }
        }
        if (lower === undefined && upper === undefined) {
          lower = 0;
          upper = 1;
        }
        else {
          lower = toFinite(lower);
          if (upper === undefined) {
            upper = lower;
            lower = 0;
          } else {
            upper = toFinite(upper);
          }
        }
        if (lower > upper) {
          var temp = lower;
          lower = upper;
          upper = temp;
        }
        if (floating || lower % 1 || upper % 1) {
          var rand = nativeRandom();
          return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
        }
        return baseRandom(lower, upper);
      }

      /*------------------------------------------------------------------------*/

      /**
       * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the camel cased string.
       * @example
       *
       * _.camelCase('Foo Bar');
       * // => 'fooBar'
       *
       * _.camelCase('--foo-bar--');
       * // => 'fooBar'
       *
       * _.camelCase('__FOO_BAR__');
       * // => 'fooBar'
       */
      var camelCase = createCompounder(function(result, word, index) {
        word = word.toLowerCase();
        return result + (index ? capitalize(word) : word);
      });

      /**
       * Converts the first character of `string` to upper case and the remaining
       * to lower case.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to capitalize.
       * @returns {string} Returns the capitalized string.
       * @example
       *
       * _.capitalize('FRED');
       * // => 'Fred'
       */
      function capitalize(string) {
        return upperFirst(toString(string).toLowerCase());
      }

      /**
       * Deburrs `string` by converting
       * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
       * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
       * letters to basic Latin letters and removing
       * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to deburr.
       * @returns {string} Returns the deburred string.
       * @example
       *
       * _.deburr('déjà vu');
       * // => 'deja vu'
       */
      function deburr(string) {
        string = toString(string);
        return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
      }

      /**
       * Checks if `string` ends with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=string.length] The position to search up to.
       * @returns {boolean} Returns `true` if `string` ends with `target`,
       *  else `false`.
       * @example
       *
       * _.endsWith('abc', 'c');
       * // => true
       *
       * _.endsWith('abc', 'b');
       * // => false
       *
       * _.endsWith('abc', 'b', 2);
       * // => true
       */
      function endsWith(string, target, position) {
        string = toString(string);
        target = baseToString(target);

        var length = string.length;
        position = position === undefined
          ? length
          : baseClamp(toInteger(position), 0, length);

        var end = position;
        position -= target.length;
        return position >= 0 && string.slice(position, end) == target;
      }

      /**
       * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
       * corresponding HTML entities.
       *
       * **Note:** No other characters are escaped. To escape additional
       * characters use a third-party library like [_he_](https://mths.be/he).
       *
       * Though the ">" character is escaped for symmetry, characters like
       * ">" and "/" don't need escaping in HTML and have no special meaning
       * unless they're part of a tag or unquoted attribute value. See
       * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
       * (under "semi-related fun fact") for more details.
       *
       * When working with HTML you should always
       * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
       * XSS vectors.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escape('fred, barney, & pebbles');
       * // => 'fred, barney, &amp; pebbles'
       */
      function escape(string) {
        string = toString(string);
        return (string && reHasUnescapedHtml.test(string))
          ? string.replace(reUnescapedHtml, escapeHtmlChar)
          : string;
      }

      /**
       * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
       * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to escape.
       * @returns {string} Returns the escaped string.
       * @example
       *
       * _.escapeRegExp('[lodash](https://lodash.com/)');
       * // => '\[lodash\]\(https://lodash\.com/\)'
       */
      function escapeRegExp(string) {
        string = toString(string);
        return (string && reHasRegExpChar.test(string))
          ? string.replace(reRegExpChar, '\\$&')
          : string;
      }

      /**
       * Converts `string` to
       * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the kebab cased string.
       * @example
       *
       * _.kebabCase('Foo Bar');
       * // => 'foo-bar'
       *
       * _.kebabCase('fooBar');
       * // => 'foo-bar'
       *
       * _.kebabCase('__FOO_BAR__');
       * // => 'foo-bar'
       */
      var kebabCase = createCompounder(function(result, word, index) {
        return result + (index ? '-' : '') + word.toLowerCase();
      });

      /**
       * Converts `string`, as space separated words, to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.lowerCase('--Foo-Bar--');
       * // => 'foo bar'
       *
       * _.lowerCase('fooBar');
       * // => 'foo bar'
       *
       * _.lowerCase('__FOO_BAR__');
       * // => 'foo bar'
       */
      var lowerCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toLowerCase();
      });

      /**
       * Converts the first character of `string` to lower case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.lowerFirst('Fred');
       * // => 'fred'
       *
       * _.lowerFirst('FRED');
       * // => 'fRED'
       */
      var lowerFirst = createCaseFirst('toLowerCase');

      /**
       * Pads `string` on the left and right sides if it's shorter than `length`.
       * Padding characters are truncated if they can't be evenly divided by `length`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.pad('abc', 8);
       * // => '  abc   '
       *
       * _.pad('abc', 8, '_-');
       * // => '_-abc_-_'
       *
       * _.pad('abc', 3);
       * // => 'abc'
       */
      function pad(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        if (!length || strLength >= length) {
          return string;
        }
        var mid = (length - strLength) / 2;
        return (
          createPadding(nativeFloor(mid), chars) +
          string +
          createPadding(nativeCeil(mid), chars)
        );
      }

      /**
       * Pads `string` on the right side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padEnd('abc', 6);
       * // => 'abc   '
       *
       * _.padEnd('abc', 6, '_-');
       * // => 'abc_-_'
       *
       * _.padEnd('abc', 3);
       * // => 'abc'
       */
      function padEnd(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (string + createPadding(length - strLength, chars))
          : string;
      }

      /**
       * Pads `string` on the left side if it's shorter than `length`. Padding
       * characters are truncated if they exceed `length`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to pad.
       * @param {number} [length=0] The padding length.
       * @param {string} [chars=' '] The string used as padding.
       * @returns {string} Returns the padded string.
       * @example
       *
       * _.padStart('abc', 6);
       * // => '   abc'
       *
       * _.padStart('abc', 6, '_-');
       * // => '_-_abc'
       *
       * _.padStart('abc', 3);
       * // => 'abc'
       */
      function padStart(string, length, chars) {
        string = toString(string);
        length = toInteger(length);

        var strLength = length ? stringSize(string) : 0;
        return (length && strLength < length)
          ? (createPadding(length - strLength, chars) + string)
          : string;
      }

      /**
       * Converts `string` to an integer of the specified radix. If `radix` is
       * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
       * hexadecimal, in which case a `radix` of `16` is used.
       *
       * **Note:** This method aligns with the
       * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
       *
       * @static
       * @memberOf _
       * @since 1.1.0
       * @category String
       * @param {string} string The string to convert.
       * @param {number} [radix=10] The radix to interpret `value` by.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {number} Returns the converted integer.
       * @example
       *
       * _.parseInt('08');
       * // => 8
       *
       * _.map(['6', '08', '10'], _.parseInt);
       * // => [6, 8, 10]
       */
      function parseInt(string, radix, guard) {
        if (guard || radix == null) {
          radix = 0;
        } else if (radix) {
          radix = +radix;
        }
        return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
      }

      /**
       * Repeats the given string `n` times.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to repeat.
       * @param {number} [n=1] The number of times to repeat the string.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the repeated string.
       * @example
       *
       * _.repeat('*', 3);
       * // => '***'
       *
       * _.repeat('abc', 2);
       * // => 'abcabc'
       *
       * _.repeat('abc', 0);
       * // => ''
       */
      function repeat(string, n, guard) {
        if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
          n = 1;
        } else {
          n = toInteger(n);
        }
        return baseRepeat(toString(string), n);
      }

      /**
       * Replaces matches for `pattern` in `string` with `replacement`.
       *
       * **Note:** This method is based on
       * [`String#replace`](https://mdn.io/String/replace).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to modify.
       * @param {RegExp|string} pattern The pattern to replace.
       * @param {Function|string} replacement The match replacement.
       * @returns {string} Returns the modified string.
       * @example
       *
       * _.replace('Hi Fred', 'Fred', 'Barney');
       * // => 'Hi Barney'
       */
      function replace() {
        var args = arguments,
            string = toString(args[0]);

        return args.length < 3 ? string : string.replace(args[1], args[2]);
      }

      /**
       * Converts `string` to
       * [snake case](https://en.wikipedia.org/wiki/Snake_case).
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the snake cased string.
       * @example
       *
       * _.snakeCase('Foo Bar');
       * // => 'foo_bar'
       *
       * _.snakeCase('fooBar');
       * // => 'foo_bar'
       *
       * _.snakeCase('--FOO-BAR--');
       * // => 'foo_bar'
       */
      var snakeCase = createCompounder(function(result, word, index) {
        return result + (index ? '_' : '') + word.toLowerCase();
      });

      /**
       * Splits `string` by `separator`.
       *
       * **Note:** This method is based on
       * [`String#split`](https://mdn.io/String/split).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to split.
       * @param {RegExp|string} separator The separator pattern to split by.
       * @param {number} [limit] The length to truncate results to.
       * @returns {Array} Returns the string segments.
       * @example
       *
       * _.split('a-b-c', '-', 2);
       * // => ['a', 'b']
       */
      function split(string, separator, limit) {
        if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
          separator = limit = undefined;
        }
        limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
        if (!limit) {
          return [];
        }
        string = toString(string);
        if (string && (
              typeof separator == 'string' ||
              (separator != null && !isRegExp(separator))
            )) {
          separator = baseToString(separator);
          if (!separator && hasUnicode(string)) {
            return castSlice(stringToArray(string), 0, limit);
          }
        }
        return string.split(separator, limit);
      }

      /**
       * Converts `string` to
       * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
       *
       * @static
       * @memberOf _
       * @since 3.1.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the start cased string.
       * @example
       *
       * _.startCase('--foo-bar--');
       * // => 'Foo Bar'
       *
       * _.startCase('fooBar');
       * // => 'Foo Bar'
       *
       * _.startCase('__FOO_BAR__');
       * // => 'FOO BAR'
       */
      var startCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + upperFirst(word);
      });

      /**
       * Checks if `string` starts with the given target string.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {string} [target] The string to search for.
       * @param {number} [position=0] The position to search from.
       * @returns {boolean} Returns `true` if `string` starts with `target`,
       *  else `false`.
       * @example
       *
       * _.startsWith('abc', 'a');
       * // => true
       *
       * _.startsWith('abc', 'b');
       * // => false
       *
       * _.startsWith('abc', 'b', 1);
       * // => true
       */
      function startsWith(string, target, position) {
        string = toString(string);
        position = position == null
          ? 0
          : baseClamp(toInteger(position), 0, string.length);

        target = baseToString(target);
        return string.slice(position, position + target.length) == target;
      }

      /**
       * Creates a compiled template function that can interpolate data properties
       * in "interpolate" delimiters, HTML-escape interpolated data properties in
       * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
       * properties may be accessed as free variables in the template. If a setting
       * object is given, it takes precedence over `_.templateSettings` values.
       *
       * **Note:** In the development build `_.template` utilizes
       * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
       * for easier debugging.
       *
       * For more information on precompiling templates see
       * [lodash's custom builds documentation](https://lodash.com/custom-builds).
       *
       * For more information on Chrome extension sandboxes see
       * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category String
       * @param {string} [string=''] The template string.
       * @param {Object} [options={}] The options object.
       * @param {RegExp} [options.escape=_.templateSettings.escape]
       *  The HTML "escape" delimiter.
       * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
       *  The "evaluate" delimiter.
       * @param {Object} [options.imports=_.templateSettings.imports]
       *  An object to import into the template as free variables.
       * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
       *  The "interpolate" delimiter.
       * @param {string} [options.sourceURL='lodash.templateSources[n]']
       *  The sourceURL of the compiled template.
       * @param {string} [options.variable='obj']
       *  The data object variable name.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Function} Returns the compiled template function.
       * @example
       *
       * // Use the "interpolate" delimiter to create a compiled template.
       * var compiled = _.template('hello <%= user %>!');
       * compiled({ 'user': 'fred' });
       * // => 'hello fred!'
       *
       * // Use the HTML "escape" delimiter to escape data property values.
       * var compiled = _.template('<b><%- value %></b>');
       * compiled({ 'value': '<script>' });
       * // => '<b>&lt;script&gt;</b>'
       *
       * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
       * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the internal `print` function in "evaluate" delimiters.
       * var compiled = _.template('<% print("hello " + user); %>!');
       * compiled({ 'user': 'barney' });
       * // => 'hello barney!'
       *
       * // Use the ES template literal delimiter as an "interpolate" delimiter.
       * // Disable support by replacing the "interpolate" delimiter.
       * var compiled = _.template('hello ${ user }!');
       * compiled({ 'user': 'pebbles' });
       * // => 'hello pebbles!'
       *
       * // Use backslashes to treat delimiters as plain text.
       * var compiled = _.template('<%= "\\<%- value %\\>" %>');
       * compiled({ 'value': 'ignored' });
       * // => '<%- value %>'
       *
       * // Use the `imports` option to import `jQuery` as `jq`.
       * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
       * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
       * compiled({ 'users': ['fred', 'barney'] });
       * // => '<li>fred</li><li>barney</li>'
       *
       * // Use the `sourceURL` option to specify a custom sourceURL for the template.
       * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
       * compiled(data);
       * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
       *
       * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
       * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
       * compiled.source;
       * // => function(data) {
       * //   var __t, __p = '';
       * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
       * //   return __p;
       * // }
       *
       * // Use custom template delimiters.
       * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
       * var compiled = _.template('hello {{ user }}!');
       * compiled({ 'user': 'mustache' });
       * // => 'hello mustache!'
       *
       * // Use the `source` property to inline compiled templates for meaningful
       * // line numbers in error messages and stack traces.
       * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
       *   var JST = {\
       *     "main": ' + _.template(mainText).source + '\
       *   };\
       * ');
       */
      function template(string, options, guard) {
        // Based on John Resig's `tmpl` implementation
        // (http://ejohn.org/blog/javascript-micro-templating/)
        // and Laura Doktorova's doT.js (https://github.com/olado/doT).
        var settings = lodash.templateSettings;

        if (guard && isIterateeCall(string, options, guard)) {
          options = undefined;
        }
        string = toString(string);
        options = assignInWith({}, options, settings, customDefaultsAssignIn);

        var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
            importsKeys = keys(imports),
            importsValues = baseValues(imports, importsKeys);

        var isEscaping,
            isEvaluating,
            index = 0,
            interpolate = options.interpolate || reNoMatch,
            source = "__p += '";

        // Compile the regexp to match each delimiter.
        var reDelimiters = RegExp(
          (options.escape || reNoMatch).source + '|' +
          interpolate.source + '|' +
          (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
          (options.evaluate || reNoMatch).source + '|$'
        , 'g');

        // Use a sourceURL for easier debugging.
        var sourceURL = '//# sourceURL=' +
          ('sourceURL' in options
            ? options.sourceURL
            : ('lodash.templateSources[' + (++templateCounter) + ']')
          ) + '\n';

        string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
          interpolateValue || (interpolateValue = esTemplateValue);

          // Escape characters that can't be included in string literals.
          source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

          // Replace delimiters with snippets.
          if (escapeValue) {
            isEscaping = true;
            source += "' +\n__e(" + escapeValue + ") +\n'";
          }
          if (evaluateValue) {
            isEvaluating = true;
            source += "';\n" + evaluateValue + ";\n__p += '";
          }
          if (interpolateValue) {
            source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
          }
          index = offset + match.length;

          // The JS engine embedded in Adobe products needs `match` returned in
          // order to produce the correct `offset` value.
          return match;
        });

        source += "';\n";

        // If `variable` is not specified wrap a with-statement around the generated
        // code to add the data object to the top of the scope chain.
        var variable = options.variable;
        if (!variable) {
          source = 'with (obj) {\n' + source + '\n}\n';
        }
        // Cleanup code by stripping empty strings.
        source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
          .replace(reEmptyStringMiddle, '$1')
          .replace(reEmptyStringTrailing, '$1;');

        // Frame code as the function body.
        source = 'function(' + (variable || 'obj') + ') {\n' +
          (variable
            ? ''
            : 'obj || (obj = {});\n'
          ) +
          "var __t, __p = ''" +
          (isEscaping
             ? ', __e = _.escape'
             : ''
          ) +
          (isEvaluating
            ? ', __j = Array.prototype.join;\n' +
              "function print() { __p += __j.call(arguments, '') }\n"
            : ';\n'
          ) +
          source +
          'return __p\n}';

        var result = attempt(function() {
          return Function(importsKeys, sourceURL + 'return ' + source)
            .apply(undefined, importsValues);
        });

        // Provide the compiled function's source by its `toString` method or
        // the `source` property as a convenience for inlining compiled templates.
        result.source = source;
        if (isError(result)) {
          throw result;
        }
        return result;
      }

      /**
       * Converts `string`, as a whole, to lower case just like
       * [String#toLowerCase](https://mdn.io/toLowerCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the lower cased string.
       * @example
       *
       * _.toLower('--Foo-Bar--');
       * // => '--foo-bar--'
       *
       * _.toLower('fooBar');
       * // => 'foobar'
       *
       * _.toLower('__FOO_BAR__');
       * // => '__foo_bar__'
       */
      function toLower(value) {
        return toString(value).toLowerCase();
      }

      /**
       * Converts `string`, as a whole, to upper case just like
       * [String#toUpperCase](https://mdn.io/toUpperCase).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.toUpper('--foo-bar--');
       * // => '--FOO-BAR--'
       *
       * _.toUpper('fooBar');
       * // => 'FOOBAR'
       *
       * _.toUpper('__foo_bar__');
       * // => '__FOO_BAR__'
       */
      function toUpper(value) {
        return toString(value).toUpperCase();
      }

      /**
       * Removes leading and trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trim('  abc  ');
       * // => 'abc'
       *
       * _.trim('-_-abc-_-', '_-');
       * // => 'abc'
       *
       * _.map(['  foo  ', '  bar  '], _.trim);
       * // => ['foo', 'bar']
       */
      function trim(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrim, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            chrSymbols = stringToArray(chars),
            start = charsStartIndex(strSymbols, chrSymbols),
            end = charsEndIndex(strSymbols, chrSymbols) + 1;

        return castSlice(strSymbols, start, end).join('');
      }

      /**
       * Removes trailing whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimEnd('  abc  ');
       * // => '  abc'
       *
       * _.trimEnd('-_-abc-_-', '_-');
       * // => '-_-abc'
       */
      function trimEnd(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimEnd, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

        return castSlice(strSymbols, 0, end).join('');
      }

      /**
       * Removes leading whitespace or specified characters from `string`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to trim.
       * @param {string} [chars=whitespace] The characters to trim.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {string} Returns the trimmed string.
       * @example
       *
       * _.trimStart('  abc  ');
       * // => 'abc  '
       *
       * _.trimStart('-_-abc-_-', '_-');
       * // => 'abc-_-'
       */
      function trimStart(string, chars, guard) {
        string = toString(string);
        if (string && (guard || chars === undefined)) {
          return string.replace(reTrimStart, '');
        }
        if (!string || !(chars = baseToString(chars))) {
          return string;
        }
        var strSymbols = stringToArray(string),
            start = charsStartIndex(strSymbols, stringToArray(chars));

        return castSlice(strSymbols, start).join('');
      }

      /**
       * Truncates `string` if it's longer than the given maximum string length.
       * The last characters of the truncated string are replaced with the omission
       * string which defaults to "...".
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to truncate.
       * @param {Object} [options={}] The options object.
       * @param {number} [options.length=30] The maximum string length.
       * @param {string} [options.omission='...'] The string to indicate text is omitted.
       * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
       * @returns {string} Returns the truncated string.
       * @example
       *
       * _.truncate('hi-diddly-ho there, neighborino');
       * // => 'hi-diddly-ho there, neighbo...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': ' '
       * });
       * // => 'hi-diddly-ho there,...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'length': 24,
       *   'separator': /,? +/
       * });
       * // => 'hi-diddly-ho there...'
       *
       * _.truncate('hi-diddly-ho there, neighborino', {
       *   'omission': ' [...]'
       * });
       * // => 'hi-diddly-ho there, neig [...]'
       */
      function truncate(string, options) {
        var length = DEFAULT_TRUNC_LENGTH,
            omission = DEFAULT_TRUNC_OMISSION;

        if (isObject(options)) {
          var separator = 'separator' in options ? options.separator : separator;
          length = 'length' in options ? toInteger(options.length) : length;
          omission = 'omission' in options ? baseToString(options.omission) : omission;
        }
        string = toString(string);

        var strLength = string.length;
        if (hasUnicode(string)) {
          var strSymbols = stringToArray(string);
          strLength = strSymbols.length;
        }
        if (length >= strLength) {
          return string;
        }
        var end = length - stringSize(omission);
        if (end < 1) {
          return omission;
        }
        var result = strSymbols
          ? castSlice(strSymbols, 0, end).join('')
          : string.slice(0, end);

        if (separator === undefined) {
          return result + omission;
        }
        if (strSymbols) {
          end += (result.length - end);
        }
        if (isRegExp(separator)) {
          if (string.slice(end).search(separator)) {
            var match,
                substring = result;

            if (!separator.global) {
              separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
            }
            separator.lastIndex = 0;
            while ((match = separator.exec(substring))) {
              var newEnd = match.index;
            }
            result = result.slice(0, newEnd === undefined ? end : newEnd);
          }
        } else if (string.indexOf(baseToString(separator), end) != end) {
          var index = result.lastIndexOf(separator);
          if (index > -1) {
            result = result.slice(0, index);
          }
        }
        return result + omission;
      }

      /**
       * The inverse of `_.escape`; this method converts the HTML entities
       * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
       * their corresponding characters.
       *
       * **Note:** No other HTML entities are unescaped. To unescape additional
       * HTML entities use a third-party library like [_he_](https://mths.be/he).
       *
       * @static
       * @memberOf _
       * @since 0.6.0
       * @category String
       * @param {string} [string=''] The string to unescape.
       * @returns {string} Returns the unescaped string.
       * @example
       *
       * _.unescape('fred, barney, &amp; pebbles');
       * // => 'fred, barney, & pebbles'
       */
      function unescape(string) {
        string = toString(string);
        return (string && reHasEscapedHtml.test(string))
          ? string.replace(reEscapedHtml, unescapeHtmlChar)
          : string;
      }

      /**
       * Converts `string`, as space separated words, to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the upper cased string.
       * @example
       *
       * _.upperCase('--foo-bar');
       * // => 'FOO BAR'
       *
       * _.upperCase('fooBar');
       * // => 'FOO BAR'
       *
       * _.upperCase('__foo_bar__');
       * // => 'FOO BAR'
       */
      var upperCase = createCompounder(function(result, word, index) {
        return result + (index ? ' ' : '') + word.toUpperCase();
      });

      /**
       * Converts the first character of `string` to upper case.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category String
       * @param {string} [string=''] The string to convert.
       * @returns {string} Returns the converted string.
       * @example
       *
       * _.upperFirst('fred');
       * // => 'Fred'
       *
       * _.upperFirst('FRED');
       * // => 'FRED'
       */
      var upperFirst = createCaseFirst('toUpperCase');

      /**
       * Splits `string` into an array of its words.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category String
       * @param {string} [string=''] The string to inspect.
       * @param {RegExp|string} [pattern] The pattern to match words.
       * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
       * @returns {Array} Returns the words of `string`.
       * @example
       *
       * _.words('fred, barney, & pebbles');
       * // => ['fred', 'barney', 'pebbles']
       *
       * _.words('fred, barney, & pebbles', /[^, ]+/g);
       * // => ['fred', 'barney', '&', 'pebbles']
       */
      function words(string, pattern, guard) {
        string = toString(string);
        pattern = guard ? undefined : pattern;

        if (pattern === undefined) {
          return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
        }
        return string.match(pattern) || [];
      }

      /*------------------------------------------------------------------------*/

      /**
       * Attempts to invoke `func`, returning either the result or the caught error
       * object. Any additional arguments are provided to `func` when it's invoked.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Function} func The function to attempt.
       * @param {...*} [args] The arguments to invoke `func` with.
       * @returns {*} Returns the `func` result or error object.
       * @example
       *
       * // Avoid throwing errors for invalid selectors.
       * var elements = _.attempt(function(selector) {
       *   return document.querySelectorAll(selector);
       * }, '>_>');
       *
       * if (_.isError(elements)) {
       *   elements = [];
       * }
       */
      var attempt = baseRest(function(func, args) {
        try {
          return apply(func, undefined, args);
        } catch (e) {
          return isError(e) ? e : new Error(e);
        }
      });

      /**
       * Binds methods of an object to the object itself, overwriting the existing
       * method.
       *
       * **Note:** This method doesn't set the "length" property of bound functions.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Object} object The object to bind and assign the bound methods to.
       * @param {...(string|string[])} methodNames The object method names to bind.
       * @returns {Object} Returns `object`.
       * @example
       *
       * var view = {
       *   'label': 'docs',
       *   'click': function() {
       *     console.log('clicked ' + this.label);
       *   }
       * };
       *
       * _.bindAll(view, ['click']);
       * jQuery(element).on('click', view.click);
       * // => Logs 'clicked docs' when clicked.
       */
      var bindAll = flatRest(function(object, methodNames) {
        arrayEach(methodNames, function(key) {
          key = toKey(key);
          baseAssignValue(object, key, bind(object[key], object));
        });
        return object;
      });

      /**
       * Creates a function that iterates over `pairs` and invokes the corresponding
       * function of the first predicate to return truthy. The predicate-function
       * pairs are invoked with the `this` binding and arguments of the created
       * function.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Array} pairs The predicate-function pairs.
       * @returns {Function} Returns the new composite function.
       * @example
       *
       * var func = _.cond([
       *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
       *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
       *   [_.stubTrue,                      _.constant('no match')]
       * ]);
       *
       * func({ 'a': 1, 'b': 2 });
       * // => 'matches A'
       *
       * func({ 'a': 0, 'b': 1 });
       * // => 'matches B'
       *
       * func({ 'a': '1', 'b': '2' });
       * // => 'no match'
       */
      function cond(pairs) {
        var length = pairs == null ? 0 : pairs.length,
            toIteratee = getIteratee();

        pairs = !length ? [] : arrayMap(pairs, function(pair) {
          if (typeof pair[1] != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          return [toIteratee(pair[0]), pair[1]];
        });

        return baseRest(function(args) {
          var index = -1;
          while (++index < length) {
            var pair = pairs[index];
            if (apply(pair[0], this, args)) {
              return apply(pair[1], this, args);
            }
          }
        });
      }

      /**
       * Creates a function that invokes the predicate properties of `source` with
       * the corresponding property values of a given object, returning `true` if
       * all predicates return truthy, else `false`.
       *
       * **Note:** The created function is equivalent to `_.conformsTo` with
       * `source` partially applied.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {Object} source The object of property predicates to conform to.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 2, 'b': 1 },
       *   { 'a': 1, 'b': 2 }
       * ];
       *
       * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
       * // => [{ 'a': 1, 'b': 2 }]
       */
      function conforms(source) {
        return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that returns `value`.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {*} value The value to return from the new function.
       * @returns {Function} Returns the new constant function.
       * @example
       *
       * var objects = _.times(2, _.constant({ 'a': 1 }));
       *
       * console.log(objects);
       * // => [{ 'a': 1 }, { 'a': 1 }]
       *
       * console.log(objects[0] === objects[1]);
       * // => true
       */
      function constant(value) {
        return function() {
          return value;
        };
      }

      /**
       * Checks `value` to determine whether a default value should be returned in
       * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
       * or `undefined`.
       *
       * @static
       * @memberOf _
       * @since 4.14.0
       * @category Util
       * @param {*} value The value to check.
       * @param {*} defaultValue The default value.
       * @returns {*} Returns the resolved value.
       * @example
       *
       * _.defaultTo(1, 10);
       * // => 1
       *
       * _.defaultTo(undefined, 10);
       * // => 10
       */
      function defaultTo(value, defaultValue) {
        return (value == null || value !== value) ? defaultValue : value;
      }

      /**
       * Creates a function that returns the result of invoking the given functions
       * with the `this` binding of the created function, where each successive
       * invocation is supplied the return value of the previous.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flowRight
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flow([_.add, square]);
       * addSquare(1, 2);
       * // => 9
       */
      var flow = createFlow();

      /**
       * This method is like `_.flow` except that it creates a function that
       * invokes the given functions from right to left.
       *
       * @static
       * @since 3.0.0
       * @memberOf _
       * @category Util
       * @param {...(Function|Function[])} [funcs] The functions to invoke.
       * @returns {Function} Returns the new composite function.
       * @see _.flow
       * @example
       *
       * function square(n) {
       *   return n * n;
       * }
       *
       * var addSquare = _.flowRight([square, _.add]);
       * addSquare(1, 2);
       * // => 9
       */
      var flowRight = createFlow(true);

      /**
       * This method returns the first argument it receives.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {*} value Any value.
       * @returns {*} Returns `value`.
       * @example
       *
       * var object = { 'a': 1 };
       *
       * console.log(_.identity(object) === object);
       * // => true
       */
      function identity(value) {
        return value;
      }

      /**
       * Creates a function that invokes `func` with the arguments of the created
       * function. If `func` is a property name, the created function returns the
       * property value for a given element. If `func` is an array or object, the
       * created function returns `true` for elements that contain the equivalent
       * source properties, otherwise it returns `false`.
       *
       * @static
       * @since 4.0.0
       * @memberOf _
       * @category Util
       * @param {*} [func=_.identity] The value to convert to a callback.
       * @returns {Function} Returns the callback.
       * @example
       *
       * var users = [
       *   { 'user': 'barney', 'age': 36, 'active': true },
       *   { 'user': 'fred',   'age': 40, 'active': false }
       * ];
       *
       * // The `_.matches` iteratee shorthand.
       * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
       * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
       *
       * // The `_.matchesProperty` iteratee shorthand.
       * _.filter(users, _.iteratee(['user', 'fred']));
       * // => [{ 'user': 'fred', 'age': 40 }]
       *
       * // The `_.property` iteratee shorthand.
       * _.map(users, _.iteratee('user'));
       * // => ['barney', 'fred']
       *
       * // Create custom iteratee shorthands.
       * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
       *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
       *     return func.test(string);
       *   };
       * });
       *
       * _.filter(['abc', 'def'], /ef/);
       * // => ['def']
       */
      function iteratee(func) {
        return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between a given
       * object and `source`, returning `true` if the given object has equivalent
       * property values, else `false`.
       *
       * **Note:** The created function is equivalent to `_.isMatch` with `source`
       * partially applied.
       *
       * Partial comparisons will match empty array and empty object `source`
       * values against any array or object value, respectively. See `_.isEqual`
       * for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} source The object of property values to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
       * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
       */
      function matches(source) {
        return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that performs a partial deep comparison between the
       * value at `path` of a given object to `srcValue`, returning `true` if the
       * object value is equivalent, else `false`.
       *
       * **Note:** Partial comparisons will match empty array and empty object
       * `srcValue` values against any array or object value, respectively. See
       * `_.isEqual` for a list of supported value comparisons.
       *
       * @static
       * @memberOf _
       * @since 3.2.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @param {*} srcValue The value to match.
       * @returns {Function} Returns the new spec function.
       * @example
       *
       * var objects = [
       *   { 'a': 1, 'b': 2, 'c': 3 },
       *   { 'a': 4, 'b': 5, 'c': 6 }
       * ];
       *
       * _.find(objects, _.matchesProperty('a', 4));
       * // => { 'a': 4, 'b': 5, 'c': 6 }
       */
      function matchesProperty(path, srcValue) {
        return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
      }

      /**
       * Creates a function that invokes the method at `path` of a given object.
       * Any additional arguments are provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Array|string} path The path of the method to invoke.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': _.constant(2) } },
       *   { 'a': { 'b': _.constant(1) } }
       * ];
       *
       * _.map(objects, _.method('a.b'));
       * // => [2, 1]
       *
       * _.map(objects, _.method(['a', 'b']));
       * // => [2, 1]
       */
      var method = baseRest(function(path, args) {
        return function(object) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * The opposite of `_.method`; this method creates a function that invokes
       * the method at a given path of `object`. Any additional arguments are
       * provided to the invoked method.
       *
       * @static
       * @memberOf _
       * @since 3.7.0
       * @category Util
       * @param {Object} object The object to query.
       * @param {...*} [args] The arguments to invoke the method with.
       * @returns {Function} Returns the new invoker function.
       * @example
       *
       * var array = _.times(3, _.constant),
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.methodOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
       * // => [2, 0]
       */
      var methodOf = baseRest(function(object, args) {
        return function(path) {
          return baseInvoke(object, path, args);
        };
      });

      /**
       * Adds all own enumerable string keyed function properties of a source
       * object to the destination object. If `object` is a function, then methods
       * are added to its prototype as well.
       *
       * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
       * avoid conflicts caused by modifying the original.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {Function|Object} [object=lodash] The destination object.
       * @param {Object} source The object of functions to add.
       * @param {Object} [options={}] The options object.
       * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
       * @returns {Function|Object} Returns `object`.
       * @example
       *
       * function vowels(string) {
       *   return _.filter(string, function(v) {
       *     return /[aeiou]/i.test(v);
       *   });
       * }
       *
       * _.mixin({ 'vowels': vowels });
       * _.vowels('fred');
       * // => ['e']
       *
       * _('fred').vowels().value();
       * // => ['e']
       *
       * _.mixin({ 'vowels': vowels }, { 'chain': false });
       * _('fred').vowels();
       * // => ['e']
       */
      function mixin(object, source, options) {
        var props = keys(source),
            methodNames = baseFunctions(source, props);

        if (options == null &&
            !(isObject(source) && (methodNames.length || !props.length))) {
          options = source;
          source = object;
          object = this;
          methodNames = baseFunctions(source, keys(source));
        }
        var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
            isFunc = isFunction(object);

        arrayEach(methodNames, function(methodName) {
          var func = source[methodName];
          object[methodName] = func;
          if (isFunc) {
            object.prototype[methodName] = function() {
              var chainAll = this.__chain__;
              if (chain || chainAll) {
                var result = object(this.__wrapped__),
                    actions = result.__actions__ = copyArray(this.__actions__);

                actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
                result.__chain__ = chainAll;
                return result;
              }
              return func.apply(object, arrayPush([this.value()], arguments));
            };
          }
        });

        return object;
      }

      /**
       * Reverts the `_` variable to its previous value and returns a reference to
       * the `lodash` function.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @returns {Function} Returns the `lodash` function.
       * @example
       *
       * var lodash = _.noConflict();
       */
      function noConflict() {
        if (root._ === this) {
          root._ = oldDash;
        }
        return this;
      }

      /**
       * This method returns `undefined`.
       *
       * @static
       * @memberOf _
       * @since 2.3.0
       * @category Util
       * @example
       *
       * _.times(2, _.noop);
       * // => [undefined, undefined]
       */
      function noop() {
        // No operation performed.
      }

      /**
       * Creates a function that gets the argument at index `n`. If `n` is negative,
       * the nth argument from the end is returned.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [n=0] The index of the argument to return.
       * @returns {Function} Returns the new pass-thru function.
       * @example
       *
       * var func = _.nthArg(1);
       * func('a', 'b', 'c', 'd');
       * // => 'b'
       *
       * var func = _.nthArg(-2);
       * func('a', 'b', 'c', 'd');
       * // => 'c'
       */
      function nthArg(n) {
        n = toInteger(n);
        return baseRest(function(args) {
          return baseNth(args, n);
        });
      }

      /**
       * Creates a function that invokes `iteratees` with the arguments it receives
       * and returns their results.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [iteratees=[_.identity]]
       *  The iteratees to invoke.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.over([Math.max, Math.min]);
       *
       * func(1, 2, 3, 4);
       * // => [4, 1]
       */
      var over = createOver(arrayMap);

      /**
       * Creates a function that checks if **all** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overEvery([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => false
       *
       * func(NaN);
       * // => false
       */
      var overEvery = createOver(arrayEvery);

      /**
       * Creates a function that checks if **any** of the `predicates` return
       * truthy when invoked with the arguments it receives.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {...(Function|Function[])} [predicates=[_.identity]]
       *  The predicates to check.
       * @returns {Function} Returns the new function.
       * @example
       *
       * var func = _.overSome([Boolean, isFinite]);
       *
       * func('1');
       * // => true
       *
       * func(null);
       * // => true
       *
       * func(NaN);
       * // => false
       */
      var overSome = createOver(arraySome);

      /**
       * Creates a function that returns the value at `path` of a given object.
       *
       * @static
       * @memberOf _
       * @since 2.4.0
       * @category Util
       * @param {Array|string} path The path of the property to get.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var objects = [
       *   { 'a': { 'b': 2 } },
       *   { 'a': { 'b': 1 } }
       * ];
       *
       * _.map(objects, _.property('a.b'));
       * // => [2, 1]
       *
       * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
       * // => [1, 2]
       */
      function property(path) {
        return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
      }

      /**
       * The opposite of `_.property`; this method creates a function that returns
       * the value at a given path of `object`.
       *
       * @static
       * @memberOf _
       * @since 3.0.0
       * @category Util
       * @param {Object} object The object to query.
       * @returns {Function} Returns the new accessor function.
       * @example
       *
       * var array = [0, 1, 2],
       *     object = { 'a': array, 'b': array, 'c': array };
       *
       * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
       * // => [2, 0]
       *
       * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
       * // => [2, 0]
       */
      function propertyOf(object) {
        return function(path) {
          return object == null ? undefined : baseGet(object, path);
        };
      }

      /**
       * Creates an array of numbers (positive and/or negative) progressing from
       * `start` up to, but not including, `end`. A step of `-1` is used if a negative
       * `start` is specified without an `end` or `step`. If `end` is not specified,
       * it's set to `start` with `start` then set to `0`.
       *
       * **Note:** JavaScript follows the IEEE-754 standard for resolving
       * floating-point values which can produce unexpected results.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.rangeRight
       * @example
       *
       * _.range(4);
       * // => [0, 1, 2, 3]
       *
       * _.range(-4);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 5);
       * // => [1, 2, 3, 4]
       *
       * _.range(0, 20, 5);
       * // => [0, 5, 10, 15]
       *
       * _.range(0, -4, -1);
       * // => [0, -1, -2, -3]
       *
       * _.range(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.range(0);
       * // => []
       */
      var range = createRange();

      /**
       * This method is like `_.range` except that it populates values in
       * descending order.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {number} [start=0] The start of the range.
       * @param {number} end The end of the range.
       * @param {number} [step=1] The value to increment or decrement by.
       * @returns {Array} Returns the range of numbers.
       * @see _.inRange, _.range
       * @example
       *
       * _.rangeRight(4);
       * // => [3, 2, 1, 0]
       *
       * _.rangeRight(-4);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 5);
       * // => [4, 3, 2, 1]
       *
       * _.rangeRight(0, 20, 5);
       * // => [15, 10, 5, 0]
       *
       * _.rangeRight(0, -4, -1);
       * // => [-3, -2, -1, 0]
       *
       * _.rangeRight(1, 4, 0);
       * // => [1, 1, 1]
       *
       * _.rangeRight(0);
       * // => []
       */
      var rangeRight = createRange(true);

      /**
       * This method returns a new empty array.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Array} Returns the new empty array.
       * @example
       *
       * var arrays = _.times(2, _.stubArray);
       *
       * console.log(arrays);
       * // => [[], []]
       *
       * console.log(arrays[0] === arrays[1]);
       * // => false
       */
      function stubArray() {
        return [];
      }

      /**
       * This method returns `false`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `false`.
       * @example
       *
       * _.times(2, _.stubFalse);
       * // => [false, false]
       */
      function stubFalse() {
        return false;
      }

      /**
       * This method returns a new empty object.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {Object} Returns the new empty object.
       * @example
       *
       * var objects = _.times(2, _.stubObject);
       *
       * console.log(objects);
       * // => [{}, {}]
       *
       * console.log(objects[0] === objects[1]);
       * // => false
       */
      function stubObject() {
        return {};
      }

      /**
       * This method returns an empty string.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {string} Returns the empty string.
       * @example
       *
       * _.times(2, _.stubString);
       * // => ['', '']
       */
      function stubString() {
        return '';
      }

      /**
       * This method returns `true`.
       *
       * @static
       * @memberOf _
       * @since 4.13.0
       * @category Util
       * @returns {boolean} Returns `true`.
       * @example
       *
       * _.times(2, _.stubTrue);
       * // => [true, true]
       */
      function stubTrue() {
        return true;
      }

      /**
       * Invokes the iteratee `n` times, returning an array of the results of
       * each invocation. The iteratee is invoked with one argument; (index).
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {number} n The number of times to invoke `iteratee`.
       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
       * @returns {Array} Returns the array of results.
       * @example
       *
       * _.times(3, String);
       * // => ['0', '1', '2']
       *
       *  _.times(4, _.constant(0));
       * // => [0, 0, 0, 0]
       */
      function times(n, iteratee) {
        n = toInteger(n);
        if (n < 1 || n > MAX_SAFE_INTEGER) {
          return [];
        }
        var index = MAX_ARRAY_LENGTH,
            length = nativeMin(n, MAX_ARRAY_LENGTH);

        iteratee = getIteratee(iteratee);
        n -= MAX_ARRAY_LENGTH;

        var result = baseTimes(length, iteratee);
        while (++index < n) {
          iteratee(index);
        }
        return result;
      }

      /**
       * Converts `value` to a property path array.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Util
       * @param {*} value The value to convert.
       * @returns {Array} Returns the new property path array.
       * @example
       *
       * _.toPath('a.b.c');
       * // => ['a', 'b', 'c']
       *
       * _.toPath('a[0].b.c');
       * // => ['a', '0', 'b', 'c']
       */
      function toPath(value) {
        if (isArray(value)) {
          return arrayMap(value, toKey);
        }
        return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
      }

      /**
       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Util
       * @param {string} [prefix=''] The value to prefix the ID with.
       * @returns {string} Returns the unique ID.
       * @example
       *
       * _.uniqueId('contact_');
       * // => 'contact_104'
       *
       * _.uniqueId();
       * // => '105'
       */
      function uniqueId(prefix) {
        var id = ++idCounter;
        return toString(prefix) + id;
      }

      /*------------------------------------------------------------------------*/

      /**
       * Adds two numbers.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {number} augend The first number in an addition.
       * @param {number} addend The second number in an addition.
       * @returns {number} Returns the total.
       * @example
       *
       * _.add(6, 4);
       * // => 10
       */
      var add = createMathOperation(function(augend, addend) {
        return augend + addend;
      }, 0);

      /**
       * Computes `number` rounded up to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round up.
       * @param {number} [precision=0] The precision to round up to.
       * @returns {number} Returns the rounded up number.
       * @example
       *
       * _.ceil(4.006);
       * // => 5
       *
       * _.ceil(6.004, 2);
       * // => 6.01
       *
       * _.ceil(6040, -2);
       * // => 6100
       */
      var ceil = createRound('ceil');

      /**
       * Divide two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} dividend The first number in a division.
       * @param {number} divisor The second number in a division.
       * @returns {number} Returns the quotient.
       * @example
       *
       * _.divide(6, 4);
       * // => 1.5
       */
      var divide = createMathOperation(function(dividend, divisor) {
        return dividend / divisor;
      }, 1);

      /**
       * Computes `number` rounded down to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round down.
       * @param {number} [precision=0] The precision to round down to.
       * @returns {number} Returns the rounded down number.
       * @example
       *
       * _.floor(4.006);
       * // => 4
       *
       * _.floor(0.046, 2);
       * // => 0.04
       *
       * _.floor(4060, -2);
       * // => 4000
       */
      var floor = createRound('floor');

      /**
       * Computes the maximum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * _.max([4, 2, 8, 6]);
       * // => 8
       *
       * _.max([]);
       * // => undefined
       */
      function max(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseGt)
          : undefined;
      }

      /**
       * This method is like `_.max` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the maximum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.maxBy(objects, function(o) { return o.n; });
       * // => { 'n': 2 }
       *
       * // The `_.property` iteratee shorthand.
       * _.maxBy(objects, 'n');
       * // => { 'n': 2 }
       */
      function maxBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
          : undefined;
      }

      /**
       * Computes the mean of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the mean.
       * @example
       *
       * _.mean([4, 2, 8, 6]);
       * // => 5
       */
      function mean(array) {
        return baseMean(array, identity);
      }

      /**
       * This method is like `_.mean` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be averaged.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the mean.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.meanBy(objects, function(o) { return o.n; });
       * // => 5
       *
       * // The `_.property` iteratee shorthand.
       * _.meanBy(objects, 'n');
       * // => 5
       */
      function meanBy(array, iteratee) {
        return baseMean(array, getIteratee(iteratee, 2));
      }

      /**
       * Computes the minimum value of `array`. If `array` is empty or falsey,
       * `undefined` is returned.
       *
       * @static
       * @since 0.1.0
       * @memberOf _
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * _.min([4, 2, 8, 6]);
       * // => 2
       *
       * _.min([]);
       * // => undefined
       */
      function min(array) {
        return (array && array.length)
          ? baseExtremum(array, identity, baseLt)
          : undefined;
      }

      /**
       * This method is like `_.min` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the criterion by which
       * the value is ranked. The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {*} Returns the minimum value.
       * @example
       *
       * var objects = [{ 'n': 1 }, { 'n': 2 }];
       *
       * _.minBy(objects, function(o) { return o.n; });
       * // => { 'n': 1 }
       *
       * // The `_.property` iteratee shorthand.
       * _.minBy(objects, 'n');
       * // => { 'n': 1 }
       */
      function minBy(array, iteratee) {
        return (array && array.length)
          ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
          : undefined;
      }

      /**
       * Multiply two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.7.0
       * @category Math
       * @param {number} multiplier The first number in a multiplication.
       * @param {number} multiplicand The second number in a multiplication.
       * @returns {number} Returns the product.
       * @example
       *
       * _.multiply(6, 4);
       * // => 24
       */
      var multiply = createMathOperation(function(multiplier, multiplicand) {
        return multiplier * multiplicand;
      }, 1);

      /**
       * Computes `number` rounded to `precision`.
       *
       * @static
       * @memberOf _
       * @since 3.10.0
       * @category Math
       * @param {number} number The number to round.
       * @param {number} [precision=0] The precision to round to.
       * @returns {number} Returns the rounded number.
       * @example
       *
       * _.round(4.006);
       * // => 4
       *
       * _.round(4.006, 2);
       * // => 4.01
       *
       * _.round(4060, -2);
       * // => 4100
       */
      var round = createRound('round');

      /**
       * Subtract two numbers.
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {number} minuend The first number in a subtraction.
       * @param {number} subtrahend The second number in a subtraction.
       * @returns {number} Returns the difference.
       * @example
       *
       * _.subtract(6, 4);
       * // => 2
       */
      var subtract = createMathOperation(function(minuend, subtrahend) {
        return minuend - subtrahend;
      }, 0);

      /**
       * Computes the sum of the values in `array`.
       *
       * @static
       * @memberOf _
       * @since 3.4.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @returns {number} Returns the sum.
       * @example
       *
       * _.sum([4, 2, 8, 6]);
       * // => 20
       */
      function sum(array) {
        return (array && array.length)
          ? baseSum(array, identity)
          : 0;
      }

      /**
       * This method is like `_.sum` except that it accepts `iteratee` which is
       * invoked for each element in `array` to generate the value to be summed.
       * The iteratee is invoked with one argument: (value).
       *
       * @static
       * @memberOf _
       * @since 4.0.0
       * @category Math
       * @param {Array} array The array to iterate over.
       * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
       * @returns {number} Returns the sum.
       * @example
       *
       * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
       *
       * _.sumBy(objects, function(o) { return o.n; });
       * // => 20
       *
       * // The `_.property` iteratee shorthand.
       * _.sumBy(objects, 'n');
       * // => 20
       */
      function sumBy(array, iteratee) {
        return (array && array.length)
          ? baseSum(array, getIteratee(iteratee, 2))
          : 0;
      }

      /*------------------------------------------------------------------------*/

      // Add methods that return wrapped values in chain sequences.
      lodash.after = after;
      lodash.ary = ary;
      lodash.assign = assign;
      lodash.assignIn = assignIn;
      lodash.assignInWith = assignInWith;
      lodash.assignWith = assignWith;
      lodash.at = at;
      lodash.before = before;
      lodash.bind = bind;
      lodash.bindAll = bindAll;
      lodash.bindKey = bindKey;
      lodash.castArray = castArray;
      lodash.chain = chain;
      lodash.chunk = chunk;
      lodash.compact = compact;
      lodash.concat = concat;
      lodash.cond = cond;
      lodash.conforms = conforms;
      lodash.constant = constant;
      lodash.countBy = countBy;
      lodash.create = create;
      lodash.curry = curry;
      lodash.curryRight = curryRight;
      lodash.debounce = debounce;
      lodash.defaults = defaults;
      lodash.defaultsDeep = defaultsDeep;
      lodash.defer = defer;
      lodash.delay = delay;
      lodash.difference = difference;
      lodash.differenceBy = differenceBy;
      lodash.differenceWith = differenceWith;
      lodash.drop = drop;
      lodash.dropRight = dropRight;
      lodash.dropRightWhile = dropRightWhile;
      lodash.dropWhile = dropWhile;
      lodash.fill = fill;
      lodash.filter = filter;
      lodash.flatMap = flatMap;
      lodash.flatMapDeep = flatMapDeep;
      lodash.flatMapDepth = flatMapDepth;
      lodash.flatten = flatten;
      lodash.flattenDeep = flattenDeep;
      lodash.flattenDepth = flattenDepth;
      lodash.flip = flip;
      lodash.flow = flow;
      lodash.flowRight = flowRight;
      lodash.fromPairs = fromPairs;
      lodash.functions = functions;
      lodash.functionsIn = functionsIn;
      lodash.groupBy = groupBy;
      lodash.initial = initial;
      lodash.intersection = intersection;
      lodash.intersectionBy = intersectionBy;
      lodash.intersectionWith = intersectionWith;
      lodash.invert = invert;
      lodash.invertBy = invertBy;
      lodash.invokeMap = invokeMap;
      lodash.iteratee = iteratee;
      lodash.keyBy = keyBy;
      lodash.keys = keys;
      lodash.keysIn = keysIn;
      lodash.map = map;
      lodash.mapKeys = mapKeys;
      lodash.mapValues = mapValues;
      lodash.matches = matches;
      lodash.matchesProperty = matchesProperty;
      lodash.memoize = memoize;
      lodash.merge = merge;
      lodash.mergeWith = mergeWith;
      lodash.method = method;
      lodash.methodOf = methodOf;
      lodash.mixin = mixin;
      lodash.negate = negate;
      lodash.nthArg = nthArg;
      lodash.omit = omit;
      lodash.omitBy = omitBy;
      lodash.once = once;
      lodash.orderBy = orderBy;
      lodash.over = over;
      lodash.overArgs = overArgs;
      lodash.overEvery = overEvery;
      lodash.overSome = overSome;
      lodash.partial = partial;
      lodash.partialRight = partialRight;
      lodash.partition = partition;
      lodash.pick = pick;
      lodash.pickBy = pickBy;
      lodash.property = property;
      lodash.propertyOf = propertyOf;
      lodash.pull = pull;
      lodash.pullAll = pullAll;
      lodash.pullAllBy = pullAllBy;
      lodash.pullAllWith = pullAllWith;
      lodash.pullAt = pullAt;
      lodash.range = range;
      lodash.rangeRight = rangeRight;
      lodash.rearg = rearg;
      lodash.reject = reject;
      lodash.remove = remove;
      lodash.rest = rest;
      lodash.reverse = reverse;
      lodash.sampleSize = sampleSize;
      lodash.set = set;
      lodash.setWith = setWith;
      lodash.shuffle = shuffle;
      lodash.slice = slice;
      lodash.sortBy = sortBy;
      lodash.sortedUniq = sortedUniq;
      lodash.sortedUniqBy = sortedUniqBy;
      lodash.split = split;
      lodash.spread = spread;
      lodash.tail = tail;
      lodash.take = take;
      lodash.takeRight = takeRight;
      lodash.takeRightWhile = takeRightWhile;
      lodash.takeWhile = takeWhile;
      lodash.tap = tap;
      lodash.throttle = throttle;
      lodash.thru = thru;
      lodash.toArray = toArray;
      lodash.toPairs = toPairs;
      lodash.toPairsIn = toPairsIn;
      lodash.toPath = toPath;
      lodash.toPlainObject = toPlainObject;
      lodash.transform = transform;
      lodash.unary = unary;
      lodash.union = union;
      lodash.unionBy = unionBy;
      lodash.unionWith = unionWith;
      lodash.uniq = uniq;
      lodash.uniqBy = uniqBy;
      lodash.uniqWith = uniqWith;
      lodash.unset = unset;
      lodash.unzip = unzip;
      lodash.unzipWith = unzipWith;
      lodash.update = update;
      lodash.updateWith = updateWith;
      lodash.values = values;
      lodash.valuesIn = valuesIn;
      lodash.without = without;
      lodash.words = words;
      lodash.wrap = wrap;
      lodash.xor = xor;
      lodash.xorBy = xorBy;
      lodash.xorWith = xorWith;
      lodash.zip = zip;
      lodash.zipObject = zipObject;
      lodash.zipObjectDeep = zipObjectDeep;
      lodash.zipWith = zipWith;

      // Add aliases.
      lodash.entries = toPairs;
      lodash.entriesIn = toPairsIn;
      lodash.extend = assignIn;
      lodash.extendWith = assignInWith;

      // Add methods to `lodash.prototype`.
      mixin(lodash, lodash);

      /*------------------------------------------------------------------------*/

      // Add methods that return unwrapped values in chain sequences.
      lodash.add = add;
      lodash.attempt = attempt;
      lodash.camelCase = camelCase;
      lodash.capitalize = capitalize;
      lodash.ceil = ceil;
      lodash.clamp = clamp;
      lodash.clone = clone;
      lodash.cloneDeep = cloneDeep;
      lodash.cloneDeepWith = cloneDeepWith;
      lodash.cloneWith = cloneWith;
      lodash.conformsTo = conformsTo;
      lodash.deburr = deburr;
      lodash.defaultTo = defaultTo;
      lodash.divide = divide;
      lodash.endsWith = endsWith;
      lodash.eq = eq;
      lodash.escape = escape;
      lodash.escapeRegExp = escapeRegExp;
      lodash.every = every;
      lodash.find = find;
      lodash.findIndex = findIndex;
      lodash.findKey = findKey;
      lodash.findLast = findLast;
      lodash.findLastIndex = findLastIndex;
      lodash.findLastKey = findLastKey;
      lodash.floor = floor;
      lodash.forEach = forEach;
      lodash.forEachRight = forEachRight;
      lodash.forIn = forIn;
      lodash.forInRight = forInRight;
      lodash.forOwn = forOwn;
      lodash.forOwnRight = forOwnRight;
      lodash.get = get;
      lodash.gt = gt;
      lodash.gte = gte;
      lodash.has = has;
      lodash.hasIn = hasIn;
      lodash.head = head;
      lodash.identity = identity;
      lodash.includes = includes;
      lodash.indexOf = indexOf;
      lodash.inRange = inRange;
      lodash.invoke = invoke;
      lodash.isArguments = isArguments;
      lodash.isArray = isArray;
      lodash.isArrayBuffer = isArrayBuffer;
      lodash.isArrayLike = isArrayLike;
      lodash.isArrayLikeObject = isArrayLikeObject;
      lodash.isBoolean = isBoolean;
      lodash.isBuffer = isBuffer;
      lodash.isDate = isDate;
      lodash.isElement = isElement;
      lodash.isEmpty = isEmpty;
      lodash.isEqual = isEqual;
      lodash.isEqualWith = isEqualWith;
      lodash.isError = isError;
      lodash.isFinite = isFinite;
      lodash.isFunction = isFunction;
      lodash.isInteger = isInteger;
      lodash.isLength = isLength;
      lodash.isMap = isMap;
      lodash.isMatch = isMatch;
      lodash.isMatchWith = isMatchWith;
      lodash.isNaN = isNaN;
      lodash.isNative = isNative;
      lodash.isNil = isNil;
      lodash.isNull = isNull;
      lodash.isNumber = isNumber;
      lodash.isObject = isObject;
      lodash.isObjectLike = isObjectLike;
      lodash.isPlainObject = isPlainObject;
      lodash.isRegExp = isRegExp;
      lodash.isSafeInteger = isSafeInteger;
      lodash.isSet = isSet;
      lodash.isString = isString;
      lodash.isSymbol = isSymbol;
      lodash.isTypedArray = isTypedArray;
      lodash.isUndefined = isUndefined;
      lodash.isWeakMap = isWeakMap;
      lodash.isWeakSet = isWeakSet;
      lodash.join = join;
      lodash.kebabCase = kebabCase;
      lodash.last = last;
      lodash.lastIndexOf = lastIndexOf;
      lodash.lowerCase = lowerCase;
      lodash.lowerFirst = lowerFirst;
      lodash.lt = lt;
      lodash.lte = lte;
      lodash.max = max;
      lodash.maxBy = maxBy;
      lodash.mean = mean;
      lodash.meanBy = meanBy;
      lodash.min = min;
      lodash.minBy = minBy;
      lodash.stubArray = stubArray;
      lodash.stubFalse = stubFalse;
      lodash.stubObject = stubObject;
      lodash.stubString = stubString;
      lodash.stubTrue = stubTrue;
      lodash.multiply = multiply;
      lodash.nth = nth;
      lodash.noConflict = noConflict;
      lodash.noop = noop;
      lodash.now = now;
      lodash.pad = pad;
      lodash.padEnd = padEnd;
      lodash.padStart = padStart;
      lodash.parseInt = parseInt;
      lodash.random = random;
      lodash.reduce = reduce;
      lodash.reduceRight = reduceRight;
      lodash.repeat = repeat;
      lodash.replace = replace;
      lodash.result = result;
      lodash.round = round;
      lodash.runInContext = runInContext;
      lodash.sample = sample;
      lodash.size = size;
      lodash.snakeCase = snakeCase;
      lodash.some = some;
      lodash.sortedIndex = sortedIndex;
      lodash.sortedIndexBy = sortedIndexBy;
      lodash.sortedIndexOf = sortedIndexOf;
      lodash.sortedLastIndex = sortedLastIndex;
      lodash.sortedLastIndexBy = sortedLastIndexBy;
      lodash.sortedLastIndexOf = sortedLastIndexOf;
      lodash.startCase = startCase;
      lodash.startsWith = startsWith;
      lodash.subtract = subtract;
      lodash.sum = sum;
      lodash.sumBy = sumBy;
      lodash.template = template;
      lodash.times = times;
      lodash.toFinite = toFinite;
      lodash.toInteger = toInteger;
      lodash.toLength = toLength;
      lodash.toLower = toLower;
      lodash.toNumber = toNumber;
      lodash.toSafeInteger = toSafeInteger;
      lodash.toString = toString;
      lodash.toUpper = toUpper;
      lodash.trim = trim;
      lodash.trimEnd = trimEnd;
      lodash.trimStart = trimStart;
      lodash.truncate = truncate;
      lodash.unescape = unescape;
      lodash.uniqueId = uniqueId;
      lodash.upperCase = upperCase;
      lodash.upperFirst = upperFirst;

      // Add aliases.
      lodash.each = forEach;
      lodash.eachRight = forEachRight;
      lodash.first = head;

      mixin(lodash, (function() {
        var source = {};
        baseForOwn(lodash, function(func, methodName) {
          if (!hasOwnProperty.call(lodash.prototype, methodName)) {
            source[methodName] = func;
          }
        });
        return source;
      }()), { 'chain': false });

      /*------------------------------------------------------------------------*/

      /**
       * The semantic version number.
       *
       * @static
       * @memberOf _
       * @type {string}
       */
      lodash.VERSION = VERSION;

      // Assign default placeholders.
      arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
        lodash[methodName].placeholder = lodash;
      });

      // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
      arrayEach(['drop', 'take'], function(methodName, index) {
        LazyWrapper.prototype[methodName] = function(n) {
          n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

          var result = (this.__filtered__ && !index)
            ? new LazyWrapper(this)
            : this.clone();

          if (result.__filtered__) {
            result.__takeCount__ = nativeMin(n, result.__takeCount__);
          } else {
            result.__views__.push({
              'size': nativeMin(n, MAX_ARRAY_LENGTH),
              'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
            });
          }
          return result;
        };

        LazyWrapper.prototype[methodName + 'Right'] = function(n) {
          return this.reverse()[methodName](n).reverse();
        };
      });

      // Add `LazyWrapper` methods that accept an `iteratee` value.
      arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
        var type = index + 1,
            isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

        LazyWrapper.prototype[methodName] = function(iteratee) {
          var result = this.clone();
          result.__iteratees__.push({
            'iteratee': getIteratee(iteratee, 3),
            'type': type
          });
          result.__filtered__ = result.__filtered__ || isFilter;
          return result;
        };
      });

      // Add `LazyWrapper` methods for `_.head` and `_.last`.
      arrayEach(['head', 'last'], function(methodName, index) {
        var takeName = 'take' + (index ? 'Right' : '');

        LazyWrapper.prototype[methodName] = function() {
          return this[takeName](1).value()[0];
        };
      });

      // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
      arrayEach(['initial', 'tail'], function(methodName, index) {
        var dropName = 'drop' + (index ? '' : 'Right');

        LazyWrapper.prototype[methodName] = function() {
          return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
        };
      });

      LazyWrapper.prototype.compact = function() {
        return this.filter(identity);
      };

      LazyWrapper.prototype.find = function(predicate) {
        return this.filter(predicate).head();
      };

      LazyWrapper.prototype.findLast = function(predicate) {
        return this.reverse().find(predicate);
      };

      LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
        if (typeof path == 'function') {
          return new LazyWrapper(this);
        }
        return this.map(function(value) {
          return baseInvoke(value, path, args);
        });
      });

      LazyWrapper.prototype.reject = function(predicate) {
        return this.filter(negate(getIteratee(predicate)));
      };

      LazyWrapper.prototype.slice = function(start, end) {
        start = toInteger(start);

        var result = this;
        if (result.__filtered__ && (start > 0 || end < 0)) {
          return new LazyWrapper(result);
        }
        if (start < 0) {
          result = result.takeRight(-start);
        } else if (start) {
          result = result.drop(start);
        }
        if (end !== undefined) {
          end = toInteger(end);
          result = end < 0 ? result.dropRight(-end) : result.take(end - start);
        }
        return result;
      };

      LazyWrapper.prototype.takeRightWhile = function(predicate) {
        return this.reverse().takeWhile(predicate).reverse();
      };

      LazyWrapper.prototype.toArray = function() {
        return this.take(MAX_ARRAY_LENGTH);
      };

      // Add `LazyWrapper` methods to `lodash.prototype`.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
            isTaker = /^(?:head|last)$/.test(methodName),
            lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
            retUnwrapped = isTaker || /^find/.test(methodName);

        if (!lodashFunc) {
          return;
        }
        lodash.prototype[methodName] = function() {
          var value = this.__wrapped__,
              args = isTaker ? [1] : arguments,
              isLazy = value instanceof LazyWrapper,
              iteratee = args[0],
              useLazy = isLazy || isArray(value);

          var interceptor = function(value) {
            var result = lodashFunc.apply(lodash, arrayPush([value], args));
            return (isTaker && chainAll) ? result[0] : result;
          };

          if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
            // Avoid lazy use if the iteratee has a "length" value other than `1`.
            isLazy = useLazy = false;
          }
          var chainAll = this.__chain__,
              isHybrid = !!this.__actions__.length,
              isUnwrapped = retUnwrapped && !chainAll,
              onlyLazy = isLazy && !isHybrid;

          if (!retUnwrapped && useLazy) {
            value = onlyLazy ? value : new LazyWrapper(this);
            var result = func.apply(value, args);
            result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
            return new LodashWrapper(result, chainAll);
          }
          if (isUnwrapped && onlyLazy) {
            return func.apply(this, args);
          }
          result = this.thru(interceptor);
          return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
        };
      });

      // Add `Array` methods to `lodash.prototype`.
      arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
        var func = arrayProto[methodName],
            chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
            retUnwrapped = /^(?:pop|shift)$/.test(methodName);

        lodash.prototype[methodName] = function() {
          var args = arguments;
          if (retUnwrapped && !this.__chain__) {
            var value = this.value();
            return func.apply(isArray(value) ? value : [], args);
          }
          return this[chainName](function(value) {
            return func.apply(isArray(value) ? value : [], args);
          });
        };
      });

      // Map minified method names to their real names.
      baseForOwn(LazyWrapper.prototype, function(func, methodName) {
        var lodashFunc = lodash[methodName];
        if (lodashFunc) {
          var key = (lodashFunc.name + ''),
              names = realNames[key] || (realNames[key] = []);

          names.push({ 'name': methodName, 'func': lodashFunc });
        }
      });

      realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
        'name': 'wrapper',
        'func': undefined
      }];

      // Add methods to `LazyWrapper`.
      LazyWrapper.prototype.clone = lazyClone;
      LazyWrapper.prototype.reverse = lazyReverse;
      LazyWrapper.prototype.value = lazyValue;

      // Add chain sequence methods to the `lodash` wrapper.
      lodash.prototype.at = wrapperAt;
      lodash.prototype.chain = wrapperChain;
      lodash.prototype.commit = wrapperCommit;
      lodash.prototype.next = wrapperNext;
      lodash.prototype.plant = wrapperPlant;
      lodash.prototype.reverse = wrapperReverse;
      lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

      // Add lazy aliases.
      lodash.prototype.first = lodash.prototype.head;

      if (symIterator) {
        lodash.prototype[symIterator] = wrapperToIterator;
      }
      return lodash;
    });

    /*--------------------------------------------------------------------------*/

    // Export lodash.
    var _ = runInContext();

    // Some AMD build optimizers, like r.js, check for condition patterns like:
    if (typeof undefined == 'function' && typeof undefined.amd == 'object' && undefined.amd) {
      // Expose Lodash on the global object to prevent errors when Lodash is
      // loaded by a script tag in the presence of an AMD loader.
      // See http://requirejs.org/docs/errors.html#mismatch for more details.
      // Use `_.noConflict` to remove Lodash from the global object.
      root._ = _;

      // Define as an anonymous module so, through path mapping, it can be
      // referenced as the "underscore" module.
      undefined(function() {
        return _;
      });
    }
    // Check for `exports` after `define` in case a build optimizer adds it.
    else if (freeModule) {
      // Export for Node.js.
      (freeModule.exports = _)._ = _;
      // Export for CommonJS support.
      freeExports._ = _;
    }
    else {
      // Export to the global object.
      root._ = _;
    }
  }.call(commonjsGlobal));
  });
  var lodash_1 = lodash.throttle;

  /**
  * Create and return the inView function.
  */
  const inView = () => {

      /**
      * Fallback if window is undefined.
      */
      if (typeof window === 'undefined') return;

      /**
      * How often and on what events we should check
      * each registry.
      */
      const interval = 100;
      const triggers = ['scroll', 'resize', 'load'];

      /**
      * Maintain a hashmap of all registries, a history
      * of selectors to enumerate, and an options object.
      */
      let selectors = { history: [] };
      let options   = { offset: {}, threshold: 0, test: inViewport };

      /**
      * Check each registry from selector history,
      * throttled to interval.
      */
      const check = lodash_1(() => {
          selectors.history.forEach(selector => {
              selectors[selector].check();
          });
      }, interval);

      /**
      * For each trigger event on window, add a listener
      * which checks each registry.
      */
      triggers.forEach(event =>
          addEventListener(event, check));

      /**
      * If supported, use MutationObserver to watch the
      * DOM and run checks on mutation.
      */
      if (window.MutationObserver) {
          addEventListener('DOMContentLoaded', () => {
              new MutationObserver(check)
                  .observe(document.body, { attributes: true, childList: true, subtree: true });
          });
      }

      /**
      * The main interface. Take a selector and retrieve
      * the associated registry or create a new one.
      */
      let control = (selector) => {

          if (typeof selector !== 'string') return;

          // Get an up-to-date list of elements.
          let elements = [].slice.call(document.querySelectorAll(selector));

          // If the registry exists, update the elements.
          if (selectors.history.indexOf(selector) > -1) {
              selectors[selector].elements = elements;
          }

          // If it doesn't exist, create a new registry.
          else {
              selectors[selector] = Registry(elements, options);
              selectors.history.push(selector);
          }

          return selectors[selector];
      };

      /**
      * Mutate the offset object with either an object
      * or a number.
      */
      control.offset = o => {
          if (o === undefined) return options.offset;
          const isNum = n => typeof n === 'number';
          ['top', 'right', 'bottom', 'left']
              .forEach(isNum(o) ?
                  dim => options.offset[dim] = o :
                  dim => isNum(o[dim]) ? options.offset[dim] = o[dim] : null
              );
          return options.offset;
      };

      /**
      * Set the threshold with a number.
      */
      control.threshold = n => {
          return typeof n === 'number' && n >= 0 && n <= 1
              ? options.threshold = n
              : options.threshold;
      };

      /**
      * Use a custom test, overriding inViewport, to
      * determine element visibility.
      */
      control.test = fn => {
          return typeof fn === 'function'
              ? options.test = fn
              : options.test;
      };

      /**
      * Add proxy for test function, set defaults,
      * and return the interface.
      */
      control.is = el => options.test(el, options);
      control.offset(0);
      return control;

  };

  // Export a singleton.
  var inView$1 = inView();

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function statusLoading(context) {
    return div$2(undefined, undefined, /* :: */[
                class$prime(info),
                /* [] */0
              ], /* :: */[
                text$2(trans$1("Loading...", context[/* translations */1])),
                /* [] */0
              ]);
  }

  function statusError(e) {
    return div$2(undefined, undefined, /* :: */[
                class$prime(error$1),
                /* [] */0
              ], /* :: */[
                text$2("Error: " + e),
                /* [] */0
              ]);
  }

  function registerInview(ids) {
    var ids$1 = map((function (id) {
            return "#" + id;
          }), ids);
    var ids$2 = concat$3(",", ids$1);
    var i$$1 = inView$1(ids$2);
    i$$1.on("enter", (function (el) {
            var match = el.getAttribute("data-inview");
            if (match == null) {
              el.setAttribute("data-inview", "1");
              var match$1 = el.getAttribute("href");
              if (match$1 == null) {
                return /* () */0;
              } else {
                el.setAttribute("src", match$1);
                return /* () */0;
              }
            } else {
              return /* () */0;
            }
          }));
    return /* () */0;
  }
  /* Util Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  var baseUrl = "https://api.finna.fi";

  var apiUrl = "https://api.finna.fi/api/v1";

  function getRecordLink(id) {
    return _1(sprintf(/* Format */[
                    /* String_literal */__(11, [
                        "https://finna.fi/Record/",
                        /* String */__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "https://finna.fi/Record/%s"
                  ]), id);
  }

  function getFieldQuery() {
    return concat$3("", map((function (f) {
                      return "&field[]=" + f;
                    }), /* :: */[
                    "id",
                    /* :: */[
                      "title",
                      /* :: */[
                        "formats",
                        /* :: */[
                          "images",
                          /* :: */[
                            "authors",
                            /* :: */[
                              "buildings",
                              /* :: */[
                                "publishers",
                                /* :: */[
                                  "cleanIsbn",
                                  /* :: */[
                                    "cleanIssn",
                                    /* :: */[
                                      "humanReadablePublicationDates",
                                      /* :: */[
                                        "genres",
                                        /* :: */[
                                          "subjects",
                                          /* :: */[
                                            "year",
                                            /* :: */[
                                              "urls",
                                              /* :: */[
                                                "onlineUrls",
                                                /* :: */[
                                                  "summary",
                                                  /* :: */[
                                                    "measurements",
                                                    /* [] */0
                                                  ]
                                                ]
                                              ]
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]
                    ]
                  ]));
  }

  function getFilterQuery(filters) {
    return concat$3("&", map((function (param) {
                      return _2(sprintf(/* Format */[
                                      /* String_literal */__(11, [
                                          "filter[]=",
                                          /* String */__(2, [
                                              /* No_padding */0,
                                              /* Char_literal */__(12, [
                                                  /* ":" */58,
                                                  /* String */__(2, [
                                                      /* No_padding */0,
                                                      /* End_of_format */0
                                                    ])
                                                ])
                                            ])
                                        ]),
                                      "filter[]=%s:%s"
                                    ]), param[0], param[1]);
                    }), filters));
  }

  function getSearchUrl(params, lng) {
    var fields = getFieldQuery(/* :: */[
          "id",
          /* :: */[
            "title",
            /* [] */0
          ]
        ]);
    var filters = getFilterQuery(params[/* filters */1]);
    return _7(sprintf(/* Format */[
                    /* String */__(2, [
                        /* No_padding */0,
                        /* String_literal */__(11, [
                            "/search?lookfor=",
                            /* String */__(2, [
                                /* No_padding */0,
                                /* String */__(2, [
                                    /* No_padding */0,
                                    /* String_literal */__(11, [
                                        "&limit=",
                                        /* Int */__(4, [
                                            /* Int_d */0,
                                            /* No_padding */0,
                                            /* No_precision */0,
                                            /* String_literal */__(11, [
                                                "&page=",
                                                /* Int */__(4, [
                                                    /* Int_d */0,
                                                    /* No_padding */0,
                                                    /* No_precision */0,
                                                    /* Char_literal */__(12, [
                                                        /* "&" */38,
                                                        /* String */__(2, [
                                                            /* No_padding */0,
                                                            /* String_literal */__(11, [
                                                                "&lng=",
                                                                /* String */__(2, [
                                                                    /* No_padding */0,
                                                                    /* End_of_format */0
                                                                  ])
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s/search?lookfor=%s%s&limit=%d&page=%d&%s&lng=%s"
                  ]), apiUrl, params[/* lookfor */0], fields, params[/* limit */3], params[/* page */2], filters, lng);
  }

  function getFacetSearchUrl(facet, params, lng) {
    var filters = getFilterQuery(params[/* filters */1]);
    return _6(sprintf(/* Format */[
                    /* String */__(2, [
                        /* No_padding */0,
                        /* String_literal */__(11, [
                            "/search?lookfor=",
                            /* String */__(2, [
                                /* No_padding */0,
                                /* String_literal */__(11, [
                                    "&limit=0&page=",
                                    /* Int */__(4, [
                                        /* Int_d */0,
                                        /* No_padding */0,
                                        /* No_precision */0,
                                        /* String_literal */__(11, [
                                            "&facet[]=",
                                            /* String */__(2, [
                                                /* No_padding */0,
                                                /* Char_literal */__(12, [
                                                    /* "&" */38,
                                                    /* String */__(2, [
                                                        /* No_padding */0,
                                                        /* String_literal */__(11, [
                                                            "&lng=",
                                                            /* String */__(2, [
                                                                /* No_padding */0,
                                                                /* End_of_format */0
                                                              ])
                                                          ])
                                                      ])
                                                  ])
                                              ])
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s/search?lookfor=%s&limit=0&page=%d&facet[]=%s&%s&lng=%s"
                  ]), apiUrl, params[/* lookfor */0], params[/* page */2], facet, filters, lng);
  }

  function getRecordUrl(id, lng) {
    var id$1 = encodeURIComponent(id);
    var fields = getFieldQuery(/* :: */[
          "id",
          /* :: */[
            "title",
            /* :: */[
              "authors",
              /* [] */0
            ]
          ]
        ]);
    return _4(sprintf(/* Format */[
                    /* String */__(2, [
                        /* No_padding */0,
                        /* String_literal */__(11, [
                            "/record?id=",
                            /* String */__(2, [
                                /* No_padding */0,
                                /* String */__(2, [
                                    /* No_padding */0,
                                    /* String_literal */__(11, [
                                        "&lng=",
                                        /* String */__(2, [
                                            /* No_padding */0,
                                            /* End_of_format */0
                                          ])
                                      ])
                                  ])
                              ])
                          ])
                      ]),
                    "%s/record?id=%s%s&lng=%s"
                  ]), apiUrl, id$1, fields, lng);
  }

  function urlDecoder(json) {
    return /* record */[
            /* url */optional((function (param) {
                    return field$1("url", string$2, param);
                  }), json),
            /* label */optional((function (param) {
                    return field$1("label", string$2, param);
                  }), json)
          ];
  }

  function facetDecoder(json) {
    var labelDecoder = either((function (param) {
            return map$5((function (s) {
                          return s;
                        }), string$2, param);
          }), (function (param) {
            return map$5((function (i) {
                          return String(i);
                        }), $$int$2, param);
          }));
    return /* record */[
            /* value */field$1("value", labelDecoder, json),
            /* translated */field$1("translated", labelDecoder, json),
            /* count */field$1("count", $$int$2, json)
          ];
  }

  function translatedDecoder(json) {
    return /* record */[
            /* value */field$1("value", string$2, json),
            /* translated */field$1("translated", string$2, json)
          ];
  }

  function recordDecoder(json) {
    return /* record */[
            /* id */field$1("id", string$2, json),
            /* title */optional((function (param) {
                    return field$1("title", string$2, param);
                  }), json),
            /* formats */optional((function (param) {
                    return field$1("formats", (function (param) {
                                  return array$2(translatedDecoder, param);
                                }), param);
                  }), json),
            /* images */optional((function (param) {
                    return field$1("images", (function (param) {
                                  return array$2(string$2, param);
                                }), param);
                  }), json),
            /* authors */_1(( (json) => { return(Object.keys(json.authors.primary)); } ), json),
            /* buildings */optional((function (param) {
                    return field$1("buildings", (function (param) {
                                  return array$2(translatedDecoder, param);
                                }), param);
                  }), json),
            /* isbn */optional((function (param) {
                    return field$1("cleanIsbn", string$2, param);
                  }), json),
            /* issn */optional((function (param) {
                    return field$1("cleanIssn", string$2, param);
                  }), json),
            /* publishers */optional((function (param) {
                    return field$1("publishers", (function (param) {
                                  return array$2(string$2, param);
                                }), param);
                  }), json),
            /* year */optional((function (param) {
                    return field$1("year", string$2, param);
                  }), json),
            /* publicationDates */optional((function (param) {
                    return field$1("humanReadablePublicationDates", (function (param) {
                                  return array$2(string$2, param);
                                }), param);
                  }), json),
            /* onlineUrls */optional((function (param) {
                    return field$1("onlineUrls", (function (param) {
                                  return array$2(urlDecoder, param);
                                }), param);
                  }), json),
            /* urls */optional((function (param) {
                    return field$1("urls", (function (param) {
                                  return array$2(urlDecoder, param);
                                }), param);
                  }), json),
            /* summary */optional((function (param) {
                    return field$1("summary", (function (param) {
                                  return array$2(string$2, param);
                                }), param);
                  }), json),
            /* measurements */optional((function (param) {
                    return field$1("measurements", (function (param) {
                                  return array$2(string$2, param);
                                }), param);
                  }), json),
            /* genres */optional((function (param) {
                    return field$1("genres", (function (param) {
                                  return array$2(string$2, param);
                                }), param);
                  }), json),
            /* subjects */optional((function (param) {
                    return field$1("subjects", (function (param) {
                                  return array$2((function (param) {
                                                return array$2(string$2, param);
                                              }), param);
                                }), param);
                  }), json)
          ];
  }

  function decodeSearchResults(json) {
    var decode = function (json) {
      return /* record */[
              /* records */optional((function (param) {
                      return field$1("records", (function (param) {
                                    return array$2(recordDecoder, param);
                                  }), param);
                    }), json),
              /* resultCount */optional((function (param) {
                      return field$1("resultCount", $$int$2, param);
                    }), json),
              /* status */field$1("status", string$2, json)
            ];
    };
    var results = decode(parseOrRaise(json));
    var match = results[/* status */2];
    if (match === "OK") {
      var match$1 = results[/* resultCount */1];
      var match$2 = results[/* records */0];
      var match$3 = match$1 !== undefined ? (
          match$2 !== undefined ? /* tuple */[
              match$1,
              match$2
            ] : /* tuple */[
              0,
              /* array */[]
            ]
        ) : /* tuple */[
          0,
          /* array */[]
        ];
      return /* Success */__(3, [/* record */[
                  /* records */match$3[1],
                  /* resultCount */match$3[0]
                ]]);
    } else {
      return /* Error */__(2, ["json"]);
    }
  }

  function decodeRecordResult(json) {
    var decode = function (json) {
      return /* record */[
              /* records */optional((function (param) {
                      return field$1("records", (function (param) {
                                    return array$2(recordDecoder, param);
                                  }), param);
                    }), json),
              /* resultCount */optional((function (param) {
                      return field$1("resultCount", $$int$2, param);
                    }), json),
              /* status */field$1("status", string$2, json)
            ];
    };
    var results = decode(parseOrRaise(json));
    var match = results[/* status */2];
    if (match === "OK") {
      var match$1 = results[/* resultCount */1];
      var match$2 = results[/* records */0];
      if (match$1 !== undefined && match$2 !== undefined) {
        return /* Success */__(3, [caml_array_get(match$2, 0)]);
      } else {
        return /* Error */__(2, ["Record not found"]);
      }
    } else {
      return /* Error */__(2, ["Error parsing result"]);
    }
  }

  function decodeFacetResults(json) {
    var decode = function (json) {
      return /* record */[
              /* facets */optional((function (param) {
                      return field$1("facets", (function (param) {
                                    return dict$1((function (param) {
                                                  return array$2(facetDecoder, param);
                                                }), param);
                                  }), param);
                    }), json),
              /* status */field$1("status", string$2, json)
            ];
    };
    var results = decode(parseOrRaise(json));
    var match = results[/* status */1];
    if (match === "OK") {
      var match$1 = results[/* facets */0];
      if (match$1 !== undefined) {
        var facets = valFromOption(match$1);
        var keys = to_list(Object.keys(facets));
        var key = hd(keys);
        var match$2 = facets[key];
        if (match$2 !== undefined) {
          return /* Success */__(3, [/* tuple */[
                      key,
                      match$2
                    ]]);
        } else {
          return /* Error */__(2, ["Facet error"]);
        }
      } else {
        return /* Error */__(2, ["Facet error"]);
      }
    } else {
      return /* Error */__(2, ["Facet error"]);
    }
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function polyfills() {
    remove_polyfill(/* () */0);
    requestAnimationFrame_polyfill(/* () */0);
    return /* () */0;
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function batch(cmds) {
    return /* Batch */__(1, [cmds]);
  }

  function msg(msg$1) {
    return /* EnqueueCall */__(2, [(function (callbacks) {
                  return _1(callbacks[0][/* enqueue */0], msg$1);
                })]);
  }

  function run(callbacks, param) {
    if (typeof param === "number") {
      return /* () */0;
    } else {
      switch (param.tag | 0) {
        case 1 : 
            return fold_left((function (_, cmd) {
                          return run(callbacks, cmd);
                        }), /* () */0, param[0]);
        case 0 : 
        case 2 : 
            return _1(param[0], callbacks);
        
      }
    }
  }

  function map$9(func, cmd) {
    return /* Tagger */__(0, [(function (callbacks) {
                  return run(wrapCallbacks(func, callbacks), cmd);
                })]);
  }

  var none$1 = /* NoCmd */0;
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function registration(key, enableCall) {
    return /* Registration */__(1, [
              key,
              (function (callbacks) {
                  return _1(enableCall, callbacks[0]);
                }),
              /* record */[/* contents */undefined]
            ]);
  }

  function run$1(oldCallbacks, newCallbacks, oldSub, newSub) {
    var enable = function (_callbacks, _param) {
      while(true) {
        var param = _param;
        var callbacks = _callbacks;
        if (typeof param === "number") {
          return /* () */0;
        } else {
          switch (param.tag | 0) {
            case 0 : 
                var subs = param[0];
                if (subs) {
                  return iter((function(callbacks){
                            return function (param) {
                              return enable(callbacks, param);
                            }
                            }(callbacks)), subs);
                } else {
                  return /* () */0;
                }
            case 1 : 
                param[2][0] = _1(param[1], callbacks);
                return /* () */0;
            case 2 : 
                var subCallbacks = _1(param[0], callbacks);
                _param = param[1];
                _callbacks = subCallbacks;
                continue ;
            
          }
        }
      }  };
    var disable = function (_callbacks, _param) {
      while(true) {
        var param = _param;
        var callbacks = _callbacks;
        if (typeof param === "number") {
          return /* () */0;
        } else {
          switch (param.tag | 0) {
            case 0 : 
                var subs = param[0];
                if (subs) {
                  return iter((function(callbacks){
                            return function (param) {
                              return disable(callbacks, param);
                            }
                            }(callbacks)), subs);
                } else {
                  return /* () */0;
                }
            case 1 : 
                var diCB = param[2];
                var match = diCB[0];
                if (match !== undefined) {
                  diCB[0] = undefined;
                  return _1(match, /* () */0);
                } else {
                  return /* () */0;
                }
            case 2 : 
                var subCallbacks = _1(param[0], callbacks);
                _param = param[1];
                _callbacks = subCallbacks;
                continue ;
            
          }
        }
      }  };
    var exit = 0;
    if (typeof oldSub === "number") {
      if (typeof newSub === "number") {
        return newSub;
      } else {
        exit = 1;
      }
    } else {
      switch (oldSub.tag | 0) {
        case 0 : 
            if (typeof newSub === "number" || newSub.tag) {
              exit = 1;
            } else {
              var aux = function (_oldList, _newList) {
                while(true) {
                  var newList = _newList;
                  var oldList = _oldList;
                  if (oldList) {
                    var oldRest = oldList[1];
                    var oldSubSub = oldList[0];
                    if (newList) {
                      run$1(oldCallbacks, newCallbacks, oldSubSub, newList[0]);
                      _newList = newList[1];
                      _oldList = oldRest;
                      continue ;
                    } else {
                      disable(oldCallbacks, oldSubSub);
                      _newList = /* [] */0;
                      _oldList = oldRest;
                      continue ;
                    }
                  } else if (newList) {
                    enable(newCallbacks, newList[0]);
                    _newList = newList[1];
                    _oldList = /* [] */0;
                    continue ;
                  } else {
                    return /* () */0;
                  }
                }            };
              aux(oldSub[0], newSub[0]);
              return newSub;
            }
            break;
        case 1 : 
            if (typeof newSub === "number" || !(newSub.tag === 1 && oldSub[0] === newSub[0])) {
              exit = 1;
            } else {
              newSub[2][0] = oldSub[2][0];
              return newSub;
            }
            break;
        case 2 : 
            if (typeof newSub === "number" || newSub.tag !== 2) {
              exit = 1;
            } else {
              var olderCallbacks = _1(oldSub[0], oldCallbacks);
              var newerCallbacks = _1(newSub[0], newCallbacks);
              run$1(olderCallbacks, newerCallbacks, oldSub[1], newSub[1]);
              return newSub;
            }
            break;
        
      }
    }
    if (exit === 1) {
      disable(oldCallbacks, oldSub);
      enable(newCallbacks, newSub);
      return newSub;
    }
    
  }

  var none$2 = /* NoSub */0;
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function programStateWrapper(initModel, pump, shutdown) {
    var model = /* record */[/* contents */initModel];
    var callbacks = /* record */[/* contents : record */[/* enqueue */(function () {
            console.log("INVALID enqueue CALL!");
            return /* () */0;
          })]];
    var pumperInterface = _1(pump, callbacks);
    var pending = /* record */[/* contents */undefined];
    var handler = function (msg$$1) {
      var match = pending[0];
      if (match !== undefined) {
        pending[0] = /* :: */[
          msg$$1,
          match
        ];
        return /* () */0;
      } else {
        pending[0] = /* [] */0;
        var newModel = _2(pumperInterface[/* handleMsg */2], model[0], msg$$1);
        model[0] = newModel;
        var match$1 = pending[0];
        if (match$1 !== undefined) {
          var msgs = match$1;
          if (msgs) {
            pending[0] = undefined;
            return iter(handler, rev(msgs));
          } else {
            pending[0] = undefined;
            return /* () */0;
          }
        } else {
          throw [
                failure,
                "INVALID message queue state, should never be None during message processing!"
              ];
        }
      }
    };
    var finalizedCBs = /* record */[/* enqueue */handler];
    callbacks[0] = finalizedCBs;
    var pi_requestShutdown = function () {
      callbacks[0] = /* record */[/* enqueue */(function () {
            console.log("INVALID message enqueued when shut down");
            return /* () */0;
          })];
      var cmd = _1(shutdown, model[0]);
      _1(pumperInterface[/* shutdown */3], cmd);
      return /* () */0;
    };
    var render_string = function () {
      return _1(pumperInterface[/* render_string */1], model[0]);
    };
    _1(pumperInterface[/* startup */0], /* () */0);
    return {
            pushMsg: handler,
            shutdown: pi_requestShutdown,
            getHtmlString: render_string
          };
  }

  function programLoop(update, view, subscriptions, initModel, initCmd, param) {
    if (param !== undefined) {
      var parentNode = valFromOption(param);
      return (function (callbacks) {
          var priorRenderedVdom = /* record */[/* contents : [] */0];
          var latestModel = /* record */[/* contents */initModel];
          var nextFrameID = /* record */[/* contents */undefined];
          var doRender = function () {
            var match = nextFrameID[0];
            if (match !== undefined) {
              var newVdom_000 = _1(view, latestModel[0]);
              var newVdom = /* :: */[
                newVdom_000,
                /* [] */0
              ];
              var justRenderedVdom = patchVNodesIntoElement(callbacks, parentNode, priorRenderedVdom[0], newVdom);
              priorRenderedVdom[0] = justRenderedVdom;
              nextFrameID[0] = undefined;
              return /* () */0;
            } else {
              return /* () */0;
            }
          };
          var scheduleRender = function () {
            var match = nextFrameID[0];
            if (match !== undefined) {
              return /* () */0;
            } else {
              nextFrameID[0] = -1;
              return doRender(16);
            }
          };
          var clearPnode = function () {
            while(parentNode.childNodes.length > 0) {
              var match = parentNode.firstChild;
              if (match !== null) {
                parentNode.removeChild(match);
              }
              
            }          return /* () */0;
          };
          var oldSub = /* record */[/* contents : NoSub */0];
          var handleSubscriptionChange = function (model) {
            var newSub = _1(subscriptions, model);
            oldSub[0] = run$1(callbacks, callbacks, oldSub[0], newSub);
            return /* () */0;
          };
          var handlerStartup = function () {
            clearPnode(/* () */0);
            run(callbacks, initCmd);
            handleSubscriptionChange(latestModel[0]);
            nextFrameID[0] = -1;
            doRender(16);
            return /* () */0;
          };
          var render_string = function (model) {
            return renderToHtmlString(_1(view, model));
          };
          var handler = function (model, msg$$1) {
            var match = _2(update, model, msg$$1);
            var newModel = match[0];
            latestModel[0] = newModel;
            run(callbacks, match[1]);
            scheduleRender(/* () */0);
            handleSubscriptionChange(newModel);
            return newModel;
          };
          var handlerShutdown = function (cmd) {
            nextFrameID[0] = undefined;
            run(callbacks, cmd);
            oldSub[0] = run$1(callbacks, callbacks, oldSub[0], /* NoSub */0);
            priorRenderedVdom[0] = /* [] */0;
            clearPnode(/* () */0);
            return /* () */0;
          };
          return /* record */[
                  /* startup */handlerStartup,
                  /* render_string */render_string,
                  /* handleMsg */handler,
                  /* shutdown */handlerShutdown
                ];
        });
    } else {
      return (function (callbacks) {
          var oldSub = /* record */[/* contents : NoSub */0];
          var handleSubscriptionChange = function (model) {
            var newSub = _1(subscriptions, model);
            oldSub[0] = run$1(callbacks, callbacks, oldSub[0], newSub);
            return /* () */0;
          };
          return /* record */[
                  /* startup */(function () {
                      run(callbacks, initCmd);
                      handleSubscriptionChange(initModel);
                      return /* () */0;
                    }),
                  /* render_string */(function (model) {
                      return renderToHtmlString(_1(view, model));
                    }),
                  /* handleMsg */(function (model, msg$$1) {
                      var match = _2(update, model, msg$$1);
                      var newModel = match[0];
                      run(callbacks, match[1]);
                      handleSubscriptionChange(newModel);
                      return newModel;
                    }),
                  /* shutdown */(function (cmd) {
                      run(callbacks, cmd);
                      oldSub[0] = run$1(callbacks, callbacks, oldSub[0], /* NoSub */0);
                      return /* () */0;
                    })
                ];
        });
    }
  }

  function program(param, pnode, flags) {
    polyfills(/* () */0);
    var match = _1(param[/* init */0], flags);
    var initModel = match[0];
    var opnode = (pnode == null) ? undefined : some(pnode);
    var pumpInterface = programLoop(param[/* update */1], param[/* view */2], param[/* subscriptions */3], initModel, match[1], opnode);
    return programStateWrapper(initModel, pumpInterface, param[/* shutdown */4]);
  }

  var map$11 = map$8;
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function asRecord($$location) {
    return /* record */[
            /* href */$$location.href,
            /* protocol */$$location.protocol,
            /* host */$$location.host,
            /* hostname */$$location.hostname,
            /* port */$$location.port,
            /* pathname */$$location.pathname,
            /* search */$$location.search,
            /* hash */$$location.hash,
            /* username */$$location.username,
            /* password */$$location.password,
            /* origin */$$location.origin
          ];
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function pushState($$window, state, title, url) {
    var match = $$window.history;
    if (match !== undefined) {
      return match.pushState(state, title, url);
    } else {
      return /* () */0;
    }
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  var notifier = /* record */[/* contents */undefined];

  function notifyUrlChange() {
    var match = notifier[0];
    if (match !== undefined) {
      var $$location$$1 = asRecord(document.location);
      _1(match, $$location$$1);
      return /* () */0;
    } else {
      return /* () */0;
    }
  }

  function subscribe(tagger) {
    var enableCall = function (callbacks) {
      var notifyHandler = function ($$location$$1) {
        return _1(callbacks[/* enqueue */0], _1(tagger, $$location$$1));
      };
      notifier[0] = notifyHandler;
      var handler = function () {
        return notifyUrlChange(/* () */0);
      };
      addEventListener$1("popstate", handler, false);
      return (function () {
          return removeEventListener("popstate", handler, false);
        });
    };
    return registration("navigation", enableCall);
  }

  function pushState$1(url) {
    pushState(window, JSON.parse("{}"), "", url);
    return /* () */0;
  }

  function newUrl(url) {
    return /* EnqueueCall */__(2, [(function () {
                  pushState$1(url);
                  notifyUrlChange(/* () */0);
                  return /* () */0;
                })]);
  }

  function navigationProgram(locationToMessage, stuff) {
    var init = function (flag) {
      return _2(stuff[/* init */0], flag, asRecord(document.location));
    };
    var subscriptions = function (model) {
      return /* Batch */__(0, [/* :: */[
                  subscribe(locationToMessage),
                  /* :: */[
                    _1(stuff[/* subscriptions */3], model),
                    /* [] */0
                  ]
                ]]);
    };
    var partial_arg_001 = /* update */stuff[/* update */1];
    var partial_arg_002 = /* view */stuff[/* view */2];
    var partial_arg_004 = /* shutdown */stuff[/* shutdown */4];
    var partial_arg = /* record */[
      /* init */init,
      partial_arg_001,
      partial_arg_002,
      /* subscriptions */subscriptions,
      partial_arg_004
    ];
    return (function (param, param$1) {
        return program(partial_arg, param, param$1);
      });
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function urlToRoute($$location) {
    var route = $$location[/* hash */7].split("?");
    if (route.length !== 2) {
      return /* MainRoute */0;
    } else {
      var match = route[0];
      switch (match) {
        case "#/Record/" : 
            var recordId = route[1];
            return /* RecordRoute */__(1, [recordId]);
        case "#/Search/" : 
            var query = route[1];
            var params = to_list(query.split("&"));
            var params$1 = map((function (param) {
                    var match = param.split("=");
                    if (match.length !== 2) {
                      return /* tuple */[
                              param,
                              ""
                            ];
                    } else {
                      var key = match[0];
                      var value = match[1];
                      return /* tuple */[
                              key,
                              value
                            ];
                    }
                  }), params);
            var match$1 = extractSearchParams(params$1);
            return /* SearchRoute */__(0, [/* record */[
                        /* lookfor */match$1[0],
                        /* filters */match$1[1],
                        /* page */caml_int_of_string(match$1[2]) - 1 | 0,
                        /* limit */caml_int_of_string(match$1[3])
                      ]]);
        default:
          return /* MainRoute */0;
      }
    }
  }

  function routeToUrl(param) {
    if (typeof param === "number") {
      return "/";
    } else if (param.tag) {
      return _1(sprintf(/* Format */[
                      /* String_literal */__(11, [
                          "#/Record/?",
                          /* String */__(2, [
                              /* No_padding */0,
                              /* End_of_format */0
                            ])
                        ]),
                      "#/Record/?%s"
                    ]), param[0]);
    } else {
      var searchParams = param[0];
      var lookfor = searchParams[/* lookfor */0];
      var filters = searchParams[/* filters */1];
      var page = searchParams[/* page */2] + 1 | 0;
      var limit = searchParams[/* limit */3];
      var filters$1;
      if (length(filters) > 0) {
        var filters$2 = map((function (param) {
                return _2(sprintf(/* Format */[
                                /* String_literal */__(11, [
                                    "filter[]=",
                                    /* String */__(2, [
                                        /* No_padding */0,
                                        /* Char_literal */__(12, [
                                            /* ":" */58,
                                            /* String */__(2, [
                                                /* No_padding */0,
                                                /* End_of_format */0
                                              ])
                                          ])
                                      ])
                                  ]),
                                "filter[]=%s:%s"
                              ]), param[0], param[1]);
              }), searchParams[/* filters */1]);
        filters$1 = "&" + concat$3("&", filters$2);
      } else {
        filters$1 = "";
      }
      return _4(sprintf(/* Format */[
                      /* String_literal */__(11, [
                          "#/Search/?lookfor=",
                          /* String */__(2, [
                              /* No_padding */0,
                              /* String_literal */__(11, [
                                  "&page=",
                                  /* Int */__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */__(11, [
                                          "&limit=",
                                          /* Int */__(4, [
                                              /* Int_d */0,
                                              /* No_padding */0,
                                              /* No_precision */0,
                                              /* String */__(2, [
                                                  /* No_padding */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "#/Search/?lookfor=%s&page=%d&limit=%d%s"
                    ]), lookfor, page, limit, filters$1);
    }
  }

  var openUrl = newUrl;

  function openRoute(route) {
    return newUrl(routeToUrl(route));
  }
  /* Util Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function recordNeighbors(id, ids, limit, resultCount) {
    var find$$1 = function (id, _ids, _cnt, _pageInd, _pageNum) {
      while(true) {
        var pageNum = _pageNum;
        var pageInd = _pageInd;
        var cnt = _cnt;
        var ids = _ids;
        if (ids) {
          var match = ids[0];
          var recId = match[1];
          var page = match[0];
          var pageInd$1 = pageNum !== page ? 0 : pageInd;
          if (caml_equal(recId, id)) {
            var recInd = imul(page, limit) + pageInd$1 | 0;
            return /* tuple */[
                    recId,
                    page,
                    recInd,
                    cnt
                  ];
          } else {
            _pageNum = page;
            _pageInd = pageInd$1 + 1 | 0;
            _cnt = cnt + 1 | 0;
            _ids = ids[1];
            continue ;
          }
        } else {
          return undefined;
        }
      }  };
    var match = find$$1(id, ids, 0, 0, 999999999);
    if (match !== undefined) {
      var match$1 = match;
      var ind = match$1[3];
      var recInd = match$1[2];
      var pageNum = match$1[1];
      var recId = match$1[0];
      var len = length(ids);
      var prev;
      if (recInd !== 0) {
        if (ind > 0) {
          var match$2 = nth(ids, ind - 1 | 0);
          prev = paginateRecordCmd(match$2[1]);
        } else {
          prev = paginatePrevCmd(/* tuple */[
                pageNum - 1 | 0,
                recId
              ]);
        }
      } else {
        prev = /* PaginateNoCmd */0;
      }
      var match$3 = len - ind | 0;
      var next;
      if ((resultCount - 1 | 0) === recInd) {
        next = /* PaginateNoCmd */0;
      } else if (match$3 > 1) {
        var match$4 = nth(ids, ind + 1 | 0);
        next = paginateRecordCmd(match$4[1]);
      } else {
        next = paginateNextCmd(/* tuple */[
              pageNum + 1 | 0,
              recId
            ]);
      }
      return /* record */[
              /* id */id,
              /* next */next,
              /* prev */prev,
              /* pageNum */pageNum,
              /* ind */recInd
            ];
    }
    
  }

  function resultPageNums(results) {
    var pageNums = Object.keys(results[/* pages */2]);
    sort$1((function (a, b) {
            var a$1 = caml_int_of_string(a);
            var b$1 = caml_int_of_string(b);
            if (a$1 > b$1) {
              return 1;
            } else {
              return -1;
            }
          }), pageNums);
    return pageNums;
  }

  function recordPages(results) {
    var pageNums = resultPageNums(results);
    var ids = map((function (pageNum) {
            var match = results[/* pages */2][pageNum];
            if (match !== undefined) {
              var match$1 = match[/* results */1];
              if (typeof match$1 === "number" || match$1.tag !== 3) {
                return /* [] */0;
              } else {
                var records = to_list(match$1[0][/* records */0]);
                return map((function (r) {
                              return /* tuple */[
                                      match[/* page */0],
                                      r[/* id */0]
                                    ];
                            }), records);
              }
            } else {
              return /* [] */0;
            }
          }), to_list(pageNums));
    return /* tuple */[
            flatten(ids),
            pageNums
          ];
  }

  function paginateRecord(id, recordIds, resultCount, limit) {
    var exit = 0;
    var val;
    try {
      val = find((function (param) {
              return param[1] === id;
            }), recordIds);
      exit = 1;
    }
    catch (exn){
      if (exn === not_found) {
        return undefined;
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      return recordNeighbors(val[1], recordIds, limit, resultCount);
    }
    
  }
  /* No side effect */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function showRecord(param_0) {
    return /* ShowRecord */__(0, [param_0]);
  }

  function gotResult(param_0) {
    return /* GotResult */__(4, [param_0]);
  }

  function update(model, context, param$$1) {
    if (typeof param$$1 === "number") {
      if (param$$1 === 0) {
        var match = model[/* navigateCmd */2];
        var cmd;
        if (match) {
          var match$1 = match[0];
          var pagination = paginateRecord(match$1[0], context[/* recordIds */5], context[/* numOfResults */6], context[/* resultLimit */7]);
          if (pagination !== undefined) {
            var pagination$1 = pagination;
            if (match$1[1] === /* Backward */1) {
              var match$2 = pagination$1[/* prev */2];
              cmd = typeof match$2 === "number" || match$2.tag ? none$1 : openRoute(/* RecordRoute */__(1, [match$2[0]]));
            } else {
              var match$3 = pagination$1[/* next */1];
              cmd = typeof match$3 === "number" || match$3.tag ? none$1 : openRoute(/* RecordRoute */__(1, [match$3[0]]));
            }
          } else {
            cmd = none$1;
          }
        } else {
          cmd = none$1;
        }
        return /* tuple */[
                model,
                cmd,
                /* :: */[
                  /* NoUpdate */0,
                  /* [] */0
                ]
              ];
      } else {
        return /* tuple */[
                model,
                none$1,
                /* :: */[
                  /* BackToSearch */2,
                  /* [] */0
                ]
              ];
      }
    } else {
      switch (param$$1.tag | 0) {
        case 0 : 
            var url = getRecordUrl(param$$1[0], finnaLanguageCode(context[/* language */0]));
            var cmd$1 = send$1(gotResult, getString(url));
            return /* tuple */[
                    /* record */[
                      /* record */model[/* record */0],
                      /* nextRecord : Loading */1,
                      /* navigateCmd */model[/* navigateCmd */2]
                    ],
                    cmd$1,
                    /* :: */[
                      /* NoUpdate */0,
                      /* [] */0
                    ]
                  ];
        case 1 : 
            var match$4 = param$$1[0];
            return /* tuple */[
                    /* record */[
                      /* record */model[/* record */0],
                      /* nextRecord : Loading */1,
                      /* navigateCmd */match$4[1]
                    ],
                    none$1,
                    /* :: */[
                      /* LoadResultsInBackground */__(4, [match$4[0]]),
                      /* [] */0
                    ]
                  ];
        case 2 : 
        case 3 : 
            return /* tuple */[
                    model,
                    none$1,
                    /* :: */[
                      /* NoUpdate */0,
                      /* [] */0
                    ]
                  ];
        case 4 : 
            var match$5 = param$$1[0];
            if (match$5.tag) {
              var model_000 = /* record : Error */__(2, [string_of_error(match$5[0])]);
              var model_001 = /* nextRecord */model[/* nextRecord */1];
              var model_002 = /* navigateCmd */model[/* navigateCmd */2];
              var model$1 = /* record */[
                model_000,
                model_001,
                model_002
              ];
              return /* tuple */[
                      model$1,
                      none$1,
                      /* :: */[
                        /* PageLoaded */__(5, [/* RecordRoute */__(1, [""])]),
                        /* [] */0
                      ]
                    ];
            } else {
              var record$$1 = decodeRecordResult(match$5[0]);
              var visited;
              visited = typeof record$$1 === "number" || record$$1.tag !== 3 ? context[/* visitedRecords */2] : append$1(context[/* visitedRecords */2], /* array */[record$$1[0][/* id */0]]);
              var cmds_000 = /* UpdateVisitedRecords */__(3, [visited]);
              var cmds_001 = /* :: */[
                /* PageLoaded */__(5, [/* RecordRoute */__(1, [""])]),
                /* [] */0
              ];
              var cmds = /* :: */[
                cmds_000,
                cmds_001
              ];
              return /* tuple */[
                      /* record */[
                        /* record */record$$1,
                        /* nextRecord */model[/* nextRecord */1],
                        /* navigateCmd */model[/* navigateCmd */2]
                      ],
                      none$1,
                      cmds
                    ];
            }
        case 5 : 
            return /* tuple */[
                    model,
                    none$1,
                    /* :: */[
                      /* NewSearch */__(6, [/* tuple */[
                            param$$1[0],
                            undefined
                          ]]),
                      /* [] */0
                    ]
                  ];
        case 6 : 
            var match$6 = param$$1[0];
            return /* tuple */[
                    model,
                    none$1,
                    /* :: */[
                      /* NewSearch */__(6, [/* tuple */[
                            undefined,
                            /* tuple */[
                              match$6[0],
                              match$6[1]
                            ]
                          ]]),
                      /* [] */0
                    ]
                  ];
        
      }
    }
  }

  function images(recId, imgs) {
    if (imgs !== undefined) {
      var images$1 = imgs;
      if (images$1.length === 0) {
        return noNode$1;
      } else {
        var imgId = function (i$$1) {
          var id = hash(recId);
          return "img-" + (id + ("-" + String(i$$1)));
        };
        var images$2 = mapi$2((function (i$$1, path) {
                var id = imgId(i$$1);
                var i$1 = i$$1;
                var path$1 = path;
                var imgId$1 = id;
                var path$2 = baseUrl + path$1;
                var attrs = $at(/* :: */[
                      id$1(imgId$1),
                      /* :: */[
                        class$prime(recordImage(true)),
                        /* :: */[
                          onCB$1("load", "", (function (e) {
                                  var match = e.target;
                                  if (match !== undefined) {
                                    match.setAttribute("class", "loaded");
                                  }
                                  return undefined;
                                })),
                          /* [] */0
                        ]
                      ]
                    ], i$1 < 4 ? /* :: */[
                        src(path$2),
                        /* :: */[
                          noProp$1,
                          /* [] */0
                        ]
                      ] : /* :: */[
                        noProp$1,
                        /* :: */[
                          href(path$2),
                          /* [] */0
                        ]
                      ]);
                return li(undefined, undefined, /* :: */[
                            class$prime(recordImageContainer),
                            /* [] */0
                          ], /* :: */[
                            img(undefined, imgId$1, attrs, /* [] */0),
                            /* [] */0
                          ]);
              }), images$1);
        var ids = mapi$2((function (i$$1, _) {
                return imgId(i$$1);
              }), images$2);
        setTimeout((function () {
                return registerInview(to_list(ids));
              }), 100);
        return ul(undefined, undefined, /* :: */[
                    class$prime(recordImages),
                    /* [] */0
                  ], to_list(images$2));
      }
    } else {
      return noNode$1;
    }
  }

  function getFormats(formats) {
    if (formats !== undefined) {
      var formats$1 = formats;
      if (formats$1.length) {
        var format = caml_array_get(formats$1, formats$1.length - 1 | 0);
        return /* tuple */[
                format[/* value */0],
                format[/* translated */1]
              ];
      } else {
        return undefined;
      }
    }
    
  }

  function renderFormat(_, translated, _$1) {
    return span(undefined, undefined, /* :: */[
                class$prime(recordFormat),
                /* [] */0
              ], /* :: */[
                text$2(translated),
                /* [] */0
              ]);
  }

  function formats(formats$1, link) {
    var match = getFormats(formats$1);
    if (match !== undefined) {
      var match$1 = match;
      return renderFormat(match$1[0], match$1[1], link);
    } else {
      return noNode$1;
    }
  }

  function getBuildings(buildings) {
    if (buildings !== undefined) {
      var buildings$1 = buildings;
      if (buildings$1.length) {
        var building = caml_array_get(buildings$1, 0);
        return building[/* translated */1];
      } else {
        return undefined;
      }
    }
    
  }

  function buildings(buildings$1) {
    var match = getBuildings(buildings$1);
    if (match !== undefined) {
      return span(undefined, undefined, /* :: */[
                  class$prime(facetLink),
                  /* [] */0
                ], /* :: */[
                  text$2(match),
                  /* [] */0
                ]);
    } else {
      return noNode$1;
    }
  }

  function getAuthors(authors) {
    if (authors !== undefined) {
      var authors$1 = authors;
      if (authors$1.length !== 0) {
        return concat$3(", ", to_list(authors$1));
      } else {
        return undefined;
      }
    }
    
  }

  function authors(authors$1) {
    var match = getAuthors(authors$1);
    if (match !== undefined) {
      return p(undefined, undefined, /* :: */[
                  class$prime(recordAuthors),
                  /* [] */0
                ], /* :: */[
                  text$2(match),
                  /* [] */0
                ]);
    } else {
      return noNode$1;
    }
  }

  function getPublishInfo(r) {
    var match = r[/* publishers */8];
    var publisher;
    if (match !== undefined) {
      var publishers = match;
      publisher = publishers.length !== 0 ? caml_array_get(publishers, 0) : undefined;
    } else {
      publisher = undefined;
    }
    var match$1 = r[/* publicationDates */10];
    var year;
    if (match$1 !== undefined) {
      var dates = match$1;
      year = dates.length !== 0 ? caml_array_get(dates, 0) : undefined;
    } else {
      year = undefined;
    }
    if (publisher !== undefined) {
      var pub = publisher;
      if (year !== undefined) {
        return _2(sprintf(/* Format */[
                        /* String */__(2, [
                            /* No_padding */0,
                            /* Char_literal */__(12, [
                                /* " " */32,
                                /* String */__(2, [
                                    /* No_padding */0,
                                    /* End_of_format */0
                                  ])
                              ])
                          ]),
                        "%s %s"
                      ]), pub, year);
      } else {
        return pub;
      }
    } else if (year !== undefined) {
      return year;
    } else {
      return undefined;
    }
  }

  function publishInfo(r) {
    var match = getPublishInfo(r);
    if (match !== undefined) {
      return span(undefined, undefined, /* :: */[
                  class$prime(recordPublisher),
                  /* [] */0
                ], /* :: */[
                  text$2(match),
                  /* [] */0
                ]);
    } else {
      return noNode$1;
    }
  }

  function recordField(css, field, value) {
    return p(undefined, undefined, /* :: */[
                class$prime(css),
                /* [] */0
              ], /* :: */[
                span(undefined, undefined, /* :: */[
                      class$prime(recordFieldHeader),
                      /* [] */0
                    ], /* :: */[
                      text$2(_1(sprintf(/* Format */[
                                    /* String */__(2, [
                                        /* No_padding */0,
                                        /* String_literal */__(11, [
                                            ": ",
                                            /* End_of_format */0
                                          ])
                                      ]),
                                    "%s: "
                                  ]), field)),
                      /* [] */0
                    ]),
                /* :: */[
                  span(undefined, undefined, /* :: */[
                        class$prime(recordFieldText),
                        /* [] */0
                      ], /* :: */[
                        text$2(value),
                        /* [] */0
                      ]),
                  /* [] */0
                ]
              ]);
  }

  function renderRecordRow(value) {
    return p(undefined, undefined, /* :: */[
                class$prime(recordFieldRow),
                /* [] */0
              ], /* :: */[
                text$2(value),
                /* [] */0
              ]);
  }

  function recordRows(value) {
    return div$2(undefined, undefined, /* [] */0, value !== undefined ? map(renderRecordRow, to_list(value)) : /* :: */[
                  noNode$1,
                  /* [] */0
                ]);
  }

  function isbn(r) {
    var match = r[/* isbn */6];
    var match$1 = r[/* issn */7];
    var match$2 = match !== undefined ? /* tuple */[
        "ISBN",
        match
      ] : (
        match$1 !== undefined ? /* tuple */[
            "ISSN",
            match$1
          ] : /* tuple */[
            "",
            undefined
          ]
      );
    var num = match$2[1];
    if (num !== undefined) {
      return recordField(recordIsbn, match$2[0], num);
    } else {
      return noNode$1;
    }
  }

  function getSummary(summary$$1) {
    if (summary$$1 !== undefined) {
      var summary$1 = summary$$1;
      if (summary$1.length !== 0) {
        return concat$3(". ", to_list(summary$1));
      } else {
        return undefined;
      }
    }
    
  }

  function summary$1(summary$1) {
    var match = getSummary(summary$1);
    if (match !== undefined) {
      return p(undefined, undefined, /* :: */[
                  class$prime(recordSummary),
                  /* [] */0
                ], /* :: */[
                  text$2(match),
                  /* [] */0
                ]);
    } else {
      return noNode$1;
    }
  }

  function urlList(r) {
    var match = r[/* urls */12];
    var tmp;
    if (match !== undefined) {
      var urls = match;
      tmp = urls.length !== 0 ? to_list(urls) : /* [] */0;
    } else {
      tmp = /* [] */0;
    }
    var match$1 = r[/* onlineUrls */11];
    var tmp$1;
    if (match$1 !== undefined) {
      var urls$1 = match$1;
      tmp$1 = urls$1.length !== 0 ? to_list(urls$1) : /* [] */0;
    } else {
      tmp$1 = /* [] */0;
    }
    var urls$2 = $at(tmp, tmp$1);
    if (length(urls$2) > 0) {
      return ul(undefined, undefined, /* :: */[
                  class$prime(recordLinks),
                  /* [] */0
                ], map((function (url) {
                        var match = url[/* label */1];
                        var match$1 = url[/* url */0];
                        if (match !== undefined) {
                          if (match$1 !== undefined) {
                            return li(undefined, undefined, /* :: */[
                                        class$prime(recordLink),
                                        /* [] */0
                                      ], /* :: */[
                                        a(undefined, undefined, /* :: */[
                                              class$prime(textLink),
                                              /* :: */[
                                                href(match$1),
                                                /* [] */0
                                              ]
                                            ], /* :: */[
                                              text$2(match),
                                              /* [] */0
                                            ]),
                                        /* [] */0
                                      ]);
                          } else {
                            return noNode$1;
                          }
                        } else if (match$1 !== undefined) {
                          var url$1 = match$1;
                          return li(undefined, undefined, /* :: */[
                                      class$prime(recordLink),
                                      /* [] */0
                                    ], /* :: */[
                                      a(undefined, undefined, /* :: */[
                                            class$prime(textLink),
                                            /* :: */[
                                              href(url$1),
                                              /* [] */0
                                            ]
                                          ], /* :: */[
                                            text$2(url$1),
                                            /* [] */0
                                          ]),
                                      /* [] */0
                                    ]);
                        } else {
                          return noNode$1;
                        }
                      }), urls$2));
    } else {
      return noNode$1;
    }
  }

  function searchLink(lookfor, label, exact) {
    var term = exact ? _1(sprintf(/* Format */[
                /* Char_literal */__(12, [
                    /* "\"" */34,
                    /* String */__(2, [
                        /* No_padding */0,
                        /* Char_literal */__(12, [
                            /* "\"" */34,
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "\"%s\""
              ]), lookfor) : lookfor;
    return a(undefined, undefined, /* :: */[
                class$prime(recordSearchLink),
                /* :: */[
                  onClick(/* SearchLinkClick */__(5, [term])),
                  /* [] */0
                ]
              ], /* :: */[
                text$2(label),
                /* [] */0
              ]);
  }

  function searchLinkList(title$$1, list) {
    if (list !== undefined) {
      var items = list;
      if (items.length !== 0) {
        return div$2(undefined, undefined, /* :: */[
                    class$prime(recordSearchLinksContainer),
                    /* [] */0
                  ], /* :: */[
                    h3(undefined, undefined, /* [] */0, /* :: */[
                          text$2(title$$1),
                          /* [] */0
                        ]),
                    /* :: */[
                      ul(undefined, undefined, /* :: */[
                            class$prime(recordSearchLinkList),
                            /* [] */0
                          ], to_list(map$1((function (text) {
                                      var link = searchLink(text, text, true);
                                      return li(undefined, undefined, /* [] */0, /* :: */[
                                                  link,
                                                  /* [] */0
                                                ]);
                                    }), items))),
                      /* [] */0
                    ]
                  ]);
      } else {
        return noNode$1;
      }
    } else {
      return noNode$1;
    }
  }

  function finnaLink(id, context) {
    return p(undefined, undefined, /* :: */[
                class$prime(recordFinnaLink),
                /* [] */0
              ], /* :: */[
                a(undefined, undefined, /* :: */[
                      href(getRecordLink(id)),
                      /* :: */[
                        class$prime(textLink),
                        /* [] */0
                      ]
                    ], /* :: */[
                      text$2(trans$1("View in Finna", context[/* translations */1])),
                      /* [] */0
                    ]),
                /* [] */0
              ]);
  }

  function recordNavigation(record$$1, context) {
    var resultCount = context[/* numOfResults */6];
    var pagination = paginateRecord(record$$1[/* id */0], context[/* recordIds */5], resultCount, context[/* resultLimit */7]);
    var renderPagination = function (pagination) {
      var loadBkgProp = prop("load-in-bkg", "1");
      var label = trans$1("Previous", context[/* translations */1]);
      var _j = pagination[/* prev */2];
      var el;
      if (typeof _j === "number") {
        el = noNode$1;
      } else {
        switch (_j.tag | 0) {
          case 0 : 
              el = a(undefined, undefined, /* :: */[
                    class$prime(arrowIcon(/* ArrowLeft */3)),
                    /* :: */[
                      href(routeToUrl(/* RecordRoute */__(1, [_j[0]]))),
                      /* :: */[
                        title(label),
                        /* [] */0
                      ]
                    ]
                  ], /* [] */0);
              break;
          case 1 : 
              var match = _j[0];
              el = a(undefined, undefined, /* :: */[
                    class$prime(arrowIcon(/* ArrowLeft */3)),
                    /* :: */[
                      loadBkgProp,
                      /* :: */[
                        onClick(/* RecordPaginate */__(1, [/* tuple */[
                                  match[0],
                                  /* Navigate */[/* tuple */[
                                      match[1],
                                      /* Backward */1
                                    ]]
                                ]])),
                        /* :: */[
                          title(label),
                          /* [] */0
                        ]
                      ]
                    ]
                  ], /* [] */0);
              break;
          case 2 : 
              el = noNode$1;
              break;
          
        }
      }
      var el$1 = append(/* :: */[
            el,
            /* [] */0
          ], /* :: */[
            resultCount > 0 ? p(undefined, undefined, /* :: */[
                    class$prime(paginateInfo),
                    /* [] */0
                  ], /* :: */[
                    text$2(_2(sprintf(/* Format */[
                                  /* Int */__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* String_literal */__(11, [
                                          " / ",
                                          /* Int */__(4, [
                                              /* Int_d */0,
                                              /* No_padding */0,
                                              /* No_precision */0,
                                              /* End_of_format */0
                                            ])
                                        ])
                                    ]),
                                  "%d / %d"
                                ]), pagination[/* ind */4] + 1 | 0, resultCount)),
                    /* [] */0
                  ]) : noNode$1,
            /* [] */0
          ]);
      var label$1$$1 = trans$1("Next", context[/* translations */1]);
      var match$1 = pagination[/* next */1];
      var tmp;
      if (typeof match$1 === "number") {
        tmp = noNode$1;
      } else {
        switch (match$1.tag | 0) {
          case 0 : 
              tmp = a(undefined, undefined, /* :: */[
                    class$prime(arrowIcon(/* ArrowRight */1)),
                    /* :: */[
                      href(routeToUrl(/* RecordRoute */__(1, [match$1[0]]))),
                      /* :: */[
                        title(label$1$$1),
                        /* [] */0
                      ]
                    ]
                  ], /* [] */0);
              break;
          case 1 : 
              tmp = noNode$1;
              break;
          case 2 : 
              var match$2 = match$1[0];
              tmp = a(undefined, undefined, /* :: */[
                    class$prime(arrowIcon(/* ArrowRight */1)),
                    /* :: */[
                      loadBkgProp,
                      /* :: */[
                        onClick(/* RecordPaginate */__(1, [/* tuple */[
                                  match$2[0],
                                  /* Navigate */[/* tuple */[
                                      match$2[1],
                                      /* Forward */0
                                    ]]
                                ]])),
                        /* :: */[
                          title(label$1$$1),
                          /* [] */0
                        ]
                      ]
                    ]
                  ], /* [] */0);
              break;
          
        }
      }
      return append(el$1, /* :: */[
                  tmp,
                  /* [] */0
                ]);
    };
    return div$2(undefined, undefined, /* :: */[
                class$prime(paginationContainer),
                /* [] */0
              ], /* :: */[
                div$2(undefined, undefined, /* [] */0, append(pagination !== undefined ? renderPagination(pagination) : /* :: */[
                            noNode$1,
                            /* [] */0
                          ], /* :: */[
                          a(undefined, undefined, /* :: */[
                                class$prime(closeRecordIcon),
                                /* :: */[
                                  onClick(/* CloseRecord */1),
                                  /* [] */0
                                ]
                              ], /* [] */0),
                          /* [] */0
                        ])),
                /* [] */0
              ]);
  }

  function viewRecord(r, context) {
    var match = r[/* subjects */16];
    var subjects = match !== undefined ? map$1((function (el) {
              return caml_array_get(el, 0);
            }), match) : undefined;
    var match$1 = r[/* title */1];
    var tmp;
    if (match$1 !== undefined) {
      var title$$1 = match$1;
      tmp = title$$1 !== "" ? h1(undefined, undefined, /* [] */0, /* :: */[
              text$2(title$$1),
              /* [] */0
            ]) : noNode$1;
    } else {
      tmp = noNode$1;
    }
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                recordNavigation(r, context),
                /* :: */[
                  div$2(undefined, undefined, /* :: */[
                        class$prime(recordContent),
                        /* [] */0
                      ], /* :: */[
                        tmp,
                        /* :: */[
                          summary$1(r[/* summary */13]),
                          /* :: */[
                            authors(r[/* authors */4]),
                            /* :: */[
                              publishInfo(r),
                              /* :: */[
                                isbn(r),
                                /* :: */[
                                  div$2(undefined, undefined, /* :: */[
                                        class$prime(recordRow),
                                        /* [] */0
                                      ], /* :: */[
                                        formats(r[/* formats */2], true),
                                        /* :: */[
                                          buildings(r[/* buildings */5]),
                                          /* [] */0
                                        ]
                                      ]),
                                  /* :: */[
                                    urlList(r),
                                    /* :: */[
                                      recordRows(r[/* measurements */14]),
                                      /* :: */[
                                        images(r[/* id */0], r[/* images */3]),
                                        /* :: */[
                                          searchLinkList(trans$1("Subjects", context[/* translations */1]), subjects),
                                          /* :: */[
                                            searchLinkList(trans$1("Genres", context[/* translations */1]), r[/* genres */15]),
                                            /* :: */[
                                              finnaLink(r[/* id */0], context),
                                              /* [] */0
                                            ]
                                          ]
                                        ]
                                      ]
                                    ]
                                  ]
                                ]
                              ]
                            ]
                          ]
                        ]
                      ]),
                  /* [] */0
                ]
              ]);
  }

  function view(model, context) {
    var match = model[/* record */0];
    var tmp;
    if (typeof match === "number") {
      tmp = match === 1 ? statusLoading(context) : noNode$1;
    } else {
      switch (match.tag | 0) {
        case 2 : 
            tmp = statusError(match[0]);
            break;
        case 3 : 
            tmp = viewRecord(match[0], context);
            break;
        default:
          tmp = noNode$1;
      }
    }
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                tmp,
                /* [] */0
              ]);
  }

  var init$4 = /* record */[
    /* record : NotAsked */0,
    /* nextRecord : NotAsked */0,
    /* navigateCmd : NoNavigate */0
  ];
  /* Util Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function initFacets(lookfor) {
    var facets$$1 = { };
    iter((function (param$$1) {
            var key = param$$1[1];
            var facet_001 = /* type' */param$$1[0];
            var facet_002 = /* items : NotAskedType */__(0, [/* array */[]]);
            var facet$$1 = /* record */[
              /* key */key,
              facet_001,
              facet_002,
              /* lookfor */lookfor,
              /* opened */false,
              /* count */undefined
            ];
            facets$$1[key] = facet$$1;
            return /* () */0;
          }), /* :: */[
          /* tuple */[
            /* FacetBoolean */1,
            "online_boolean"
          ],
          /* :: */[
            /* tuple */[
              /* FacetNormal */0,
              "format"
            ],
            /* :: */[
              /* tuple */[
                /* FacetNormal */0,
                "building"
              ],
              /* :: */[
                /* tuple */[
                  /* FacetNormal */0,
                  "language"
                ],
                /* :: */[
                  /* tuple */[
                    /* FacetNormal */0,
                    "topic_facet"
                  ],
                  /* [] */0
                ]
              ]
            ]
          ]
        ]);
    return facets$$1;
  }

  var init_002 = /* facets */initFacets("");

  var init$5 = /* record */[
    /* isOpen */false,
    /* lookfor */"",
    init_002,
    /* filters : [] */0
  ];

  function toggleFacetMenu(mode, model) {
    pageYScroll(!mode);
    return /* record */[
            /* isOpen */mode,
            /* lookfor */model[/* lookfor */1],
            /* facets */model[/* facets */2],
            /* filters */model[/* filters */3]
          ];
  }

  function update$1(model, lookfor, filters, param$$1) {
    var exit = 0;
    if (typeof param$$1 === "number") {
      if (param$$1 === 0) {
        var model$1 = toggleFacetMenu(true, model);
        if (lookfor === model$1[/* lookfor */1] && caml_equal(filters, model$1[/* filters */3])) {
          return /* tuple */[
                  model$1,
                  none$1
                ];
        } else {
          var entries$$1 = to_list(entries(model$1[/* facets */2]));
          var opened = filter((function (param$$1) {
                    var facet$$1 = param$$1[1];
                    var match = facet$$1[/* items */2];
                    var exit = 0;
                    if (typeof match === "number" || match.tag) {
                      exit = 1;
                    } else {
                      return false;
                    }
                    if (exit === 1) {
                      if (facet$$1[/* opened */4] === false) {
                        return false;
                      } else {
                        return true;
                      }
                    }
                    
                  }))(entries$$1);
          var cmds = map((function (param$$1) {
                  return msg(/* GetFacets */__(0, [param$$1[0]]));
                }), opened);
          var closed = filter((function (f1) {
                    return !exists((function (f2) {
                                  return caml_equal(f1, f2);
                                }), opened);
                  }))(entries$$1);
          var facets$$1 = model$1[/* facets */2];
          iter((function (param$$1) {
                  var key = param$$1[0];
                  var match = facets$$1[key];
                  if (match !== undefined) {
                    facets$$1[key] = /* record */[
                      /* key */match[/* key */0],
                      /* type' */match[/* type' */1],
                      /* items : NotAskedType */__(0, [/* array */[]]),
                      /* lookfor */match[/* lookfor */3],
                      /* opened */match[/* opened */4],
                      /* count */undefined
                    ];
                    return /* () */0;
                  } else {
                    return /* () */0;
                  }
                }), closed);
          return /* tuple */[
                  /* record */[
                    /* isOpen */model$1[/* isOpen */0],
                    /* lookfor */lookfor,
                    /* facets */facets$$1,
                    /* filters */filters
                  ],
                  batch(cmds)
                ];
        }
      } else {
        exit = 1;
      }
    } else {
      switch (param$$1.tag | 0) {
        case 0 : 
            return /* tuple */[
                    model,
                    none$1
                  ];
        case 1 : 
            var key = param$$1[0];
            var facets$1 = model[/* facets */2];
            var match = facets$1[key];
            var match$1;
            if (match !== undefined) {
              var opened$1 = !match[/* opened */4];
              var facet_000 = /* key */match[/* key */0];
              var facet_001 = /* type' */match[/* type' */1];
              var facet_002 = /* items */match[/* items */2];
              var facet_003 = /* lookfor */match[/* lookfor */3];
              var facet_005 = /* count */match[/* count */5];
              var facet$$1 = /* record */[
                facet_000,
                facet_001,
                facet_002,
                facet_003,
                /* opened */opened$1,
                facet_005
              ];
              var cmd = opened$1 && caml_equal(facet_002, /* NotAskedType */__(0, [/* array */[]])) ? msg(/* GetFacets */__(0, [key])) : none$1;
              facets$1[key] = facet$$1;
              match$1 = /* tuple */[
                facets$1,
                cmd
              ];
            } else {
              match$1 = /* tuple */[
                facets$1,
                none$1
              ];
            }
            return /* tuple */[
                    /* record */[
                      /* isOpen */model[/* isOpen */0],
                      /* lookfor */model[/* lookfor */1],
                      /* facets */match$1[0],
                      /* filters */model[/* filters */3]
                    ],
                    match$1[1]
                  ];
        case 2 : 
            exit = 1;
            break;
        
      }
    }
    if (exit === 1) {
      var model$2 = toggleFacetMenu(false, model);
      return /* tuple */[
              model$2,
              none$1
            ];
    }
    
  }

  function isFacetActive(filters, facetKey) {
    return exists((function (param$$1) {
                  return caml_equal(facetKey, param$$1[0]);
                }), filters);
  }

  function isFacetItemActive(filters, facetKey, facetValue) {
    return exists((function (param$$1) {
                  if (caml_equal(facetKey, param$$1[0])) {
                    return caml_equal(facetValue, param$$1[1]);
                  } else {
                    return false;
                  }
                }), filters);
  }

  function getFacetLabel(key, value, type$prime$$1, translations) {
    if (type$prime$$1) {
      var key$1 = _2(sprintf(/* Format */[
                /* String */__(2, [
                    /* No_padding */0,
                    /* Char_literal */__(12, [
                        /* "_" */95,
                        /* String */__(2, [
                            /* No_padding */0,
                            /* End_of_format */0
                          ])
                      ])
                  ]),
                "%s_%s"
              ]), key, value);
      return trans$1(key$1, translations);
    } else {
      return trans$1(value, translations);
    }
  }

  function facetList(facets$$1, filters, context) {
    var renderFacetItems = function (key, type$prime$$1, items, filters) {
      return map$1((function (item) {
                    var key$1 = key;
                    var type$prime$1 = type$prime$$1;
                    var item$1 = item;
                    var filters$1 = filters;
                    var isActive = isFacetItemActive(filters$1, key$1, item$1[/* value */0]);
                    var label = getFacetLabel(key$1, item$1[/* value */0], type$prime$1, context[/* translations */1]);
                    return li(undefined, undefined, /* :: */[
                                onClick(/* ToggleFacetItem */__(2, [/* tuple */[
                                          !isActive,
                                          /* tuple */[
                                            key$1,
                                            item$1[/* value */0]
                                          ]
                                        ]])),
                                /* :: */[
                                  class$prime(facetItem(isActive)),
                                  /* [] */0
                                ]
                              ], /* :: */[
                                h3(undefined, undefined, /* :: */[
                                      class$prime(facetLabel(isActive)),
                                      /* [] */0
                                    ], /* :: */[
                                      span(undefined, undefined, /* [] */0, /* :: */[
                                            text$2(label),
                                            /* [] */0
                                          ]),
                                      /* :: */[
                                        span(undefined, undefined, /* :: */[
                                              class$prime(facetItemLabelCount),
                                              /* [] */0
                                            ], /* :: */[
                                              text$2(item$1[/* count */2].toLocaleString()),
                                              /* [] */0
                                            ]),
                                        /* [] */0
                                      ]
                                    ]),
                                /* [] */0
                              ]);
                  }), items);
    };
    var keys = Object.keys(facets$$1);
    return ul(undefined, undefined, /* [] */0, map((function (key) {
                      var match = facets$$1[key];
                      if (match !== undefined) {
                        var f = match;
                        var context$1 = context;
                        var renderFacet = function (opened, key, items, loading, filters, count) {
                          var icon = loading ? spinnerIcon : (
                              opened ? arrowIcon(/* ArrowDown */2) : arrowIcon(/* ArrowRight */1)
                            );
                          var active = isFacetActive(filters, key);
                          return li(undefined, undefined, /* :: */[
                                      class$prime(facet(opened, loading)),
                                      /* :: */[
                                        onClick(/* ToggleFacet */__(1, [key])),
                                        /* [] */0
                                      ]
                                    ], /* :: */[
                                      div$2(undefined, undefined, /* :: */[
                                            class$prime(facetTitleContainer),
                                            /* [] */0
                                          ], /* :: */[
                                            span(undefined, undefined, /* :: */[
                                                  class$prime(icon),
                                                  /* [] */0
                                                ], /* [] */0),
                                            /* :: */[
                                              h2(undefined, undefined, /* :: */[
                                                    class$prime(facetTitle(active)),
                                                    /* [] */0
                                                  ], /* :: */[
                                                    span(undefined, undefined, /* [] */0, /* :: */[
                                                          text$2(trans$1(key, context$1[/* translations */1])),
                                                          /* [] */0
                                                        ]),
                                                    /* :: */[
                                                      count !== undefined ? span(undefined, undefined, /* :: */[
                                                              class$prime(facetTitleCount),
                                                              /* [] */0
                                                            ], /* :: */[
                                                              text$2(count.toLocaleString()),
                                                              /* [] */0
                                                            ]) : noNode$1,
                                                      /* [] */0
                                                    ]
                                                  ]),
                                              /* [] */0
                                            ]
                                          ]),
                                      /* :: */[
                                        opened ? ul(undefined, undefined, /* :: */[
                                                class$prime(facetItemsContainer),
                                                /* [] */0
                                              ], to_list(renderFacetItems(key, f[/* type' */1], items, filters))) : noNode$1,
                                        /* [] */0
                                      ]
                                    ]);
                        };
                        var match$1 = f[/* items */2];
                        var exit = 0;
                        if (typeof match$1 === "number") {
                          return noNode$1;
                        } else {
                          switch (match$1.tag | 0) {
                            case 1 : 
                                return renderFacet(f[/* opened */4], f[/* key */0], match$1[0], true, filters, f[/* count */5]);
                            case 0 : 
                            case 3 : 
                                exit = 1;
                                break;
                            default:
                              return noNode$1;
                          }
                        }
                        if (exit === 1) {
                          return renderFacet(f[/* opened */4], f[/* key */0], match$1[0], false, filters, f[/* count */5]);
                        }
                        
                      } else {
                        return noNode$1;
                      }
                    }), to_list(keys)));
  }

  function view$1(model, context, filters) {
    if (model[/* isOpen */0] === false) {
      return noNode$1;
    } else {
      return div$2(undefined, undefined, /* :: */[
                  class$prime(facetModal),
                  /* [] */0
                ], /* :: */[
                  div$2(undefined, undefined, /* :: */[
                        class$prime(facetHeader),
                        /* [] */0
                      ], /* :: */[
                        h1(undefined, undefined, /* :: */[
                              class$prime(facetHeading),
                              /* [] */0
                            ], /* :: */[
                              text$2(trans$1("Narrow search", context[/* translations */1])),
                              /* [] */0
                            ]),
                        /* :: */[
                          a(undefined, undefined, /* :: */[
                                class$prime(closeFacetsIcon),
                                /* :: */[
                                  onClick(/* CloseFacets */1),
                                  /* [] */0
                                ]
                              ], /* [] */0),
                          /* [] */0
                        ]
                      ]),
                  /* :: */[
                    facetList(model[/* facets */2], filters, context),
                    /* [] */0
                  ]
                ]);
    }
  }
  /* init Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function search(param_0) {
    return /* Search */__(0, [param_0]);
  }

  function searchMore(param_0) {
    return /* SearchMore */__(1, [param_0]);
  }

  function gotResults(param_0) {
    return /* GotResults */__(3, [param_0]);
  }

  function facetMsg(param_0) {
    return /* FacetMsg */__(5, [param_0]);
  }

  function gotFacets(param_0) {
    return /* GotFacets */__(6, [param_0]);
  }

  function ignoreRecordMsg(param_0) {
    return /* IgnoreRecordMsg */__(7, [param_0]);
  }

  var searchParams = /* record */[
    /* lookfor */"",
    /* filters : [] */0,
    /* page */0,
    /* limit */10
  ];

  var init_001 = /* results : record */[
    /* count */0,
    /* pageCount */0,
    /* pages */{ }
  ];

  var init_006 = /* onResults : PageLoaded */__(5, [/* SearchRoute */__(0, [searchParams])]);

  var init$6 = /* record */[
    /* searchParams */searchParams,
    init_001,
    /* lastSearch */undefined,
    /* nextResult : NotAsked */0,
    /* facetsOpen */false,
    /* facetModel */init$5,
    init_006
  ];

  function getSearchCmd(params, lng) {
    var lng$1 = finnaLanguageCode(lng);
    var params_000 = /* lookfor */params[/* lookfor */0];
    var params_001 = /* filters */params[/* filters */1];
    var params_002 = /* page */params[/* page */2] + 1 | 0;
    var params_003 = /* limit */params[/* limit */3];
    var params$1 = /* record */[
      params_000,
      params_001,
      params_002,
      params_003
    ];
    var url = getSearchUrl(params$1, lng$1);
    return send$1(gotResults, getString(url));
  }

  function appendResults(model, newResults) {
    var match = model[/* nextResult */3];
    var page;
    page = typeof match === "number" || match.tag !== 1 ? model[/* searchParams */0][/* page */2] : match[0][/* page */0];
    var match$1;
    if (typeof newResults === "number" || newResults.tag !== 3) {
      match$1 = /* tuple */[
        /* record */[
          /* page */page,
          /* results : Error */__(2, [""])
        ],
        0
      ];
    } else {
      var res = newResults[0];
      var count = res[/* resultCount */1];
      var resultPage_001 = /* results : Success */__(3, [res]);
      var resultPage = /* record */[
        /* page */page,
        resultPage_001
      ];
      match$1 = /* tuple */[
        resultPage,
        count
      ];
    }
    var count$1 = match$1[1];
    var pages = model[/* results */1][/* pages */2];
    pages[String(page)] = match$1[0];
    var pageCount = Math.ceil(count$1 / model[/* searchParams */0][/* limit */3]) + 0.5 | 0;
    var results = /* record */[
      /* count */count$1,
      /* pageCount */pageCount,
      /* pages */pages
    ];
    return /* record */[
            /* searchParams */model[/* searchParams */0],
            /* results */results,
            /* lastSearch */model[/* searchParams */0][/* lookfor */0],
            /* nextResult : NotAsked */0,
            /* facetsOpen */model[/* facetsOpen */4],
            /* facetModel */model[/* facetModel */5],
            /* onResults */model[/* onResults */6]
          ];
  }

  function updateFacet(facets$$1, key, mode, items) {
    var match = facets$$1[key];
    if (match !== undefined) {
      var match$1 = match[/* items */2];
      var exit = 0;
      if (typeof match$1 === "number") {
        return facets$$1;
      } else {
        switch (match$1.tag | 0) {
          case 0 : 
          case 1 : 
          case 3 : 
              exit = 1;
              break;
          default:
            return facets$$1;
        }
      }
      if (exit === 1) {
        var match$2;
        switch (mode) {
          case "loading" : 
              match$2 = /* tuple */[
                /* LoadingType */__(1, [items]),
                undefined
              ];
              break;
          case "success" : 
              var count = fold_left$1((function (cnt, facet$$1) {
                      return cnt + facet$$1[/* count */2] | 0;
                    }), 0, items);
              match$2 = /* tuple */[
                /* Success */__(3, [items]),
                count
              ];
              break;
          default:
            match$2 = /* tuple */[
              /* NotAskedType */__(0, [items]),
              undefined
            ];
        }
        var facet_000 = /* key */match[/* key */0];
        var facet_001 = /* type' */match[/* type' */1];
        var facet_002 = /* items */match$2[0];
        var facet_003 = /* lookfor */match[/* lookfor */3];
        var facet_004 = /* opened */match[/* opened */4];
        var facet_005 = /* count */match$2[1];
        var facet$$1 = /* record */[
          facet_000,
          facet_001,
          facet_002,
          facet_003,
          facet_004,
          facet_005
        ];
        facets$$1[key] = facet$$1;
        return facets$$1;
      }
      
    } else {
      return facets$$1;
    }
  }

  function toggleFilter(model, filterKey, filterVal, mode) {
    var filters = model[/* searchParams */0][/* filters */1];
    var filters$1;
    if (mode) {
      var filters$2 = of_list(filter((function (param$$1) {
                    return param$$1[0] !== filterKey;
                  }))(filters));
      filters$1 = append$1(filters$2, /* array */[/* tuple */[
              filterKey,
              filterVal
            ]]);
    } else {
      filters$1 = of_list(filter((function (param$$1) {
                    if (param$$1[1] !== filterVal) {
                      return param$$1[0] !== filterKey;
                    } else {
                      return false;
                    }
                  }))(filters));
    }
    var init$$1 = model[/* searchParams */0];
    var searchParams_000 = /* lookfor */init$$1[/* lookfor */0];
    var searchParams_001 = /* filters */to_list(filters$1);
    var searchParams_003 = /* limit */init$$1[/* limit */3];
    var searchParams = /* record */[
      searchParams_000,
      searchParams_001,
      /* page */0,
      searchParams_003
    ];
    var cmd = openUrl(routeToUrl(/* SearchRoute */__(0, [searchParams])));
    var model_001 = /* results */model[/* results */1];
    var model_004 = /* facetsOpen */model[/* facetsOpen */4];
    var model_005 = /* facetModel */model[/* facetModel */5];
    var model_006 = /* onResults */model[/* onResults */6];
    var model$1 = /* record */[
      /* searchParams */searchParams,
      model_001,
      /* lastSearch */undefined,
      /* nextResult : Loading */1,
      model_004,
      model_005,
      model_006
    ];
    return /* tuple */[
            cmd,
            model$1
          ];
  }

  function resultsCallback(inBkg, searchParams) {
    if (inBkg) {
      return /* GotResultsInBackground */1;
    } else {
      return /* PageLoaded */__(5, [/* SearchRoute */__(0, [searchParams])]);
    }
  }

  function isPageLoading(pageNum, resultPages) {
    var match = resultPages[String(pageNum)];
    if (match !== undefined) {
      var match$1 = match[/* results */1];
      if (typeof match$1 === "number") {
        if (match$1 === 0) {
          return /* NotAsked */0;
        } else {
          return /* Error */__(2, [""]);
        }
      } else {
        switch (match$1.tag | 0) {
          case 1 : 
              return /* Loading */1;
          case 3 : 
              return /* Success */__(3, [match$1[0]]);
          default:
            return /* Error */__(2, [""]);
        }
      }
    } else {
      return /* NotAsked */0;
    }
  }

  function isLoading(model) {
    var match = model[/* nextResult */3];
    if (typeof match === "number" || match.tag !== 1) {
      return false;
    } else {
      return true;
    }
  }

  function update$2(model, context, param$$1) {
    if (typeof param$$1 === "number") {
      if (param$$1 === 0) {
        var init$$1 = model[/* searchParams */0];
        var searchParams_000 = /* lookfor */init$$1[/* lookfor */0];
        var searchParams_001 = /* filters */init$$1[/* filters */1];
        var searchParams_003 = /* limit */init$$1[/* limit */3];
        var searchParams = /* record */[
          searchParams_000,
          searchParams_001,
          /* page */0,
          searchParams_003
        ];
        return /* tuple */[
                /* record */[
                  /* searchParams */searchParams,
                  /* results */model[/* results */1],
                  /* lastSearch */undefined,
                  /* nextResult */model[/* nextResult */3],
                  /* facetsOpen */model[/* facetsOpen */4],
                  /* facetModel */model[/* facetModel */5],
                  /* onResults : PageLoaded */__(5, [/* SearchRoute */__(0, [searchParams])])
                ],
                openUrl(routeToUrl(/* SearchRoute */__(0, [searchParams]))),
                /* :: */[
                  /* NoUpdate */0,
                  /* [] */0
                ]
              ];
      } else {
        return /* tuple */[
                model,
                map$9(facetMsg, msg(/* OpenFacets */0)),
                /* :: */[
                  /* NoUpdate */0,
                  /* [] */0
                ]
              ];
      }
    } else {
      switch (param$$1.tag | 0) {
        case 0 : 
            var params = param$$1[0];
            if (isLoading(model) === true) {
              return /* tuple */[
                      model,
                      none$1,
                      /* :: */[
                        /* NoUpdate */0,
                        /* [] */0
                      ]
                    ];
            } else {
              var match = model[/* lastSearch */2];
              var newSearch$$1 = match !== undefined ? match !== params[/* lookfor */0] : true;
              var page = params[/* page */2];
              var nextResult = /* record */[
                /* page */page,
                /* results : Loading */1
              ];
              var match$1;
              if (newSearch$$1) {
                match$1 = /* tuple */[
                  /* record */[
                    /* count */0,
                    /* pageCount */0,
                    /* pages */{ }
                  ],
                  /* PageLoaded */__(5, [/* SearchRoute */__(0, [params])])
                ];
              } else {
                var pages = model[/* results */1][/* pages */2];
                pages[String(page)] = nextResult;
                var init$1 = model[/* results */1];
                match$1 = /* tuple */[
                  /* record */[
                    /* count */init$1[/* count */0],
                    /* pageCount */init$1[/* pageCount */1],
                    /* pages */pages
                  ],
                  model[/* onResults */6]
                ];
              }
              var nextResult$1 = /* LoadingType */__(1, [nextResult]);
              var model_001 = /* results */match$1[0];
              var model_002 = /* lastSearch */model[/* lastSearch */2];
              var model_004 = /* facetsOpen */model[/* facetsOpen */4];
              var model_005 = /* facetModel */model[/* facetModel */5];
              var model_006 = /* onResults */match$1[1];
              var model$1 = /* record */[
                /* searchParams */params,
                model_001,
                model_002,
                /* nextResult */nextResult$1,
                model_004,
                model_005,
                model_006
              ];
              var cmd = getSearchCmd(params, context[/* language */0]);
              return /* tuple */[
                      model$1,
                      cmd,
                      /* :: */[
                        /* NoUpdate */0,
                        /* [] */0
                      ]
                    ];
            }
        case 1 : 
            var match$2 = param$$1[0];
            var searchInBkg = match$2[1];
            var match$3 = model[/* nextResult */3];
            var exit = 0;
            if (typeof match$3 === "number" || match$3.tag !== 1) {
              exit = 1;
            } else {
              return /* tuple */[
                      model,
                      none$1,
                      /* :: */[
                        /* NoUpdate */0,
                        /* [] */0
                      ]
                    ];
            }
            if (exit === 1) {
              var init$2 = model[/* searchParams */0];
              var searchParams_000$1 = /* lookfor */init$2[/* lookfor */0];
              var searchParams_001$1 = /* filters */init$2[/* filters */1];
              var searchParams_002 = /* page */match$2[0];
              var searchParams_003$1 = /* limit */init$2[/* limit */3];
              var searchParams$1 = /* record */[
                searchParams_000$1,
                searchParams_001$1,
                searchParams_002,
                searchParams_003$1
              ];
              var cb = resultsCallback(searchInBkg, searchParams$1);
              var match$4 = searchInBkg ? /* tuple */[
                  msg(/* Search */__(0, [searchParams$1])),
                  cb
                ] : /* tuple */[
                  openUrl(routeToUrl(/* SearchRoute */__(0, [searchParams$1]))),
                  cb
                ];
              return /* tuple */[
                      /* record */[
                        /* searchParams */searchParams$1,
                        /* results */model[/* results */1],
                        /* lastSearch */model[/* lastSearch */2],
                        /* nextResult */model[/* nextResult */3],
                        /* facetsOpen */model[/* facetsOpen */4],
                        /* facetModel */model[/* facetModel */5],
                        /* onResults */match$4[1]
                      ],
                      match$4[0],
                      /* :: */[
                        /* NoUpdate */0,
                        /* [] */0
                      ]
                    ];
            }
            break;
        case 2 : 
            var init$3$$1 = model[/* searchParams */0];
            var searchParams_000$2 = /* lookfor */param$$1[0];
            var searchParams_001$2 = /* filters */init$3$$1[/* filters */1];
            var searchParams_002$1 = /* page */init$3$$1[/* page */2];
            var searchParams_003$2 = /* limit */init$3$$1[/* limit */3];
            var searchParams$2 = /* record */[
              searchParams_000$2,
              searchParams_001$2,
              searchParams_002$1,
              searchParams_003$2
            ];
            return /* tuple */[
                    /* record */[
                      /* searchParams */searchParams$2,
                      /* results */model[/* results */1],
                      /* lastSearch */model[/* lastSearch */2],
                      /* nextResult */model[/* nextResult */3],
                      /* facetsOpen */model[/* facetsOpen */4],
                      /* facetModel */model[/* facetModel */5],
                      /* onResults */model[/* onResults */6]
                    ],
                    none$1,
                    /* :: */[
                      /* NoUpdate */0,
                      /* [] */0
                    ]
                  ];
        case 3 : 
            var match$5 = param$$1[0];
            if (match$5.tag) {
              var result = /* Error */__(2, [string_of_error(match$5[0])]);
              var model$2 = appendResults(model, result);
              var onResults = /* PageLoaded */__(5, [/* SearchRoute */__(0, [model$2[/* searchParams */0]])]);
              return /* tuple */[
                      /* record */[
                        /* searchParams */model$2[/* searchParams */0],
                        /* results */model$2[/* results */1],
                        /* lastSearch */model$2[/* lastSearch */2],
                        /* nextResult */model$2[/* nextResult */3],
                        /* facetsOpen */model$2[/* facetsOpen */4],
                        /* facetModel */model$2[/* facetModel */5],
                        /* onResults */onResults
                      ],
                      none$1,
                      /* :: */[
                        model$2[/* onResults */6],
                        /* [] */0
                      ]
                    ];
            } else {
              var result$1 = decodeSearchResults(match$5[0]);
              var model$3 = appendResults(model, result$1);
              var match$6 = recordPages(model$3[/* results */1]);
              var updateResultInfo$$1 = /* UpdateResultInfo */__(2, [/* tuple */[
                    model$3[/* results */1][/* count */0],
                    match$6[0],
                    model$3[/* searchParams */0][/* limit */3]
                  ]]);
              var onResults$1 = /* PageLoaded */__(5, [/* SearchRoute */__(0, [model$3[/* searchParams */0]])]);
              return /* tuple */[
                      /* record */[
                        /* searchParams */model$3[/* searchParams */0],
                        /* results */model$3[/* results */1],
                        /* lastSearch */model$3[/* lastSearch */2],
                        /* nextResult */model$3[/* nextResult */3],
                        /* facetsOpen */model$3[/* facetsOpen */4],
                        /* facetModel */model$3[/* facetModel */5],
                        /* onResults */onResults$1
                      ],
                      none$1,
                      /* :: */[
                        updateResultInfo$$1,
                        /* :: */[
                          model$3[/* onResults */6],
                          /* [] */0
                        ]
                      ]
                    ];
            }
        case 4 : 
            var match$7 = toggleFilter(model, param$$1[0], "", false);
            return /* tuple */[
                    match$7[1],
                    match$7[0],
                    /* :: */[
                      /* NoUpdate */0,
                      /* [] */0
                    ]
                  ];
        case 5 : 
            var subMsg = param$$1[0];
            var match$8 = model[/* lastSearch */2];
            var lookfor = match$8 !== undefined ? match$8 : model[/* searchParams */0][/* lookfor */0];
            var match$9 = update$1(model[/* facetModel */5], lookfor, model[/* searchParams */0][/* filters */1], subMsg);
            var facetModel = match$9[0];
            var exit$1 = 0;
            if (typeof subMsg === "number") {
              exit$1 = 1;
            } else {
              switch (subMsg.tag | 0) {
                case 0 : 
                    var facet$$1 = subMsg[0];
                    var filters = filter((function (param$$1) {
                              return facet$$1 !== param$$1[0];
                            }))(model[/* searchParams */0][/* filters */1]);
                    var init$4$$1 = model[/* searchParams */0];
                    var params_000 = /* lookfor */init$4$$1[/* lookfor */0];
                    var params_002 = /* page */init$4$$1[/* page */2];
                    var params_003 = /* limit */init$4$$1[/* limit */3];
                    var params$1 = /* record */[
                      params_000,
                      /* filters */filters,
                      params_002,
                      params_003
                    ];
                    var lng = finnaLanguageCode(context[/* language */0]);
                    var url = getFacetSearchUrl(facet$$1, params$1, lng);
                    var cmd$1 = send$1(gotFacets, getString(url));
                    var facets$$1 = updateFacet(model[/* facetModel */5][/* facets */2], facet$$1, "loading", /* array */[]);
                    return /* tuple */[
                            /* record */[
                              /* searchParams */model[/* searchParams */0],
                              /* results */model[/* results */1],
                              /* lastSearch */model[/* lastSearch */2],
                              /* nextResult */model[/* nextResult */3],
                              /* facetsOpen */model[/* facetsOpen */4],
                              /* facetModel : record */[
                                /* isOpen */facetModel[/* isOpen */0],
                                /* lookfor */facetModel[/* lookfor */1],
                                /* facets */facets$$1,
                                /* filters */facetModel[/* filters */3]
                              ],
                              /* onResults */model[/* onResults */6]
                            ],
                            cmd$1,
                            /* :: */[
                              /* NoUpdate */0,
                              /* [] */0
                            ]
                          ];
                case 2 : 
                    var match$10 = subMsg[0];
                    var match$11 = match$10[1];
                    var match$12 = toggleFilter(model, match$11[0], match$11[1], match$10[0]);
                    var model$4 = match$12[1];
                    var model_000 = /* searchParams */model$4[/* searchParams */0];
                    var model_001$1 = /* results */model$4[/* results */1];
                    var model_002$1 = /* lastSearch */model$4[/* lastSearch */2];
                    var model_003 = /* nextResult */model$4[/* nextResult */3];
                    var model_004$1 = /* facetsOpen */model$4[/* facetsOpen */4];
                    var model_006$1 = /* onResults */model$4[/* onResults */6];
                    var model$5 = /* record */[
                      model_000,
                      model_001$1,
                      model_002$1,
                      model_003,
                      model_004$1,
                      /* facetModel */facetModel,
                      model_006$1
                    ];
                    return /* tuple */[
                            model$5,
                            match$12[0],
                            /* :: */[
                              /* NoUpdate */0,
                              /* [] */0
                            ]
                          ];
                default:
                  exit$1 = 1;
              }
            }
            if (exit$1 === 1) {
              return /* tuple */[
                      /* record */[
                        /* searchParams */model[/* searchParams */0],
                        /* results */model[/* results */1],
                        /* lastSearch */model[/* lastSearch */2],
                        /* nextResult */model[/* nextResult */3],
                        /* facetsOpen */model[/* facetsOpen */4],
                        /* facetModel */facetModel,
                        /* onResults */model[/* onResults */6]
                      ],
                      map$9(facetMsg, match$9[1]),
                      /* :: */[
                        /* NoUpdate */0,
                        /* [] */0
                      ]
                    ];
            }
            break;
        case 6 : 
            var match$13 = param$$1[0];
            if (match$13.tag) {
              return /* tuple */[
                      model,
                      none$1,
                      /* :: */[
                        /* NoUpdate */0,
                        /* [] */0
                      ]
                    ];
            } else {
              var translations = context[/* translations */1];
              var match$14 = decodeFacetResults(match$13[0]);
              var facets$1;
              if (typeof match$14 === "number") {
                facets$1 = model[/* facetModel */5][/* facets */2];
              } else {
                switch (match$14.tag | 0) {
                  case 2 : 
                      facets$1 = model[/* facetModel */5][/* facets */2];
                      break;
                  case 3 : 
                      var match$15 = match$14[0];
                      var items = match$15[1];
                      var newTranslations = map$1((function (f) {
                              return /* tuple */[
                                      f[/* value */0],
                                      f[/* translated */1]
                                    ];
                            }), items);
                      updateTranslations(translations, newTranslations);
                      facets$1 = updateFacet(model[/* facetModel */5][/* facets */2], match$15[0], "success", items);
                      break;
                  default:
                    facets$1 = model[/* facetModel */5][/* facets */2];
                }
              }
              var init$5$$1 = model[/* facetModel */5];
              return /* tuple */[
                      /* record */[
                        /* searchParams */model[/* searchParams */0],
                        /* results */model[/* results */1],
                        /* lastSearch */model[/* lastSearch */2],
                        /* nextResult */model[/* nextResult */3],
                        /* facetsOpen */model[/* facetsOpen */4],
                        /* facetModel : record */[
                          /* isOpen */init$5$$1[/* isOpen */0],
                          /* lookfor */init$5$$1[/* lookfor */1],
                          /* facets */facets$1,
                          /* filters */init$5$$1[/* filters */3]
                        ],
                        /* onResults */model[/* onResults */6]
                      ],
                      none$1,
                      /* :: */[
                        /* UpdateTranslations */__(0, [translations]),
                        /* [] */0
                      ]
                    ];
            }
        case 7 : 
            return /* tuple */[
                    model,
                    none$1,
                    /* :: */[
                      /* NoUpdate */0,
                      /* [] */0
                    ]
                  ];
        
      }
    }
  }

  function renderResultItem(r, visitedRecords) {
    var len = visitedRecords.length;
    var lastVisited = len === 0 ? false : caml_array_get(visitedRecords, len - 1 | 0) === r[/* id */0];
    var visited;
    try {
      find((function (id) {
              return id === r[/* id */0];
            }), to_list(visitedRecords));
      visited = true;
    }
    catch (exn){
      if (exn === not_found) {
        visited = false;
      } else {
        throw exn;
      }
    }
    var match = r[/* title */1];
    var tmp;
    if (match !== undefined) {
      var title$$1 = match;
      tmp = title$$1 !== "" ? h1(undefined, undefined, /* [] */0, /* :: */[
              text$2(title$$1),
              /* [] */0
            ]) : noNode$1;
    } else {
      tmp = noNode$1;
    }
    return a(undefined, undefined, /* :: */[
                href(routeToUrl(/* RecordRoute */__(1, [r[/* id */0]]))),
                /* [] */0
              ], /* :: */[
                li(undefined, undefined, /* :: */[
                      id$1(hash(r[/* id */0])),
                      /* :: */[
                        class$prime(recordListBkg(visited, lastVisited)),
                        /* [] */0
                      ]
                    ], /* :: */[
                      authors(r[/* authors */4]),
                      /* :: */[
                        tmp,
                        /* :: */[
                          map$11(ignoreRecordMsg, formats(r[/* formats */2], false)),
                          /* :: */[
                            publishInfo(r),
                            /* :: */[
                              buildings(r[/* buildings */5]),
                              /* [] */0
                            ]
                          ]
                        ]
                      ]
                    ]),
                /* [] */0
              ]);
  }

  function resultPageLoadNeighbor(model, pageNum, resultPages, context, dir) {
    var pageLoading = isPageLoading(pageNum, resultPages);
    if (typeof pageLoading === "number") {
      var arrow = dir === /* Backward */1 ? /* ArrowUp */0 : /* ArrowDown */2;
      var isLoading$1 = isLoading(model);
      return div$2(undefined, undefined, /* :: */[
                  class$prime(nextPage(isLoading$1)),
                  /* :: */[
                    isLoading$1 ? noProp$1 : onClick(/* SearchMore */__(1, [/* tuple */[
                                pageNum,
                                false
                              ]])),
                    /* [] */0
                  ]
                ], /* :: */[
                  p(undefined, undefined, /* [] */0, /* :: */[
                        span(undefined, undefined, /* :: */[
                              class$prime(nextPageLabel),
                              /* [] */0
                            ], /* :: */[
                              text$2(_2(sprintf(/* Format */[
                                            /* String */__(2, [
                                                /* No_padding */0,
                                                /* Char_literal */__(12, [
                                                    /* " " */32,
                                                    /* Int */__(4, [
                                                        /* Int_d */0,
                                                        /* No_padding */0,
                                                        /* No_precision */0,
                                                        /* End_of_format */0
                                                      ])
                                                  ])
                                              ]),
                                            "%s %d"
                                          ]), trans$1("Page", context[/* translations */1]), pageNum + 1 | 0)),
                              /* [] */0
                            ]),
                        /* :: */[
                          span(undefined, undefined, /* :: */[
                                class$prime(arrowIcon(arrow)),
                                /* [] */0
                              ], /* [] */0),
                          /* [] */0
                        ]
                      ]),
                  /* [] */0
                ]);
    } else {
      return noNode$1;
    }
  }

  function renderResultPage(pageNum, searchResult, model, context) {
    var records = searchResult[/* records */0];
    var items = to_list(map$1((function (r) {
                return renderResultItem(r, context[/* visitedRecords */2]);
              }), records));
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                pageNum > 0 ? resultPageLoadNeighbor(model, pageNum - 1 | 0, model[/* results */1][/* pages */2], context, /* Backward */1) : noNode$1,
                /* :: */[
                  ul(undefined, undefined, /* :: */[
                        class$prime(searchResults),
                        /* [] */0
                      ], /* :: */[
                        div$2(undefined, undefined, /* [] */0, items),
                        /* [] */0
                      ]),
                  /* :: */[
                    pageNum < (model[/* results */1][/* pageCount */1] - 1 | 0) ? resultPageLoadNeighbor(model, pageNum + 1 | 0, model[/* results */1][/* pages */2], context, /* Forward */0) : noNode$1,
                    /* [] */0
                  ]
                ]
              ]);
  }

  function resultPage(page, model, context) {
    var match = page[/* results */1];
    var match$1 = page[/* page */0];
    if (typeof match === "number") {
      if (match === 1) {
        return div$2(undefined, undefined, /* :: */[
                    class$prime(nextPage(true)),
                    /* [] */0
                  ], /* :: */[
                    p(undefined, undefined, /* [] */0, /* :: */[
                          span(undefined, undefined, /* :: */[
                                class$prime(nextPageLabel),
                                /* [] */0
                              ], /* :: */[
                                text$2(trans$1("Loading...", context[/* translations */1])),
                                /* [] */0
                              ]),
                          /* :: */[
                            span(undefined, undefined, /* :: */[
                                  class$prime(spinnerIcon),
                                  /* [] */0
                                ], /* [] */0),
                            /* [] */0
                          ]
                        ]),
                    /* [] */0
                  ]);
      } else {
        return noNode$1;
      }
    } else {
      switch (match.tag | 0) {
        case 2 : 
            return statusError(match[0]);
        case 3 : 
            return renderResultPage(match$1, match[0], model, context);
        default:
          return noNode$1;
      }
    }
  }

  function results(results$1, model, context) {
    var pageNums = Object.keys(results$1[/* pages */2]);
    sort$1((function (a$$1, b$$1) {
            var a$1 = caml_int_of_string(a$$1);
            var b$1 = caml_int_of_string(b$$1);
            if (a$1 > b$1) {
              return 1;
            } else {
              return -1;
            }
          }), pageNums);
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                !isLoading(model) || results$1[/* count */0] > 0 ? h3(undefined, undefined, /* :: */[
                        class$prime(searchResultsInfo),
                        /* [] */0
                      ], /* :: */[
                        text$2(_2(sprintf(/* Format */[
                                      /* String */__(2, [
                                          /* No_padding */0,
                                          /* String_literal */__(11, [
                                              ": ",
                                              /* String */__(2, [
                                                  /* No_padding */0,
                                                  /* End_of_format */0
                                                ])
                                            ])
                                        ]),
                                      "%s: %s"
                                    ]), trans$1("Results", context[/* translations */1]), results$1[/* count */0].toLocaleString())),
                        /* [] */0
                      ]) : noNode$1,
                /* :: */[
                  div$2(undefined, undefined, /* [] */0, to_list(map$1((function (pageNum) {
                                  var match = results$1[/* pages */2][pageNum];
                                  if (match !== undefined) {
                                    return resultPage(match, model, context);
                                  } else {
                                    return noNode$1;
                                  }
                                }), pageNums))),
                  /* [] */0
                ]
              ]);
  }

  function openFilters(results, context) {
    var results$1 = results[/* count */0] > 0;
    var label = trans$1("Narrow search", context[/* translations */1]);
    return div$2(undefined, undefined, /* :: */[
                class$prime(openFacets(results$1)),
                /* :: */[
                  results$1 === true ? onClick(/* OpenFacets */1) : noProp$1,
                  /* [] */0
                ]
              ], /* :: */[
                a(undefined, undefined, /* :: */[
                      class$prime(facetsIcon),
                      /* :: */[
                        title(label),
                        /* [] */0
                      ]
                    ], /* :: */[
                      p(undefined, undefined, /* :: */[
                            class$prime(facetsIconLabel),
                            /* [] */0
                          ], /* :: */[
                            text$2(label),
                            /* [] */0
                          ]),
                      /* [] */0
                    ]),
                /* [] */0
              ]);
  }

  function filters(filters$1, context) {
    var items = map((function (param$$1) {
            var key = param$$1[0];
            var type$prime$$1 = key === "online_boolean" ? /* FacetBoolean */1 : /* FacetNormal */0;
            var label = trans$1(key, context[/* translations */1]);
            var value = getFacetLabel(key, param$$1[1], type$prime$$1, context[/* translations */1]);
            return div$2(undefined, undefined, /* :: */[
                        onClick(/* RemoveFilter */__(4, [key])),
                        /* :: */[
                          class$prime(removeFilter),
                          /* [] */0
                        ]
                      ], /* :: */[
                        div$2(undefined, undefined, /* :: */[
                              class$prime(removeFilterIcon),
                              /* [] */0
                            ], /* [] */0),
                        /* :: */[
                          div$2(undefined, undefined, /* :: */[
                                class$prime(removeFilterLabel),
                                /* [] */0
                              ], /* :: */[
                                p(undefined, undefined, /* :: */[
                                      class$prime(filterType),
                                      /* [] */0
                                    ], /* :: */[
                                      text$2(_1(sprintf(/* Format */[
                                                    /* String */__(2, [
                                                        /* No_padding */0,
                                                        /* Char_literal */__(12, [
                                                            /* ":" */58,
                                                            /* End_of_format */0
                                                          ])
                                                      ]),
                                                    "%s:"
                                                  ]), label)),
                                      /* [] */0
                                    ]),
                                /* :: */[
                                  p(undefined, undefined, /* :: */[
                                        class$prime(filterLabel),
                                        /* [] */0
                                      ], /* :: */[
                                        text$2(value),
                                        /* [] */0
                                      ]),
                                  /* [] */0
                                ]
                              ]),
                          /* [] */0
                        ]
                      ]);
          }), filters$1);
    return div$2(undefined, undefined, /* :: */[
                class$prime(filterContainer),
                /* [] */0
              ], items);
  }

  function blurSearchfield() {
    return (document.getElementById("search-field").blur() );
  }

  function searchField(lookfor, context, disable) {
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                input$prime(undefined, undefined, /* :: */[
                      id$1("search-field"),
                      /* :: */[
                        class$prime(searchBox),
                        /* :: */[
                          type$prime("search"),
                          /* :: */[
                            name("lookfor"),
                            /* :: */[
                              value$1(lookfor),
                              /* :: */[
                                onInput(undefined, (function (str) {
                                        return /* OnChange */__(2, [str]);
                                      })),
                                /* [] */0
                              ]
                            ]
                          ]
                        ]
                      ]
                    ], /* [] */0),
                /* :: */[
                  input$prime(undefined, undefined, /* :: */[
                        type$prime("submit"),
                        /* :: */[
                          class$prime(searchBoxSubmit(!disable)),
                          /* :: */[
                            Attributes[/* disabled */3](disable),
                            /* :: */[
                              value$1(trans$1("Search!", context[/* translations */1])),
                              /* [] */0
                            ]
                          ]
                        ]
                      ], /* [] */0),
                  /* [] */0
                ]
              ]);
  }

  function view$2(model, context, onMainPage) {
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                div$2(undefined, undefined, /* [] */0, /* :: */[
                      div$2(undefined, undefined, /* :: */[
                            class$prime(searchBoxWrapper),
                            /* [] */0
                          ], /* :: */[
                            form(undefined, undefined, /* :: */[
                                  onCB$1("submit", "", (function (ev) {
                                          ev.preventDefault();
                                          blurSearchfield(/* () */0);
                                          return /* OnSearch */0;
                                        })),
                                  /* [] */0
                                ], /* :: */[
                                  searchField(model[/* searchParams */0][/* lookfor */0], context, isLoading(model)),
                                  /* :: */[
                                    onMainPage ? noNode$1 : div$2(undefined, undefined, /* :: */[
                                            class$prime(filterTools),
                                            /* [] */0
                                          ], /* :: */[
                                            openFilters(model[/* results */1], context),
                                            /* :: */[
                                              filters(model[/* searchParams */0][/* filters */1], context),
                                              /* [] */0
                                            ]
                                          ]),
                                    /* [] */0
                                  ]
                                ]),
                            /* [] */0
                          ]),
                      /* [] */0
                    ]),
                /* :: */[
                  onMainPage ? noNode$1 : div$2(undefined, undefined, /* [] */0, /* :: */[
                          results(model[/* results */1], model, context),
                          /* :: */[
                            map$11(facetMsg, view$1(model[/* facetModel */5], context, model[/* searchParams */0][/* filters */1])),
                            /* [] */0
                          ]
                        ]),
                  /* [] */0
                ]
              ]);
  }

  var onSearch = /* OnSearch */0;
  /* Util Not a pure module */

  // Generated by BUCKLESCRIPT VERSION 4.0.4, PLEASE EDIT WITH CARE

  function changeLanguage(param_0) {
    return /* ChangeLanguage */__(0, [param_0]);
  }

  function gotTranslations(param_0) {
    return /* GotTranslations */__(1, [param_0]);
  }

  function urlChanged(param_0) {
    return /* UrlChanged */__(2, [param_0]);
  }

  function searchMsg(param_0) {
    return /* SearchMsg */__(3, [param_0]);
  }

  function recordMsg(param_0) {
    return /* RecordMsg */__(4, [param_0]);
  }

  function initContext(language$$1, limit) {
    return /* record */[
            /* language */language$$1,
            /* translations : Loading */1,
            /* visitedRecords : array */[],
            /* prevRoute */undefined,
            /* pagination : record */[
              /* items : [] */0,
              /* count */0,
              /* limit */limit
            ],
            /* recordIds : [] */0,
            /* numOfResults */0,
            /* resultLimit */limit
          ];
  }

  function init$7(_, $$location) {
    var language$$1 = languageOfCode(fromStorage("language", languageCode(/* LngFi */0)));
    var context = initContext(language$$1, 0);
    var route = urlToRoute($$location);
    var translationsCmd = loadTranslations(languageCode(context[/* language */0]), gotTranslations);
    var urlChangeCmd = msg(/* UrlChanged */__(2, [$$location]));
    return /* tuple */[
            /* record */[
              /* route */route,
              /* nextPage : PageReady */__(0, [route]),
              /* searchModel */init$6,
              /* recordModel */init$4,
              /* context */context
            ],
            batch(/* :: */[
                  urlChangeCmd,
                  /* :: */[
                    translationsCmd,
                    /* [] */0
                  ]
                ])
          ];
  }

  function subscriptions() {
    return none$2;
  }

  function pageToRoute(page) {
    return page[0];
  }

  function handlePageLoaded(route, model) {
    if (typeof route !== "number") {
      if (route.tag) {
        resetPageScroll(/* () */0);
      } else {
        var match = model[/* context */4][/* prevRoute */3];
        if (match !== undefined) {
          var route$1 = match;
          if (typeof route$1 !== "number") {
            if (route$1.tag) {
              scrollToElement(hash(route$1[0]));
            }
            
          }
          
        }
        
      }
    }
    var route$2 = model[/* nextPage */1][0];
    return /* record */[
            /* route */route$2,
            /* nextPage : PageReady */__(0, [route$2]),
            /* searchModel */model[/* searchModel */2],
            /* recordModel */model[/* recordModel */3],
            /* context */model[/* context */4]
          ];
  }

  function newSearch$1(lookfor, filters$$1, model, context) {
    var init = model[/* searchModel */2][/* searchParams */0];
    var searchParams_002 = /* page */init[/* page */2];
    var searchParams_003 = /* limit */init[/* limit */3];
    var searchParams = /* record */[
      /* lookfor */lookfor,
      /* filters */filters$$1,
      searchParams_002,
      searchParams_003
    ];
    var cmd = map$9(searchMsg, msg(onSearch));
    var init$1 = model[/* searchModel */2];
    var model_000 = /* route */model[/* route */0];
    var model_001 = /* nextPage */model[/* nextPage */1];
    var model_002 = /* searchModel : record */[
      /* searchParams */searchParams,
      /* results */init$1[/* results */1],
      /* lastSearch */init$1[/* lastSearch */2],
      /* nextResult */init$1[/* nextResult */3],
      /* facetsOpen */init$1[/* facetsOpen */4],
      /* facetModel */init$1[/* facetModel */5],
      /* onResults */init$1[/* onResults */6]
    ];
    var model_003 = /* recordModel */model[/* recordModel */3];
    var model_004 = /* context : record */[
      /* language */context[/* language */0],
      /* translations */context[/* translations */1],
      /* visitedRecords */context[/* visitedRecords */2],
      /* prevRoute */undefined,
      /* pagination */context[/* pagination */4],
      /* recordIds */context[/* recordIds */5],
      /* numOfResults */context[/* numOfResults */6],
      /* resultLimit */context[/* resultLimit */7]
    ];
    var model$1 = /* record */[
      model_000,
      model_001,
      model_002,
      model_003,
      model_004
    ];
    resetPageScroll(/* () */0);
    return /* tuple */[
            model$1,
            cmd
          ];
  }

  function handleOutMsg(outMsg, model) {
    var context = model[/* context */4];
    if (typeof outMsg === "number") {
      switch (outMsg) {
        case 0 : 
            return /* tuple */[
                    model,
                    none$1
                  ];
        case 1 : 
            var cmd = msg(/* RecordPaginated */0);
            return /* tuple */[
                    model,
                    map$9(recordMsg, cmd)
                  ];
        case 2 : 
            var params = model[/* searchModel */2][/* searchParams */0];
            var route = params[/* lookfor */0] === "" && length(params[/* filters */1]) === 0 ? /* MainRoute */0 : /* SearchRoute */__(0, [model[/* searchModel */2][/* searchParams */0]]);
            console.log(routeToUrl(route));
            var cmd$1 = openUrl(routeToUrl(route));
            return /* tuple */[
                    model,
                    cmd$1
                  ];
        
      }
    } else {
      switch (outMsg.tag | 0) {
        case 0 : 
            var context_000 = /* language */context[/* language */0];
            var context_001 = /* translations */outMsg[0];
            var context_002 = /* visitedRecords */context[/* visitedRecords */2];
            var context_003 = /* prevRoute */context[/* prevRoute */3];
            var context_004 = /* pagination */context[/* pagination */4];
            var context_005 = /* recordIds */context[/* recordIds */5];
            var context_006 = /* numOfResults */context[/* numOfResults */6];
            var context_007 = /* resultLimit */context[/* resultLimit */7];
            var context$1 = /* record */[
              context_000,
              context_001,
              context_002,
              context_003,
              context_004,
              context_005,
              context_006,
              context_007
            ];
            return /* tuple */[
                    /* record */[
                      /* route */model[/* route */0],
                      /* nextPage */model[/* nextPage */1],
                      /* searchModel */model[/* searchModel */2],
                      /* recordModel */model[/* recordModel */3],
                      /* context */context$1
                    ],
                    none$1
                  ];
        case 1 : 
            return /* tuple */[
                    /* record */[
                      /* route */model[/* route */0],
                      /* nextPage */model[/* nextPage */1],
                      /* searchModel */model[/* searchModel */2],
                      /* recordModel */model[/* recordModel */3],
                      /* context : record */[
                        /* language */context[/* language */0],
                        /* translations */context[/* translations */1],
                        /* visitedRecords */context[/* visitedRecords */2],
                        /* prevRoute */context[/* prevRoute */3],
                        /* pagination */outMsg[0],
                        /* recordIds */context[/* recordIds */5],
                        /* numOfResults */context[/* numOfResults */6],
                        /* resultLimit */context[/* resultLimit */7]
                      ]
                    ],
                    none$1
                  ];
        case 2 : 
            var match = outMsg[0];
            return /* tuple */[
                    /* record */[
                      /* route */model[/* route */0],
                      /* nextPage */model[/* nextPage */1],
                      /* searchModel */model[/* searchModel */2],
                      /* recordModel */model[/* recordModel */3],
                      /* context : record */[
                        /* language */context[/* language */0],
                        /* translations */context[/* translations */1],
                        /* visitedRecords */context[/* visitedRecords */2],
                        /* prevRoute */context[/* prevRoute */3],
                        /* pagination */context[/* pagination */4],
                        /* recordIds */match[1],
                        /* numOfResults */match[0],
                        /* resultLimit */match[2]
                      ]
                    ],
                    none$1
                  ];
        case 3 : 
            return /* tuple */[
                    /* record */[
                      /* route */model[/* route */0],
                      /* nextPage */model[/* nextPage */1],
                      /* searchModel */model[/* searchModel */2],
                      /* recordModel */model[/* recordModel */3],
                      /* context : record */[
                        /* language */context[/* language */0],
                        /* translations */context[/* translations */1],
                        /* visitedRecords */outMsg[0],
                        /* prevRoute */context[/* prevRoute */3],
                        /* pagination */context[/* pagination */4],
                        /* recordIds */context[/* recordIds */5],
                        /* numOfResults */context[/* numOfResults */6],
                        /* resultLimit */context[/* resultLimit */7]
                      ]
                    ],
                    none$1
                  ];
        case 4 : 
            var match$1 = update$2(model[/* searchModel */2], model[/* context */4], searchMore(/* tuple */[
                      outMsg[0],
                      true
                    ]));
            var cmd$2 = map$9(searchMsg, match$1[1]);
            return /* tuple */[
                    /* record */[
                      /* route */model[/* route */0],
                      /* nextPage */model[/* nextPage */1],
                      /* searchModel */match$1[0],
                      /* recordModel */model[/* recordModel */3],
                      /* context */model[/* context */4]
                    ],
                    cmd$2
                  ];
        case 5 : 
            var model$1 = handlePageLoaded(outMsg[0], model);
            return /* tuple */[
                    model$1,
                    none$1
                  ];
        case 6 : 
            var match$2 = outMsg[0];
            var filter$$1 = match$2[1];
            var lookfor = match$2[0];
            if (lookfor !== undefined) {
              return newSearch$1(lookfor, /* [] */0, model, context);
            } else if (filter$$1 !== undefined) {
              var match$3 = filter$$1;
              return newSearch$1("", /* :: */[
                          /* tuple */[
                            match$3[0],
                            match$3[1]
                          ],
                          /* [] */0
                        ], model, context);
            } else {
              return /* tuple */[
                      model,
                      none$1
                    ];
            }
        
      }
    }
  }

  function handleOutMsgs(outMsgs, model) {
    return fold_left((function (param$$1, outMsg) {
                  var match = handleOutMsg(outMsg, param$$1[0]);
                  return /* tuple */[
                          match[0],
                          append(param$$1[1], /* :: */[
                                match[1],
                                /* [] */0
                              ])
                        ];
                }), /* tuple */[
                model,
                /* [] */0
              ], outMsgs);
  }

  function update$3(model, param$$1) {
    switch (param$$1.tag | 0) {
      case 0 : 
          var language$$1 = param$$1[0];
          var cmd = loadTranslations(languageCode(language$$1), gotTranslations);
          var init = model[/* context */4];
          var context_001 = /* translations */init[/* translations */1];
          var context_002 = /* visitedRecords */init[/* visitedRecords */2];
          var context_003 = /* prevRoute */init[/* prevRoute */3];
          var context_004 = /* pagination */init[/* pagination */4];
          var context_005 = /* recordIds */init[/* recordIds */5];
          var context_006 = /* numOfResults */init[/* numOfResults */6];
          var context_007 = /* resultLimit */init[/* resultLimit */7];
          var context = /* record */[
            /* language */language$$1,
            context_001,
            context_002,
            context_003,
            context_004,
            context_005,
            context_006,
            context_007
          ];
          return /* tuple */[
                  /* record */[
                    /* route */model[/* route */0],
                    /* nextPage */model[/* nextPage */1],
                    /* searchModel */model[/* searchModel */2],
                    /* recordModel */model[/* recordModel */3],
                    /* context */context
                  ],
                  cmd
                ];
      case 1 : 
          var match = param$$1[0];
          if (match.tag) {
            var translations = /* Error */__(2, [string_of_error(match[0])]);
            var init$1 = model[/* context */4];
            var context_000 = /* language */init$1[/* language */0];
            var context_002$1 = /* visitedRecords */init$1[/* visitedRecords */2];
            var context_003$1 = /* prevRoute */init$1[/* prevRoute */3];
            var context_004$1 = /* pagination */init$1[/* pagination */4];
            var context_005$1 = /* recordIds */init$1[/* recordIds */5];
            var context_006$1 = /* numOfResults */init$1[/* numOfResults */6];
            var context_007$1 = /* resultLimit */init$1[/* resultLimit */7];
            var context$1 = /* record */[
              context_000,
              /* translations */translations,
              context_002$1,
              context_003$1,
              context_004$1,
              context_005$1,
              context_006$1,
              context_007$1
            ];
            return /* tuple */[
                    /* record */[
                      /* route */model[/* route */0],
                      /* nextPage */model[/* nextPage */1],
                      /* searchModel */model[/* searchModel */2],
                      /* recordModel */model[/* recordModel */3],
                      /* context */context$1
                    ],
                    none$1
                  ];
          } else {
            toStorage("language", languageCode(model[/* context */4][/* language */0]));
            var translations$1 = decodeTranslations(match[0]);
            var match$1 = handleOutMsg(/* UpdateTranslations */__(0, [translations$1]), model);
            return /* tuple */[
                    match$1[0],
                    match$1[1]
                  ];
          }
      case 2 : 
          var route = urlToRoute(param$$1[0]);
          var currentRoute = model[/* route */0];
          var match$2;
          if (typeof route === "number") {
            match$2 = /* tuple */[
              /* PageReady */__(0, [/* MainRoute */0]),
              none$1,
              route
            ];
          } else if (route.tag) {
            var id = route[0];
            match$2 = /* tuple */[
              /* PageLoading */__(1, [/* RecordRoute */__(1, [id])]),
              map$9(recordMsg, msg(showRecord(id))),
              currentRoute
            ];
          } else {
            var query = route[0];
            match$2 = /* tuple */[
              /* PageLoading */__(1, [/* SearchRoute */__(0, [query])]),
              map$9(searchMsg, msg(search(query))),
              currentRoute
            ];
          }
          var init$2 = model[/* context */4];
          var context_000$1 = /* language */init$2[/* language */0];
          var context_001$1 = /* translations */init$2[/* translations */1];
          var context_002$2 = /* visitedRecords */init$2[/* visitedRecords */2];
          var context_003$2 = /* prevRoute */model[/* route */0];
          var context_004$2 = /* pagination */init$2[/* pagination */4];
          var context_005$2 = /* recordIds */init$2[/* recordIds */5];
          var context_006$2 = /* numOfResults */init$2[/* numOfResults */6];
          var context_007$2 = /* resultLimit */init$2[/* resultLimit */7];
          var context$2 = /* record */[
            context_000$1,
            context_001$1,
            context_002$2,
            context_003$2,
            context_004$2,
            context_005$2,
            context_006$2,
            context_007$2
          ];
          return /* tuple */[
                  /* record */[
                    /* route */match$2[2],
                    /* nextPage */match$2[0],
                    /* searchModel */model[/* searchModel */2],
                    /* recordModel */model[/* recordModel */3],
                    /* context */context$2
                  ],
                  match$2[1]
                ];
      case 3 : 
          var match$3 = update$2(model[/* searchModel */2], model[/* context */4], param$$1[0]);
          var cmd$1 = map$9(searchMsg, match$3[1]);
          var model_000 = /* route */model[/* route */0];
          var model_001 = /* nextPage */model[/* nextPage */1];
          var model_002 = /* searchModel */match$3[0];
          var model_003 = /* recordModel */model[/* recordModel */3];
          var model_004 = /* context */model[/* context */4];
          var model$1 = /* record */[
            model_000,
            model_001,
            model_002,
            model_003,
            model_004
          ];
          var match$4 = handleOutMsgs(match$3[2], model$1);
          return /* tuple */[
                  match$4[0],
                  batch(append(/* :: */[
                            cmd$1,
                            /* [] */0
                          ], match$4[1]))
                ];
      case 4 : 
          var match$5 = update(model[/* recordModel */3], model[/* context */4], param$$1[0]);
          var cmd$2 = map$9(recordMsg, match$5[1]);
          var model_000$1 = /* route */model[/* route */0];
          var model_001$1 = /* nextPage */model[/* nextPage */1];
          var model_002$1 = /* searchModel */model[/* searchModel */2];
          var model_003$1 = /* recordModel */match$5[0];
          var model_004$1 = /* context */model[/* context */4];
          var model$2 = /* record */[
            model_000$1,
            model_001$1,
            model_002$1,
            model_003$1,
            model_004$1
          ];
          var match$6 = handleOutMsgs(match$5[2], model$2);
          return /* tuple */[
                  match$6[0],
                  batch(append(/* :: */[
                            cmd$2,
                            /* [] */0
                          ], match$6[1]))
                ];
      
    }
  }

  function languageMenu$1(context) {
    var item = function (lng, currentLng) {
      var active = lng === currentLng;
      return li(undefined, undefined, /* :: */[
                  class$prime(language(active)),
                  /* :: */[
                    onClick(/* ChangeLanguage */__(0, [lng])),
                    /* [] */0
                  ]
                ], /* :: */[
                  text$2(languageCode(lng)),
                  /* [] */0
                ]);
    };
    var currentLng = context[/* language */0];
    return div$2(undefined, undefined, /* :: */[
                class$prime(languageMenuContainer),
                /* [] */0
              ], /* :: */[
                ul(undefined, undefined, /* :: */[
                      class$prime(languageMenu),
                      /* [] */0
                    ], /* :: */[
                      item(/* LngFi */0, currentLng),
                      /* :: */[
                        item(/* LngEn */1, currentLng),
                        /* [] */0
                      ]
                    ]),
                /* [] */0
              ]);
  }

  function view$3(model) {
    var match = model[/* nextPage */1];
    var pageLoading;
    pageLoading = match.tag ? true : false;
    var match$1 = model[/* route */0];
    var tmp;
    if (typeof match$1 === "number") {
      console.log("main::main");
      tmp = div$2(undefined, undefined, /* [] */0, /* :: */[
            map$11(searchMsg, view$2(model[/* searchModel */2], model[/* context */4], true)),
            /* [] */0
          ]);
    } else if (match$1.tag) {
      console.log("main::rec");
      tmp = map$11(recordMsg, view(model[/* recordModel */3], model[/* context */4]));
    } else {
      tmp = div$2(undefined, undefined, /* [] */0, /* :: */[
            map$11(searchMsg, view$2(model[/* searchModel */2], model[/* context */4], false)),
            /* [] */0
          ]);
    }
    return div$2(undefined, undefined, /* [] */0, /* :: */[
                div$2(undefined, undefined, /* :: */[
                      class$prime(loadingIndicator(pageLoading)),
                      /* [] */0
                    ], /* :: */[
                      text$2(trans$1("Loading...", model[/* context */4][/* translations */1])),
                      /* [] */0
                    ]),
                /* :: */[
                  div$2(undefined, undefined, /* [] */0, /* :: */[
                        p(undefined, undefined, /* [] */0, /* :: */[
                              tmp,
                              /* [] */0
                            ]),
                        /* :: */[
                          languageMenu$1(model[/* context */4]),
                          /* [] */0
                        ]
                      ]),
                  /* [] */0
                ]
              ]);
  }

  var main$1 = navigationProgram(urlChanged, /* record */[
        /* init */init$7,
        /* update */update$3,
        /* view */view$3,
        /* subscriptions */subscriptions,
        /* shutdown */(function () {
            return none$1;
          })
      ]);
  /* main Not a pure module */

  exports.changeLanguage = changeLanguage;
  exports.gotTranslations = gotTranslations;
  exports.urlChanged = urlChanged;
  exports.searchMsg = searchMsg;
  exports.recordMsg = recordMsg;
  exports.initContext = initContext;
  exports.init = init$7;
  exports.subscriptions = subscriptions;
  exports.pageToRoute = pageToRoute;
  exports.handlePageLoaded = handlePageLoaded;
  exports.newSearch = newSearch$1;
  exports.handleOutMsg = handleOutMsg;
  exports.handleOutMsgs = handleOutMsgs;
  exports.update = update$3;
  exports.languageMenu = languageMenu$1;
  exports.view = view$3;
  exports.main = main$1;

  return exports;

}({}));
